{"ast":null,"code":"var utilities=require(\"./utilities\");// constants\nvar HTML='html';var HEAD='head';var BODY='body';var FIRST_TAG_REGEX=/<([a-zA-Z]+[0-9]?)/;// e.g., <h1>\nvar HEAD_TAG_REGEX=/<head.*>/i;var BODY_TAG_REGEX=/<body.*>/i;// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX=/<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;// detect IE browser\nvar isIE9=utilities.isIE(9);var isIE=isIE9||utilities.isIE();// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument=function parseFromDocument(){throw new Error('This browser does not support `document.implementation.createHTMLDocument`');};var parseFromString=function parseFromString(){throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');};/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */if(typeof window.DOMParser==='function'){var domParser=new window.DOMParser();// IE9 does not support 'text/html' MIME type\n// https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\nvar mimeType=isIE9?'text/xml':'text/html';/**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */parseFromString=function parseFromString(html,tagName){if(tagName){html='<'+tagName+'>'+html+'</'+tagName+'>';}// because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\nif(isIE9){html=html.replace(VOID_ELEMENTS_REGEX,'<$1$2$3/>');}return domParser.parseFromString(html,mimeType);};parseFromDocument=parseFromString;}/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */if(document.implementation){// title parameter is required in IE\n// https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\nvar doc=document.implementation.createHTMLDocument(isIE?'html-dom-parser':undefined);/**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */parseFromDocument=function parseFromDocument(html,tagName){if(tagName){doc.documentElement.getElementsByTagName(tagName)[0].innerHTML=html;return doc;}try{doc.documentElement.innerHTML=html;return doc;// fallback when certain elements in `documentElement` are read-only (IE9)\n}catch(err){if(parseFromString){return parseFromString(html);}}};}/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */var template=document.createElement('template');var parseFromTemplate;if(template.content){/**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */parseFromTemplate=function parseFromTemplate(html){template.innerHTML=html;return template.content.childNodes;};}/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */function domparser(html){var firstTagName;var match=html.match(FIRST_TAG_REGEX);if(match&&match[1]){firstTagName=match[1].toLowerCase();}var doc;var element;var elements;switch(firstTagName){case HTML:doc=parseFromString(html);// the created document may come with filler head/body elements,\n// so make sure to remove them if they don't actually exist\nif(!HEAD_TAG_REGEX.test(html)){element=doc.getElementsByTagName(HEAD)[0];if(element){element.parentNode.removeChild(element);}}if(!BODY_TAG_REGEX.test(html)){element=doc.getElementsByTagName(BODY)[0];if(element){element.parentNode.removeChild(element);}}return doc.getElementsByTagName(HTML);case HEAD:case BODY:elements=parseFromDocument(html).getElementsByTagName(firstTagName);// if there's a sibling element, then return both elements\nif(BODY_TAG_REGEX.test(html)&&HEAD_TAG_REGEX.test(html)){return elements[0].parentNode.childNodes;}return elements;// low-level tag or text\ndefault:if(parseFromTemplate){return parseFromTemplate(html);}return parseFromDocument(html,BODY).getElementsByTagName(BODY)[0].childNodes;}}module.exports=domparser;","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/html-dom-parser/lib/domparser.js"],"names":["utilities","require","HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","VOID_ELEMENTS_REGEX","isIE9","isIE","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","replace","document","implementation","doc","createHTMLDocument","undefined","documentElement","getElementsByTagName","innerHTML","err","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"mappings":"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","sourcesContent":["var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE ? 'html-dom-parser' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"]},"metadata":{},"sourceType":"module"}