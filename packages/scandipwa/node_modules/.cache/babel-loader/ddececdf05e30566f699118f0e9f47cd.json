{"ast":null,"code":"import $$observable from'symbol-observable';/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */var randomString=function randomString(){return Math.random().toString(36).substring(7).split('').join('.');};var ActionTypes={INIT:\"@@redux/INIT\"+randomString(),REPLACE:\"@@redux/REPLACE\"+randomString(),PROBE_UNKNOWN_ACTION:function PROBE_UNKNOWN_ACTION(){return\"@@redux/PROBE_UNKNOWN_ACTION\"+randomString();}};/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */function isPlainObject(obj){if(typeof obj!=='object'||obj===null)return false;var proto=obj;while(Object.getPrototypeOf(proto)!==null){proto=Object.getPrototypeOf(proto);}return Object.getPrototypeOf(obj)===proto;}/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */function createStore(reducer,preloadedState,enhancer){var _ref2;if(typeof preloadedState==='function'&&typeof enhancer==='function'||typeof enhancer==='function'&&typeof arguments[3]==='function'){throw new Error('It looks like you are passing several store enhancers to '+'createStore(). This is not supported. Instead, compose them '+'together to a single function.');}if(typeof preloadedState==='function'&&typeof enhancer==='undefined'){enhancer=preloadedState;preloadedState=undefined;}if(typeof enhancer!=='undefined'){if(typeof enhancer!=='function'){throw new Error('Expected the enhancer to be a function.');}return enhancer(createStore)(reducer,preloadedState);}if(typeof reducer!=='function'){throw new Error('Expected the reducer to be a function.');}var currentReducer=reducer;var currentState=preloadedState;var currentListeners=[];var nextListeners=currentListeners;var isDispatching=false;/**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */function ensureCanMutateNextListeners(){if(nextListeners===currentListeners){nextListeners=currentListeners.slice();}}/**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */function getState(){if(isDispatching){throw new Error('You may not call store.getState() while the reducer is executing. '+'The reducer has already received the state as an argument. '+'Pass it down from the top reducer instead of reading it from the store.');}return currentState;}/**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */function subscribe(listener){if(typeof listener!=='function'){throw new Error('Expected the listener to be a function.');}if(isDispatching){throw new Error('You may not call store.subscribe() while the reducer is executing. '+'If you would like to be notified after the store has been updated, subscribe from a '+'component and invoke store.getState() in the callback to access the latest state. '+'See https://redux.js.org/api-reference/store#subscribelistener for more details.');}var isSubscribed=true;ensureCanMutateNextListeners();nextListeners.push(listener);return function unsubscribe(){if(!isSubscribed){return;}if(isDispatching){throw new Error('You may not unsubscribe from a store listener while the reducer is executing. '+'See https://redux.js.org/api-reference/store#subscribelistener for more details.');}isSubscribed=false;ensureCanMutateNextListeners();var index=nextListeners.indexOf(listener);nextListeners.splice(index,1);currentListeners=null;};}/**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */function dispatch(action){if(!isPlainObject(action)){throw new Error('Actions must be plain objects. '+'Use custom middleware for async actions.');}if(typeof action.type==='undefined'){throw new Error('Actions may not have an undefined \"type\" property. '+'Have you misspelled a constant?');}if(isDispatching){throw new Error('Reducers may not dispatch actions.');}try{isDispatching=true;currentState=currentReducer(currentState,action);}finally{isDispatching=false;}var listeners=currentListeners=nextListeners;for(var i=0;i<listeners.length;i++){var listener=listeners[i];listener();}return action;}/**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */function replaceReducer(nextReducer){if(typeof nextReducer!=='function'){throw new Error('Expected the nextReducer to be a function.');}currentReducer=nextReducer;// This action has a similiar effect to ActionTypes.INIT.\n// Any reducers that existed in both the new and old rootReducer\n// will receive the previous state. This effectively populates\n// the new state tree with any relevant data from the old one.\ndispatch({type:ActionTypes.REPLACE});}/**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */function observable(){var _ref;var outerSubscribe=subscribe;return _ref={/**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */subscribe:function subscribe(observer){if(typeof observer!=='object'||observer===null){throw new TypeError('Expected the observer to be an object.');}function observeState(){if(observer.next){observer.next(getState());}}observeState();var unsubscribe=outerSubscribe(observeState);return{unsubscribe:unsubscribe};}},_ref[$$observable]=function(){return this;},_ref;}// When a store is created, an \"INIT\" action is dispatched so that every\n// reducer returns their initial state. This effectively populates\n// the initial state tree.\ndispatch({type:ActionTypes.INIT});return _ref2={dispatch:dispatch,subscribe:subscribe,getState:getState,replaceReducer:replaceReducer},_ref2[$$observable]=observable,_ref2;}/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */function warning(message){/* eslint-disable no-console */if(typeof console!=='undefined'&&typeof console.error==='function'){console.error(message);}/* eslint-enable no-console */try{// This error was thrown as a convenience so that if you enable\n// \"break on all exceptions\" in your console,\n// it would pause the execution at this line.\nthrow new Error(message);}catch(e){}// eslint-disable-line no-empty\n}function getUndefinedStateErrorMessage(key,action){var actionType=action&&action.type;var actionDescription=actionType&&\"action \\\"\"+String(actionType)+\"\\\"\"||'an action';return\"Given \"+actionDescription+\", reducer \\\"\"+key+\"\\\" returned undefined. \"+\"To ignore an action, you must explicitly return the previous state. \"+\"If you want this reducer to hold no value, you can return null instead of undefined.\";}function getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){var reducerKeys=Object.keys(reducers);var argumentName=action&&action.type===ActionTypes.INIT?'preloadedState argument passed to createStore':'previous state received by the reducer';if(reducerKeys.length===0){return'Store does not have a valid reducer. Make sure the argument passed '+'to combineReducers is an object whose values are reducers.';}if(!isPlainObject(inputState)){return\"The \"+argumentName+\" has unexpected type of \\\"\"+{}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1]+\"\\\". Expected argument to be an object with the following \"+(\"keys: \\\"\"+reducerKeys.join('\", \"')+\"\\\"\");}var unexpectedKeys=Object.keys(inputState).filter(function(key){return!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key];});unexpectedKeys.forEach(function(key){unexpectedKeyCache[key]=true;});if(action&&action.type===ActionTypes.REPLACE)return;if(unexpectedKeys.length>0){return\"Unexpected \"+(unexpectedKeys.length>1?'keys':'key')+\" \"+(\"\\\"\"+unexpectedKeys.join('\", \"')+\"\\\" found in \"+argumentName+\". \")+\"Expected to find one of the known reducer keys instead: \"+(\"\\\"\"+reducerKeys.join('\", \"')+\"\\\". Unexpected keys will be ignored.\");}}function assertReducerShape(reducers){Object.keys(reducers).forEach(function(key){var reducer=reducers[key];var initialState=reducer(undefined,{type:ActionTypes.INIT});if(typeof initialState==='undefined'){throw new Error(\"Reducer \\\"\"+key+\"\\\" returned undefined during initialization. \"+\"If the state passed to the reducer is undefined, you must \"+\"explicitly return the initial state. The initial state may \"+\"not be undefined. If you don't want to set a value for this reducer, \"+\"you can use null instead of undefined.\");}if(typeof reducer(undefined,{type:ActionTypes.PROBE_UNKNOWN_ACTION()})==='undefined'){throw new Error(\"Reducer \\\"\"+key+\"\\\" returned undefined when probed with a random type. \"+(\"Don't try to handle \"+ActionTypes.INIT+\" or other actions in \\\"redux/*\\\" \")+\"namespace. They are considered private. Instead, you must return the \"+\"current state for any unknown actions, unless it is undefined, \"+\"in which case you must return the initial state, regardless of the \"+\"action type. The initial state may not be undefined, but can be null.\");}});}/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */function combineReducers(reducers){var reducerKeys=Object.keys(reducers);var finalReducers={};for(var i=0;i<reducerKeys.length;i++){var key=reducerKeys[i];if(process.env.NODE_ENV!=='production'){if(typeof reducers[key]==='undefined'){warning(\"No reducer provided for key \\\"\"+key+\"\\\"\");}}if(typeof reducers[key]==='function'){finalReducers[key]=reducers[key];}}var finalReducerKeys=Object.keys(finalReducers);// This is used to make sure we don't warn about the same\n// keys multiple times.\nvar unexpectedKeyCache;if(process.env.NODE_ENV!=='production'){unexpectedKeyCache={};}var shapeAssertionError;try{assertReducerShape(finalReducers);}catch(e){shapeAssertionError=e;}return function combination(state,action){if(state===void 0){state={};}if(shapeAssertionError){throw shapeAssertionError;}if(process.env.NODE_ENV!=='production'){var warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,unexpectedKeyCache);if(warningMessage){warning(warningMessage);}}var hasChanged=false;var nextState={};for(var _i=0;_i<finalReducerKeys.length;_i++){var _key=finalReducerKeys[_i];var reducer=finalReducers[_key];var previousStateForKey=state[_key];var nextStateForKey=reducer(previousStateForKey,action);if(typeof nextStateForKey==='undefined'){var errorMessage=getUndefinedStateErrorMessage(_key,action);throw new Error(errorMessage);}nextState[_key]=nextStateForKey;hasChanged=hasChanged||nextStateForKey!==previousStateForKey;}hasChanged=hasChanged||finalReducerKeys.length!==Object.keys(state).length;return hasChanged?nextState:state;};}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments));};}/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */function bindActionCreators(actionCreators,dispatch){if(typeof actionCreators==='function'){return bindActionCreator(actionCreators,dispatch);}if(typeof actionCreators!=='object'||actionCreators===null){throw new Error(\"bindActionCreators expected an object or a function, instead received \"+(actionCreators===null?'null':typeof actionCreators)+\". \"+\"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");}var boundActionCreators={};for(var key in actionCreators){var actionCreator=actionCreators[key];if(typeof actionCreator==='function'){boundActionCreators[key]=bindActionCreator(actionCreator,dispatch);}}return boundActionCreators;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){keys.push.apply(keys,Object.getOwnPropertySymbols(object));}if(enumerableOnly)keys=keys.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});return keys;}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */function compose(){for(var _len=arguments.length,funcs=new Array(_len),_key=0;_key<_len;_key++){funcs[_key]=arguments[_key];}if(funcs.length===0){return function(arg){return arg;};}if(funcs.length===1){return funcs[0];}return funcs.reduce(function(a,b){return function(){return a(b.apply(void 0,arguments));};});}/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */function applyMiddleware(){for(var _len=arguments.length,middlewares=new Array(_len),_key=0;_key<_len;_key++){middlewares[_key]=arguments[_key];}return function(createStore){return function(){var store=createStore.apply(void 0,arguments);var _dispatch=function dispatch(){throw new Error('Dispatching while constructing your middleware is not allowed. '+'Other middleware would not be applied to this dispatch.');};var middlewareAPI={getState:store.getState,dispatch:function dispatch(){return _dispatch.apply(void 0,arguments);}};var chain=middlewares.map(function(middleware){return middleware(middlewareAPI);});_dispatch=compose.apply(void 0,chain)(store.dispatch);return _objectSpread2({},store,{dispatch:_dispatch});};};}/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */function isCrushed(){}if(process.env.NODE_ENV!=='production'&&typeof isCrushed.name==='string'&&isCrushed.name!=='isCrushed'){warning('You are currently using minified code outside of NODE_ENV === \"production\". '+'This means that you are running a slower development build of Redux. '+'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify '+'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) '+'to ensure you have the correct code for your production build.');}export{ActionTypes as __DO_NOT_USE__ActionTypes,applyMiddleware,bindActionCreators,combineReducers,compose,createStore};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/redux/es/redux.js"],"names":["$$observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","Object","getPrototypeOf","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","observable","_ref","outerSubscribe","observer","TypeError","observeState","next","warning","message","console","error","e","getUndefinedStateErrorMessage","key","actionType","actionDescription","String","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","call","match","unexpectedKeys","filter","hasOwnProperty","forEach","assertReducerShape","initialState","combineReducers","finalReducers","process","env","NODE_ENV","finalReducerKeys","shapeAssertionError","combination","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread2","target","source","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","isCrushed","name","__DO_NOT_USE__ActionTypes"],"mappings":"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","sourcesContent":["import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n"]},"metadata":{},"sourceType":"module"}