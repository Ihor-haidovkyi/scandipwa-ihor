{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport CategoryQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/Category.query\";\nimport { updateCurrentCategory } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Category/Category.action\";\nimport { updateNoMatch } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/NoMatch/NoMatch.action\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport { QueryDispatcher } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request\";\n/**\n * Category Dispatcher\n * @class CategoryDispatcher\n * @extends QueryDispatcher\n * @namespace Store/Category/Dispatcher\n */\n\nexport class _CategoryDispatcher extends Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('Category');\n  }\n\n  onSuccess(data, dispatch, {\n    isSearchPage\n  }) {\n    const {\n      category = {},\n      category: {\n        id\n      }\n    } = data;\n\n    if (!id && !isSearchPage) {\n      dispatch(updateNoMatch(true));\n    }\n\n    dispatch(updateCurrentCategory(category));\n  }\n\n  onError(error, dispatch, {\n    isSearchPage\n  }) {\n    if (!isSearchPage) {\n      dispatch(updateNoMatch(true));\n      dispatch(showNotification('error', __('Error fetching Category!'), error));\n    } else {\n      dispatch(updateCurrentCategory({\n        id: 'all-products'\n      }));\n    }\n  }\n\n  prepareRequest(options) {\n    return CategoryQuery.getQuery(options);\n  }\n\n}\nObject.defineProperty(_CategoryDispatcher, 'name', {\n  value: 'CategoryDispatcher'\n});\n\nexport const CategoryDispatcher = middleware(_CategoryDispatcher, \"Store/Category/Dispatcher\");\nexport default new CategoryDispatcher();","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/store/Category/Category.dispatcher.js"],"names":["CategoryQuery","updateCurrentCategory","updateNoMatch","showNotification","QueryDispatcher","CategoryDispatcher","__construct","onSuccess","data","dispatch","isSearchPage","category","id","onError","error","__","prepareRequest","options","getQuery","Object","defineProperty","_CategoryDispatcher","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,aAAP;AACA,SAASC,qBAAT;AACA,SAASC,aAAT;AACA,SAASC,gBAAT;AACA,SAASC,eAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAN,qCAAiD;AACpDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,UAAlB;AACH;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAAEC,IAAAA;AAAF,GAAjB,EAAmC;AACxC,UAAM;AAAEC,MAAAA,QAAQ,GAAG,EAAb;AAAiBA,MAAAA,QAAQ,EAAE;AAAEC,QAAAA;AAAF;AAA3B,QAAsCJ,IAA5C;;AAEA,QAAI,CAACI,EAAD,IAAO,CAACF,YAAZ,EAA0B;AACtBD,MAAAA,QAAQ,CAACP,aAAa,CAAC,IAAD,CAAd,CAAR;AACH;;AAEDO,IAAAA,QAAQ,CAACR,qBAAqB,CAACU,QAAD,CAAtB,CAAR;AACH;;AAEDE,EAAAA,OAAO,CAACC,KAAD,EAAQL,QAAR,EAAkB;AAAEC,IAAAA;AAAF,GAAlB,EAAoC;AACvC,QAAI,CAACA,YAAL,EAAmB;AACfD,MAAAA,QAAQ,CAACP,aAAa,CAAC,IAAD,CAAd,CAAR;AACAO,MAAAA,QAAQ,CAACN,gBAAgB,CAAC,OAAD,EAAUY,EAAE,CAAC,0BAAD,CAAZ,EAA0CD,KAA1C,CAAjB,CAAR;AACH,KAHD,MAGO;AACHL,MAAAA,QAAQ,CAACR,qBAAqB,CAAC;AAAEW,QAAAA,EAAE,EAAE;AAAN,OAAD,CAAtB,CAAR;AACH;AACJ;;AAEDI,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpB,WAAOjB,aAAa,CAACkB,QAAd,CAAuBD,OAAvB,CAAP;AACH;;AA1BmD;AAvBxDE,MAAM,CAACC,cAAP,CAAsBC,mBAAtB,EAA2C,MAA3C,EAAmD;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAnD;;;AAoDA,eAAe,IAAIjB,kBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport CategoryQuery from 'Query/Category.query';\nimport { updateCurrentCategory } from 'Store/Category/Category.action';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Category Dispatcher\n * @class CategoryDispatcher\n * @extends QueryDispatcher\n * @namespace Store/Category/Dispatcher\n */\nexport class CategoryDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Category');\n    }\n\n    onSuccess(data, dispatch, { isSearchPage }) {\n        const { category = {}, category: { id } } = data;\n\n        if (!id && !isSearchPage) {\n            dispatch(updateNoMatch(true));\n        }\n\n        dispatch(updateCurrentCategory(category));\n    }\n\n    onError(error, dispatch, { isSearchPage }) {\n        if (!isSearchPage) {\n            dispatch(updateNoMatch(true));\n            dispatch(showNotification('error', __('Error fetching Category!'), error));\n        } else {\n            dispatch(updateCurrentCategory({ id: 'all-products' }));\n        }\n    }\n\n    prepareRequest(options) {\n        return CategoryQuery.getQuery(options);\n    }\n}\n\nexport default new CategoryDispatcher();\n"]},"metadata":{},"sourceType":"module"}