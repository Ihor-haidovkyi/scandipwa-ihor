{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component\\\\ProductActions\\\\ProductActions.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { PRODUCT_OUT_OF_STOCK } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component/CartItem/CartItem.config\";\nimport { ProductType } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\type/ProductList\";\nimport { BUNDLE, CONFIGURABLE, DOWNLOADABLE, GROUPED } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/Product\";\nimport ProductActions from \"./ProductActions.component\";\nimport { DEFAULT_MAX_PRODUCTS, ONE_HUNDRED_PERCENT } from \"./ProductActions.config\";\n/** @namespace Component/ProductActions/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    groupedProductQuantity: state.ProductReducer.groupedProductQuantity,\n    device: state.ConfigReducer.device,\n    displayProductStockStatus: state.ConfigReducer.display_product_stock_status,\n    isWishlistEnabled: state.ConfigReducer.wishlist_general_active\n  };\n}, \"Component/ProductActions/Container/mapStateToProps\");\n/** @namespace Component/ProductActions/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _ProductActionsContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      quantity: 1,\n      groupedProductQuantity: {}\n    };\n    this.containerFunctions = {\n      showOnlyIfLoaded: this.showOnlyIfLoaded.bind(this),\n      onProductValidationError: this.onProductValidationError.bind(this),\n      getIsOptionInCurrentVariant: this.getIsOptionInCurrentVariant.bind(this),\n      setQuantity: this.setQuantity.bind(this),\n      setGroupedProductQuantity: this._setGroupedProductQuantity.bind(this),\n      clearGroupedProductQuantity: this._clearGroupedProductQuantity.bind(this),\n      getIsConfigurableAttributeAvailable: this.getIsConfigurableAttributeAvailable.bind(this)\n    };\n    this.onConfigurableProductError = this.onProductError.bind(this, this.configurableOptionsRef);\n    this.onGroupedProductError = this.onProductError.bind(this, this.groupedProductsRef);\n\n    this.containerProps = function () {\n      return {\n        minQuantity: ProductActionsContainer.getMinQuantity(_this.props),\n        maxQuantity: ProductActionsContainer.getMaxQuantity(_this.props),\n        groupedProductQuantity: _this._getGroupedProductQuantity(),\n        productPrice: _this.getProductPrice(),\n        productName: _this.getProductName(),\n        offerCount: _this.getOfferCount(),\n        offerType: _this.getOfferType(),\n        stockMeta: _this.getStockMeta(),\n        metaLink: _this.getMetaLink()\n      };\n    };\n  }\n\n  static getMinQuantity(props) {\n    const {\n      product: {\n        stock_item: {\n          min_sale_qty\n        } = {},\n        variants\n      } = {},\n      configurableVariantIndex\n    } = props;\n\n    if (!min_sale_qty) {\n      return 1;\n    }\n\n    if (!configurableVariantIndex && !variants) {\n      return min_sale_qty;\n    }\n\n    const {\n      stock_item: {\n        min_sale_qty: minVariantQty\n      } = {}\n    } = variants[configurableVariantIndex] || {};\n    return minVariantQty || min_sale_qty;\n  }\n\n  static getMaxQuantity(props) {\n    const {\n      product: {\n        stock_item: {\n          max_sale_qty\n        } = {},\n        variants\n      } = {},\n      configurableVariantIndex\n    } = props;\n\n    if (!max_sale_qty) {\n      return DEFAULT_MAX_PRODUCTS;\n    }\n\n    if (configurableVariantIndex === -1 || !Object.keys(variants).length) {\n      return max_sale_qty;\n    }\n\n    const {\n      stock_item: {\n        max_sale_qty: maxVariantQty\n      } = {}\n    } = variants[configurableVariantIndex] || {};\n    return maxVariantQty || max_sale_qty;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      quantity\n    } = state;\n    const minQty = ProductActionsContainer.getMinQuantity(props);\n    const maxQty = ProductActionsContainer.getMaxQuantity(props);\n\n    if (quantity < minQty) {\n      return {\n        quantity: minQty\n      };\n    }\n\n    if (quantity > maxQty) {\n      return {\n        quantity: maxQty\n      };\n    }\n\n    return null;\n  }\n\n  onProductError(ref) {\n    if (!ref) {\n      return;\n    }\n\n    const {\n      current\n    } = ref;\n    current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center'\n    });\n    current.classList.remove('animate'); // eslint-disable-next-line no-unused-expressions\n\n    current.offsetWidth; // trigger a DOM reflow\n\n    current.classList.add('animate');\n  }\n\n  onProductValidationError(type) {\n    switch (type) {\n      case CONFIGURABLE:\n        this.onConfigurableProductError();\n        break;\n\n      case GROUPED:\n        this.onGroupedProductError();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setQuantity(value) {\n    this.setState({\n      quantity: +value\n    });\n  } // TODO: make key=>value based\n\n\n  getIsOptionInCurrentVariant(attribute, value) {\n    const {\n      configurableVariantIndex,\n      product: {\n        variants\n      }\n    } = this.props;\n\n    if (!variants) {\n      return false;\n    }\n\n    return variants[configurableVariantIndex].product[attribute] === value;\n  }\n\n  getIsConfigurableAttributeAvailable({\n    attribute_code,\n    attribute_value\n  }) {\n    const {\n      parameters,\n      product: {\n        variants\n      }\n    } = this.props;\n    const isAttributeSelected = Object.hasOwnProperty.call(parameters, attribute_code); // If value matches current attribute_value, option should be enabled\n\n    if (isAttributeSelected && parameters[attribute_code] === attribute_value) {\n      return true;\n    }\n\n    const parameterPairs = Object.entries(parameters);\n    const selectedAttributes = isAttributeSelected // Need to exclude itself, otherwise different attribute_values of the same attribute_code will always be disabled\n    ? parameterPairs.filter(function ([key]) {\n      return key !== attribute_code;\n    }) : parameterPairs;\n    return variants.some(function ({\n      stock_status,\n      attributes\n    }) {\n      const {\n        attribute_value: foundValue\n      } = attributes[attribute_code] || {};\n      return stock_status === 'IN_STOCK' // Variant must have currently checked attribute_code and attribute_value\n      && foundValue === attribute_value // Variant must have all currently selected attributes\n      && selectedAttributes.every(function ([key, value]) {\n        return attributes[key].attribute_value === value;\n      });\n    });\n  }\n\n  getProductName() {\n    const {\n      product,\n      product: {\n        variants = []\n      },\n      configurableVariantIndex\n    } = this.props;\n    const {\n      name\n    } = variants[configurableVariantIndex] || product;\n    return name;\n  }\n\n  getMetaLink() {\n    const {\n      getLink\n    } = this.props;\n    return window.location.origin + getLink().replace(/\\?.*/, '');\n  }\n\n  getStockMeta() {\n    const {\n      product,\n      product: {\n        variants = []\n      },\n      configurableVariantIndex\n    } = this.props;\n    const {\n      stock_status\n    } = variants[configurableVariantIndex] || product;\n\n    if (stock_status === PRODUCT_OUT_OF_STOCK) {\n      return 'https://schema.org/OutOfStock';\n    }\n\n    return 'https://schema.org/InStock';\n  }\n\n  getOfferType() {\n    const {\n      product: {\n        variants\n      }\n    } = this.props;\n\n    if (variants && variants.length >= 1) {\n      return 'https://schema.org/AggregateOffer';\n    }\n\n    return 'https://schema.org/Offer';\n  }\n\n  getOfferCount() {\n    const {\n      product: {\n        variants\n      }\n    } = this.props;\n\n    if (variants && variants.length) {\n      return variants.length;\n    }\n\n    return 0;\n  }\n\n  getSelectedOptions() {\n    const {\n      productOptionsData: {\n        productOptionsMulti = [],\n        productOptions = []\n      } = {}\n    } = this.props;\n    return [...productOptionsMulti, ...productOptions].map(function (productOption) {\n      const {\n        option_value\n      } = productOption;\n      return parseInt(option_value, 10);\n    });\n  }\n\n  getSelectedOptionsMulti() {\n    const {\n      productOptionsData: {\n        productOptionsMulti = [],\n        productOptions = []\n      } = {}\n    } = this.props;\n    return [...productOptionsMulti, ...productOptions].map(function (productOption) {\n      const {\n        option_id\n      } = productOption;\n      return parseInt(option_id, 10);\n    });\n  }\n\n  getCustomizablePrice() {\n    const {\n      product: {\n        options = [],\n        price_range: {\n          minimum_price: {\n            regular_price: {\n              value: regularPrice = 0\n            } = {},\n            regular_price_excl_tax: {\n              currency,\n              value: regularPriceExclTax = 0\n            } = {},\n            default_final_price_excl_tax: {\n              value: defaultFinalPriceExclTax = 0\n            } = {},\n            discount: {\n              percent_off = 0\n            } = {}\n          } = {}\n        } = {}\n      } = {}\n    } = this.props;\n\n    const customPrice = this._getCustomPrice(regularPrice, regularPriceExclTax, false);\n\n    const {\n      minimum_price: {\n        final_price: {\n          value: finalCustomPrice = 0\n        } = {},\n        final_price_excl_tax: {\n          value: finalCustomPriceExclTax = 0\n        } = {},\n        regular_price: {\n          value: regularCustomPrice = 0\n        } = {},\n        regular_price_excl_tax: {\n          value: regularCustomPriceExclTax = 0\n        } = {}\n      } = {}\n    } = customPrice;\n    const selectedOptions = this.getSelectedOptions();\n    const selectedOptionsMulti = this.getSelectedOptionsMulti();\n    const prices = options.reduce(function (acc, {\n      data = [],\n      option_id,\n      type\n    }) {\n      /*\n      * Such types contain a single item within data\n      * as those are looked up on the option_id\n      */\n      if (['area', 'field', 'file'].includes(type)) {\n        if (selectedOptionsMulti.includes(option_id)) {\n          /*\n          * Since such types only have a single value\n          * we can get the price_type directly\n          */\n          const [{\n            price_type\n          }] = data;\n\n          if (price_type === 'PERCENT') {\n            const price = data[0].price * finalCustomPrice / ONE_HUNDRED_PERCENT;\n            acc.push(price);\n          } else {\n            acc.push(data[0].price);\n          }\n        }\n\n        return acc;\n      }\n\n      data.forEach(function ({\n        option_type_id,\n        price,\n        price_type\n      }) {\n        if (selectedOptions.includes(option_type_id)) {\n          if (price_type === 'PERCENT') {\n            const finalPrice = price * finalCustomPrice / ONE_HUNDRED_PERCENT;\n            acc.push(finalPrice);\n          } else {\n            acc.push(price);\n          }\n        }\n      });\n      return acc;\n    }, []);\n    const selectedOptionsTotal = prices.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    return {\n      minimum_price: {\n        final_price: {\n          currency,\n          value: selectedOptionsTotal + finalCustomPrice\n        },\n        discount: {\n          percent_off\n        },\n        default_final_price_excl_tax: {\n          value: defaultFinalPriceExclTax\n        },\n        regular_price: {\n          value: selectedOptionsTotal + finalCustomPriceExclTax\n        },\n        final_price_excl_tax: {\n          value: selectedOptionsTotal + regularCustomPrice\n        },\n        regular_price_excl_tax: {\n          value: selectedOptionsTotal + regularCustomPriceExclTax\n        }\n      }\n    };\n  }\n\n  getProductPrice() {\n    const {\n      product,\n      product: {\n        variants = [],\n        type_id,\n        links_purchased_separately\n      },\n      configurableVariantIndex,\n      selectedLinkPrice\n    } = this.props;\n    const {\n      options = {}\n    } = product;\n    const {\n      price_range\n    } = variants[configurableVariantIndex] || product;\n\n    if (type_id === BUNDLE) {\n      const {\n        selectedBundlePrice,\n        selectedBundlePriceExclTax,\n        selectedInitialBundlePrice,\n        product: {\n          dynamic_price\n        }\n      } = this.props;\n      return this._getBundleCustomPrice(selectedBundlePrice, selectedBundlePriceExclTax, selectedInitialBundlePrice, dynamic_price);\n    }\n\n    if (type_id === DOWNLOADABLE && links_purchased_separately) {\n      return this._getCustomPrice(selectedLinkPrice, selectedLinkPrice, true);\n    }\n\n    if (Object.keys(options).length !== 0) {\n      return this.getCustomizablePrice();\n    }\n\n    return price_range;\n  }\n\n  _getCustomPrice(price, withoutTax, addBase = false) {\n    const {\n      product: {\n        price_range: {\n          minimum_price: {\n            regular_price: {\n              currency = '',\n              value = 0\n            } = {},\n            regular_price_excl_tax: {\n              value: value_excl_tax = 0\n            } = {},\n            discount: {\n              percent_off = 0\n            } = {}\n          } = {}\n        } = {}\n      } = {}\n    } = this.props;\n    const discount = 1 - percent_off / ONE_HUNDRED_PERCENT;\n    const basePrice = addBase ? value : 0;\n    const basePriceExclTax = addBase ? value_excl_tax : 0;\n    const finalPrice = (basePrice + price) * discount;\n    const finalPriceExclTax = (basePriceExclTax + withoutTax) * discount;\n    const priceValue = {\n      value: finalPrice,\n      currency\n    };\n    const priceValueExclTax = {\n      value: finalPriceExclTax,\n      currency\n    };\n    return {\n      minimum_price: {\n        final_price: priceValue,\n        regular_price: priceValue,\n        final_price_excl_tax: priceValueExclTax,\n        regular_price_excl_tax: priceValueExclTax\n      }\n    };\n  }\n\n  _getBundleCustomPrice(price, withoutTax, initial, isDynamicPrice) {\n    const {\n      product: {\n        price_range: {\n          minimum_price: {\n            default_price: {\n              currency,\n              value: defaultPrice\n            },\n            default_final_price: {\n              value: defaultFinalPrice\n            },\n            default_final_price_excl_tax: {\n              value: defaultFinalPriceExclTax\n            },\n            discount: discountData,\n            discount: {\n              percent_off\n            }\n          }\n        }\n      }\n    } = this.props; // If bundle product has dynamic price, it's own base price is always 0. For fix priced bundles price it's configurable\n\n    const addBase = !isDynamicPrice; // Adjusting `discount` for bundle products for discount to be displayed on PDP\n\n    const priceBeforeDiscount = addBase ? defaultPrice : initial;\n    const priceAfterDiscount = addBase ? defaultFinalPrice : price;\n    const finalDiscount = !percent_off && defaultPrice !== defaultFinalPrice ? {\n      percent_off: ONE_HUNDRED_PERCENT * (priceBeforeDiscount - priceAfterDiscount) / priceBeforeDiscount,\n      amount_off: priceBeforeDiscount - priceAfterDiscount\n    } : discountData; // Set initial price different from 0 for specific product types, i.e. downloadable, bundles with fixed price\n\n    const baseInitialPrice = addBase ? defaultPrice : 0;\n    const baseFinalPrice = addBase ? defaultFinalPrice : 0;\n    const basePriceExclTax = addBase ? defaultFinalPriceExclTax : 0;\n    const initialPrice = baseInitialPrice + initial;\n    const finalPrice = baseFinalPrice + price;\n    const finalPriceExclTax = basePriceExclTax + withoutTax;\n    const initialPriceValue = {\n      value: initialPrice,\n      currency\n    };\n    const priceValue = {\n      value: finalPrice,\n      currency\n    };\n    const priceValueExclTax = {\n      value: finalPriceExclTax,\n      currency\n    };\n    return {\n      minimum_price: {\n        final_price: priceValue,\n        regular_price: initialPriceValue,\n        final_price_excl_tax: priceValueExclTax,\n        regular_price_excl_tax: initialPriceValue,\n        discount: finalDiscount\n      }\n    };\n  }\n\n  _getGroupedProductQuantity() {\n    const {\n      groupedProductQuantity\n    } = this.state;\n    return groupedProductQuantity;\n  }\n\n  _setGroupedProductQuantity(id, value) {\n    this.setState(function ({\n      groupedProductQuantity\n    }) {\n      return {\n        groupedProductQuantity: { ...groupedProductQuantity,\n          [id]: value\n        }\n      };\n    });\n  }\n\n  _clearGroupedProductQuantity() {\n    this.setState({\n      groupedProductQuantity: {}\n    });\n  }\n\n  showOnlyIfLoaded(expression, content, placeholder = content) {\n    const {\n      areDetailsLoaded\n    } = this.props;\n\n    if (!areDetailsLoaded) {\n      return placeholder;\n    }\n\n    if (areDetailsLoaded && !expression) {\n      return null;\n    }\n\n    return content;\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, ProductActions, Object.assign({}, this.props, this.state, this.containerProps(), this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n/** @namespace Component/ProductActions/Container/mapDispatchToProps */\n// eslint-disable-next-line no-unused-vars\n\n_ProductActionsContainer.propTypes = {\n  product: ProductType.isRequired,\n  productOrVariant: PropTypes.object.isRequired,\n  configurableVariantIndex: PropTypes.number.isRequired,\n  areDetailsLoaded: PropTypes.bool.isRequired,\n  productOptionsData: PropTypes.objectOf(PropTypes.array).isRequired,\n  parameters: PropTypes.objectOf(PropTypes.string).isRequired,\n  selectedInitialBundlePrice: PropTypes.number.isRequired,\n  selectedBundlePrice: PropTypes.number.isRequired,\n  selectedBundlePriceExclTax: PropTypes.number.isRequired,\n  selectedLinkPrice: PropTypes.number.isRequired,\n  getLink: PropTypes.func.isRequired,\n  isWishlistEnabled: PropTypes.bool.isRequired\n};\nObject.defineProperty(_ProductActionsContainer, 'name', {\n  value: 'ProductActionsContainer'\n});\n\nexport const ProductActionsContainer = middleware(_ProductActionsContainer, \"Component/ProductActions/Container\");\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {};\n}, \"Component/ProductActions/Container/mapDispatchToProps\");\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActionsContainer);","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/packages/scandipwa/src/component/ProductActions/ProductActions.container.js"],"names":["PropTypes","PureComponent","connect","PRODUCT_OUT_OF_STOCK","ProductType","BUNDLE","CONFIGURABLE","DOWNLOADABLE","GROUPED","ProductActions","DEFAULT_MAX_PRODUCTS","ONE_HUNDRED_PERCENT","mapStateToProps","state","groupedProductQuantity","ProductReducer","device","ConfigReducer","displayProductStockStatus","display_product_stock_status","isWishlistEnabled","wishlist_general_active","ProductActionsContainer","quantity","containerFunctions","showOnlyIfLoaded","bind","onProductValidationError","getIsOptionInCurrentVariant","setQuantity","setGroupedProductQuantity","_setGroupedProductQuantity","clearGroupedProductQuantity","_clearGroupedProductQuantity","getIsConfigurableAttributeAvailable","onConfigurableProductError","onProductError","configurableOptionsRef","onGroupedProductError","groupedProductsRef","containerProps","minQuantity","getMinQuantity","props","maxQuantity","getMaxQuantity","_getGroupedProductQuantity","productPrice","getProductPrice","productName","getProductName","offerCount","getOfferCount","offerType","getOfferType","stockMeta","getStockMeta","metaLink","getMetaLink","product","stock_item","min_sale_qty","variants","configurableVariantIndex","minVariantQty","max_sale_qty","Object","keys","length","maxVariantQty","getDerivedStateFromProps","minQty","maxQty","ref","current","scrollIntoView","behavior","block","classList","remove","offsetWidth","add","type","value","setState","attribute","attribute_code","attribute_value","parameters","isAttributeSelected","hasOwnProperty","call","parameterPairs","entries","selectedAttributes","filter","key","some","stock_status","attributes","foundValue","every","name","getLink","window","location","origin","replace","getSelectedOptions","productOptionsData","productOptionsMulti","productOptions","map","productOption","option_value","parseInt","getSelectedOptionsMulti","option_id","getCustomizablePrice","options","price_range","minimum_price","regular_price","regularPrice","regular_price_excl_tax","currency","regularPriceExclTax","default_final_price_excl_tax","defaultFinalPriceExclTax","discount","percent_off","customPrice","_getCustomPrice","final_price","finalCustomPrice","final_price_excl_tax","finalCustomPriceExclTax","regularCustomPrice","regularCustomPriceExclTax","selectedOptions","selectedOptionsMulti","prices","reduce","acc","data","includes","price_type","price","push","forEach","option_type_id","finalPrice","selectedOptionsTotal","a","b","type_id","links_purchased_separately","selectedLinkPrice","selectedBundlePrice","selectedBundlePriceExclTax","selectedInitialBundlePrice","dynamic_price","_getBundleCustomPrice","withoutTax","addBase","value_excl_tax","basePrice","basePriceExclTax","finalPriceExclTax","priceValue","priceValueExclTax","initial","isDynamicPrice","default_price","defaultPrice","default_final_price","defaultFinalPrice","discountData","priceBeforeDiscount","priceAfterDiscount","finalDiscount","amount_off","baseInitialPrice","baseFinalPrice","initialPrice","initialPriceValue","id","expression","content","placeholder","areDetailsLoaded","render","propTypes","isRequired","productOrVariant","object","number","bool","objectOf","array","string","func","defineProperty","_ProductActionsContainer","mapDispatchToProps","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,oBAAT;AACA,SAASC,WAAT;AACA,SACIC,MADJ,EAEIC,YAFJ,EAGIC,YAHJ,EAIIC,OAJJ;AAOA,OAAOC,cAAP;AACA,SAASC,oBAAT,EAA+BC,mBAA/B;AAEA;;AACA,OAAO,MAAMC,eAAe,cAAG,UAACC,KAAD;AAAA,SAAY;AACvCC,IAAAA,sBAAsB,EAAED,KAAK,CAACE,cAAN,CAAqBD,sBADN;AAEvCE,IAAAA,MAAM,EAAEH,KAAK,CAACI,aAAN,CAAoBD,MAFW;AAGvCE,IAAAA,yBAAyB,EAAEL,KAAK,CAACI,aAAN,CAAoBE,4BAHR;AAIvCC,IAAAA,iBAAiB,EAAEP,KAAK,CAACI,aAAN,CAAoBI;AAJA,GAAZ;AAAA,CAAH,uDAArB;AAOP;;;;AACA,OAAO,MAAMC,wBAAN,mCAAoD;AAAA;AAAA;;AAAA;AAAA;AAAA,SA8DvDT,KA9DuD,GA8D/C;AACJU,MAAAA,QAAQ,EAAE,CADN;AAEJT,MAAAA,sBAAsB,EAAE;AAFpB,KA9D+C;AAAA,SAmEvDU,kBAnEuD,GAmElC;AACjBC,MAAAA,gBAAgB,EAAE,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CADD;AAEjBC,MAAAA,wBAAwB,EAAE,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAFT;AAGjBE,MAAAA,2BAA2B,EAAE,KAAKA,2BAAL,CAAiCF,IAAjC,CAAsC,IAAtC,CAHZ;AAIjBG,MAAAA,WAAW,EAAE,KAAKA,WAAL,CAAiBH,IAAjB,CAAsB,IAAtB,CAJI;AAKjBI,MAAAA,yBAAyB,EAAE,KAAKC,0BAAL,CAAgCL,IAAhC,CAAqC,IAArC,CALV;AAMjBM,MAAAA,2BAA2B,EAAE,KAAKC,4BAAL,CAAkCP,IAAlC,CAAuC,IAAvC,CANZ;AAOjBQ,MAAAA,mCAAmC,EAAE,KAAKA,mCAAL,CAAyCR,IAAzC,CAA8C,IAA9C;AAPpB,KAnEkC;AAAA,SA4FvDS,0BA5FuD,GA4F1B,KAAKC,cAAL,CAAoBV,IAApB,CAAyB,IAAzB,EAA+B,KAAKW,sBAApC,CA5F0B;AAAA,SA8FvDC,qBA9FuD,GA8F/B,KAAKF,cAAL,CAAoBV,IAApB,CAAyB,IAAzB,EAA+B,KAAKa,kBAApC,CA9F+B;;AAAA,SA2KvDC,cA3KuD,GA2KtC;AAAA,aAAO;AACpBC,QAAAA,WAAW,EAAEnB,uBAAuB,CAACoB,cAAxB,CAAuC,KAAI,CAACC,KAA5C,CADO;AAEpBC,QAAAA,WAAW,EAAEtB,uBAAuB,CAACuB,cAAxB,CAAuC,KAAI,CAACF,KAA5C,CAFO;AAGpB7B,QAAAA,sBAAsB,EAAE,KAAI,CAACgC,0BAAL,EAHJ;AAIpBC,QAAAA,YAAY,EAAE,KAAI,CAACC,eAAL,EAJM;AAKpBC,QAAAA,WAAW,EAAE,KAAI,CAACC,cAAL,EALO;AAMpBC,QAAAA,UAAU,EAAE,KAAI,CAACC,aAAL,EANQ;AAOpBC,QAAAA,SAAS,EAAE,KAAI,CAACC,YAAL,EAPS;AAQpBC,QAAAA,SAAS,EAAE,KAAI,CAACC,YAAL,EARS;AASpBC,QAAAA,QAAQ,EAAE,KAAI,CAACC,WAAL;AATU,OAAP;AAAA,KA3KsC;AAAA;;AAgBlC,SAAdhB,cAAc,CAACC,KAAD,EAAQ;AACzB,UAAM;AACFgB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAEC,UAAAA;AAAF,YAAmB,EAAjC;AAAqCC,QAAAA;AAArC,UAAkD,EADzD;AAEFC,MAAAA;AAFE,QAGFpB,KAHJ;;AAKA,QAAI,CAACkB,YAAL,EAAmB;AACf,aAAO,CAAP;AACH;;AACD,QAAI,CAACE,wBAAD,IAA6B,CAACD,QAAlC,EAA4C;AACxC,aAAOD,YAAP;AACH;;AAED,UAAM;AAAED,MAAAA,UAAU,EAAE;AAAEC,QAAAA,YAAY,EAAEG;AAAhB,UAAkC;AAAhD,QAAuDF,QAAQ,CAACC,wBAAD,CAAR,IAAsC,EAAnG;AAEA,WAAOC,aAAa,IAAIH,YAAxB;AACH;;AAEoB,SAAdhB,cAAc,CAACF,KAAD,EAAQ;AACzB,UAAM;AACFgB,MAAAA,OAAO,EAAE;AACLC,QAAAA,UAAU,EAAE;AACRK,UAAAA;AADQ,YAER,EAHC;AAILH,QAAAA;AAJK,UAKL,EANF;AAOFC,MAAAA;AAPE,QAQFpB,KARJ;;AAUA,QAAI,CAACsB,YAAL,EAAmB;AACf,aAAOvD,oBAAP;AACH;;AAED,QAAIqD,wBAAwB,KAAK,CAAC,CAA9B,IAAmC,CAACG,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,MAA9D,EAAsE;AAClE,aAAOH,YAAP;AACH;;AAED,UAAM;AACFL,MAAAA,UAAU,EAAE;AACRK,QAAAA,YAAY,EAAEI;AADN,UAER;AAHF,QAIFP,QAAQ,CAACC,wBAAD,CAAR,IAAsC,EAJ1C;AAMA,WAAOM,aAAa,IAAIJ,YAAxB;AACH;;AAiB8B,SAAxBK,wBAAwB,CAAC3B,KAAD,EAAQ9B,KAAR,EAAe;AAC1C,UAAM;AAAEU,MAAAA;AAAF,QAAeV,KAArB;AACA,UAAM0D,MAAM,GAAGjD,uBAAuB,CAACoB,cAAxB,CAAuCC,KAAvC,CAAf;AACA,UAAM6B,MAAM,GAAGlD,uBAAuB,CAACuB,cAAxB,CAAuCF,KAAvC,CAAf;;AAEA,QAAIpB,QAAQ,GAAGgD,MAAf,EAAuB;AACnB,aAAO;AAAEhD,QAAAA,QAAQ,EAAEgD;AAAZ,OAAP;AACH;;AACD,QAAIhD,QAAQ,GAAGiD,MAAf,EAAuB;AACnB,aAAO;AAAEjD,QAAAA,QAAQ,EAAEiD;AAAZ,OAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAMDpC,EAAAA,cAAc,CAACqC,GAAD,EAAM;AAChB,QAAI,CAACA,GAAL,EAAU;AACN;AACH;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAcD,GAApB;AAEAC,IAAAA,OAAO,CAACC,cAAR,CAAuB;AACnBC,MAAAA,QAAQ,EAAE,QADS;AAEnBC,MAAAA,KAAK,EAAE;AAFY,KAAvB;AAKAH,IAAAA,OAAO,CAACI,SAAR,CAAkBC,MAAlB,CAAyB,SAAzB,EAXgB,CAYhB;;AACAL,IAAAA,OAAO,CAACM,WAAR,CAbgB,CAaK;;AACrBN,IAAAA,OAAO,CAACI,SAAR,CAAkBG,GAAlB,CAAsB,SAAtB;AACH;;AAEDtD,EAAAA,wBAAwB,CAACuD,IAAD,EAAO;AAC3B,YAAQA,IAAR;AACA,WAAK5E,YAAL;AACI,aAAK6B,0BAAL;AACA;;AACJ,WAAK3B,OAAL;AACI,aAAK8B,qBAAL;AACA;;AACJ;AACI;AARJ;AAUH;;AAEDT,EAAAA,WAAW,CAACsD,KAAD,EAAQ;AACf,SAAKC,QAAL,CAAc;AAAE7D,MAAAA,QAAQ,EAAE,CAAC4D;AAAb,KAAd;AACH,GAhIsD,CAkIvD;;;AACAvD,EAAAA,2BAA2B,CAACyD,SAAD,EAAYF,KAAZ,EAAmB;AAC1C,UAAM;AAAEpB,MAAAA,wBAAF;AAA4BJ,MAAAA,OAAO,EAAE;AAAEG,QAAAA;AAAF;AAArC,QAAsD,KAAKnB,KAAjE;;AACA,QAAI,CAACmB,QAAL,EAAe;AACX,aAAO,KAAP;AACH;;AAED,WAAOA,QAAQ,CAACC,wBAAD,CAAR,CAAmCJ,OAAnC,CAA2C0B,SAA3C,MAA0DF,KAAjE;AACH;;AAEDjD,EAAAA,mCAAmC,CAAC;AAAEoD,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAD,EAAsC;AACrE,UAAM;AAAEC,MAAAA,UAAF;AAAc7B,MAAAA,OAAO,EAAE;AAAEG,QAAAA;AAAF;AAAvB,QAAwC,KAAKnB,KAAnD;AAEA,UAAM8C,mBAAmB,GAAGvB,MAAM,CAACwB,cAAP,CAAsBC,IAAtB,CAA2BH,UAA3B,EAAuCF,cAAvC,CAA5B,CAHqE,CAKrE;;AACA,QAAIG,mBAAmB,IAAID,UAAU,CAACF,cAAD,CAAV,KAA+BC,eAA1D,EAA2E;AACvE,aAAO,IAAP;AACH;;AAED,UAAMK,cAAc,GAAG1B,MAAM,CAAC2B,OAAP,CAAeL,UAAf,CAAvB;AAEA,UAAMM,kBAAkB,GAAGL,mBAAmB,CAC1C;AAD0C,MAExCG,cAAc,CAACG,MAAf,CAAsB,UAAC,CAACC,GAAD,CAAD;AAAA,aAAWA,GAAG,KAAKV,cAAnB;AAAA,KAAtB,CAFwC,GAGxCM,cAHN;AAKA,WAAO9B,QAAQ,CACVmC,IADE,CACG,UAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,EAAkC;AACpC,YAAM;AAAEZ,QAAAA,eAAe,EAAEa;AAAnB,UAAkCD,UAAU,CAACb,cAAD,CAAV,IAA8B,EAAtE;AAEA,aACIY,YAAY,KAAK,UAAjB,CACA;AADA,SAEGE,UAAU,KAAKb,eAFlB,CAGA;AAHA,SAIGO,kBAAkB,CAACO,KAAnB,CAAyB,UAAC,CAACL,GAAD,EAAMb,KAAN,CAAD;AAAA,eAAkBgB,UAAU,CAACH,GAAD,CAAV,CAAgBT,eAAhB,KAAoCJ,KAAtD;AAAA,OAAzB,CALP;AAOH,KAXE,CAAP;AAYH;;AAcDjC,EAAAA,cAAc,GAAG;AACb,UAAM;AACFS,MAAAA,OADE;AAEFA,MAAAA,OAAO,EAAE;AAAEG,QAAAA,QAAQ,GAAG;AAAb,OAFP;AAGFC,MAAAA;AAHE,QAIF,KAAKpB,KAJT;AAMA,UAAM;AACF2D,MAAAA;AADE,QAEFxC,QAAQ,CAACC,wBAAD,CAAR,IAAsCJ,OAF1C;AAIA,WAAO2C,IAAP;AACH;;AAED5C,EAAAA,WAAW,GAAG;AACV,UAAM;AAAE6C,MAAAA;AAAF,QAAc,KAAK5D,KAAzB;AACA,WAAO6D,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBH,OAAO,GAAGI,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,CAAhC;AACH;;AAEDnD,EAAAA,YAAY,GAAG;AACX,UAAM;AACFG,MAAAA,OADE;AAEFA,MAAAA,OAAO,EAAE;AAAEG,QAAAA,QAAQ,GAAG;AAAb,OAFP;AAGFC,MAAAA;AAHE,QAIF,KAAKpB,KAJT;AAMA,UAAM;AACFuD,MAAAA;AADE,QAEFpC,QAAQ,CAACC,wBAAD,CAAR,IAAsCJ,OAF1C;;AAIA,QAAIuC,YAAY,KAAK/F,oBAArB,EAA2C;AACvC,aAAO,+BAAP;AACH;;AAED,WAAO,4BAAP;AACH;;AAEDmD,EAAAA,YAAY,GAAG;AACX,UAAM;AAAEK,MAAAA,OAAO,EAAE;AAAEG,QAAAA;AAAF;AAAX,QAA4B,KAAKnB,KAAvC;;AAEA,QAAImB,QAAQ,IAAIA,QAAQ,CAACM,MAAT,IAAmB,CAAnC,EAAsC;AAClC,aAAO,mCAAP;AACH;;AAED,WAAO,0BAAP;AACH;;AAEDhB,EAAAA,aAAa,GAAG;AACZ,UAAM;AAAEO,MAAAA,OAAO,EAAE;AAAEG,QAAAA;AAAF;AAAX,QAA4B,KAAKnB,KAAvC;;AAEA,QAAImB,QAAQ,IAAIA,QAAQ,CAACM,MAAzB,EAAiC;AAC7B,aAAON,QAAQ,CAACM,MAAhB;AACH;;AAED,WAAO,CAAP;AACH;;AAEDwC,EAAAA,kBAAkB,GAAG;AACjB,UAAM;AACFC,MAAAA,kBAAkB,EAAE;AAChBC,QAAAA,mBAAmB,GAAG,EADN;AAEhBC,QAAAA,cAAc,GAAG;AAFD,UAGhB;AAJF,QAKF,KAAKpE,KALT;AAOA,WAAO,CAAC,GAAGmE,mBAAJ,EAAyB,GAAGC,cAA5B,EAA4CC,GAA5C,CAAgD,UAACC,aAAD,EAAmB;AACtE,YAAM;AAAEC,QAAAA;AAAF,UAAmBD,aAAzB;AAEA,aAAOE,QAAQ,CAACD,YAAD,EAAe,EAAf,CAAf;AACH,KAJM,CAAP;AAKH;;AAEDE,EAAAA,uBAAuB,GAAG;AACtB,UAAM;AACFP,MAAAA,kBAAkB,EAAE;AAChBC,QAAAA,mBAAmB,GAAG,EADN;AAEhBC,QAAAA,cAAc,GAAG;AAFD,UAGhB;AAJF,QAKF,KAAKpE,KALT;AAOA,WAAO,CAAC,GAAGmE,mBAAJ,EAAyB,GAAGC,cAA5B,EAA4CC,GAA5C,CAAgD,UAACC,aAAD,EAAmB;AACtE,YAAM;AAAEI,QAAAA;AAAF,UAAgBJ,aAAtB;AAEA,aAAOE,QAAQ,CAACE,SAAD,EAAY,EAAZ,CAAf;AACH,KAJM,CAAP;AAKH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,UAAM;AACF3D,MAAAA,OAAO,EAAE;AACL4D,QAAAA,OAAO,GAAG,EADL;AAELC,QAAAA,WAAW,EAAE;AACTC,UAAAA,aAAa,EAAE;AACXC,YAAAA,aAAa,EAAE;AACXvC,cAAAA,KAAK,EAAEwC,YAAY,GAAG;AADX,gBAEX,EAHO;AAIXC,YAAAA,sBAAsB,EAAE;AACpBC,cAAAA,QADoB;AAEpB1C,cAAAA,KAAK,EAAE2C,mBAAmB,GAAG;AAFT,gBAGpB,EAPO;AAQXC,YAAAA,4BAA4B,EAAE;AAC1B5C,cAAAA,KAAK,EAAE6C,wBAAwB,GAAG;AADR,gBAE1B,EAVO;AAWXC,YAAAA,QAAQ,EAAE;AACNC,cAAAA,WAAW,GAAG;AADR,gBAEN;AAbO,cAcX;AAfK,YAgBT;AAlBC,UAmBL;AApBF,QAqBF,KAAKvF,KArBT;;AAuBA,UAAMwF,WAAW,GAAG,KAAKC,eAAL,CAAqBT,YAArB,EAAmCG,mBAAnC,EAAwD,KAAxD,CAApB;;AAEA,UAAM;AACFL,MAAAA,aAAa,EAAE;AACXY,QAAAA,WAAW,EAAE;AACTlD,UAAAA,KAAK,EAAEmD,gBAAgB,GAAG;AADjB,YAET,EAHO;AAIXC,QAAAA,oBAAoB,EAAE;AAClBpD,UAAAA,KAAK,EAAEqD,uBAAuB,GAAG;AADf,YAElB,EANO;AAOXd,QAAAA,aAAa,EAAE;AACXvC,UAAAA,KAAK,EAAEsD,kBAAkB,GAAG;AADjB,YAEX,EATO;AAUXb,QAAAA,sBAAsB,EAAE;AACpBzC,UAAAA,KAAK,EAAEuD,yBAAyB,GAAG;AADf,YAEpB;AAZO,UAaX;AAdF,QAeFP,WAfJ;AAiBA,UAAMQ,eAAe,GAAG,KAAK/B,kBAAL,EAAxB;AACA,UAAMgC,oBAAoB,GAAG,KAAKxB,uBAAL,EAA7B;AAEA,UAAMyB,MAAM,GAAGtB,OAAO,CAACuB,MAAR,CAAe,UAACC,GAAD,EAAM;AAAEC,MAAAA,IAAI,GAAG,EAAT;AAAa3B,MAAAA,SAAb;AAAwBnC,MAAAA;AAAxB,KAAN,EAAyC;AACnE;AACZ;AACA;AACA;AACY,UAAI,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B+D,QAA1B,CAAmC/D,IAAnC,CAAJ,EAA8C;AAC1C,YAAI0D,oBAAoB,CAACK,QAArB,CAA8B5B,SAA9B,CAAJ,EAA8C;AAC1C;AACpB;AACA;AACA;AACoB,gBAAM,CAAC;AAAE6B,YAAAA;AAAF,WAAD,IAAmBF,IAAzB;;AAEA,cAAIE,UAAU,KAAK,SAAnB,EAA8B;AAC1B,kBAAMC,KAAK,GAAIH,IAAI,CAAC,CAAD,CAAJ,CAAQG,KAAR,GAAgBb,gBAAjB,GAAqC3H,mBAAnD;AACAoI,YAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH,WAHD,MAGO;AACHJ,YAAAA,GAAG,CAACK,IAAJ,CAASJ,IAAI,CAAC,CAAD,CAAJ,CAAQG,KAAjB;AACH;AACJ;;AAED,eAAOJ,GAAP;AACH;;AAEDC,MAAAA,IAAI,CAACK,OAAL,CAAa,UAAC;AAAEC,QAAAA,cAAF;AAAkBH,QAAAA,KAAlB;AAAyBD,QAAAA;AAAzB,OAAD,EAA2C;AACpD,YAAIP,eAAe,CAACM,QAAhB,CAAyBK,cAAzB,CAAJ,EAA8C;AAC1C,cAAIJ,UAAU,KAAK,SAAnB,EAA8B;AAC1B,kBAAMK,UAAU,GAAIJ,KAAK,GAAGb,gBAAT,GAA6B3H,mBAAhD;AACAoI,YAAAA,GAAG,CAACK,IAAJ,CAASG,UAAT;AACH,WAHD,MAGO;AACHR,YAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ;AACJ,OATD;AAWA,aAAOJ,GAAP;AACH,KApCc,EAoCZ,EApCY,CAAf;AAsCA,UAAMS,oBAAoB,GAAGX,MAAM,CAACC,MAAP,CAAc,UAACW,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA,KAAd,EAA+B,CAA/B,CAA7B;AACA,WAAO;AACHjC,MAAAA,aAAa,EAAE;AACXY,QAAAA,WAAW,EAAE;AACTR,UAAAA,QADS;AAET1C,UAAAA,KAAK,EAAEqE,oBAAoB,GAAGlB;AAFrB,SADF;AAKXL,QAAAA,QAAQ,EAAE;AAAEC,UAAAA;AAAF,SALC;AAMXH,QAAAA,4BAA4B,EAAE;AAAE5C,UAAAA,KAAK,EAAE6C;AAAT,SANnB;AAOXN,QAAAA,aAAa,EAAE;AAAEvC,UAAAA,KAAK,EAAEqE,oBAAoB,GAAGhB;AAAhC,SAPJ;AAQXD,QAAAA,oBAAoB,EAAE;AAAEpD,UAAAA,KAAK,EAAEqE,oBAAoB,GAAGf;AAAhC,SARX;AASXb,QAAAA,sBAAsB,EAAE;AAAEzC,UAAAA,KAAK,EAAEqE,oBAAoB,GAAGd;AAAhC;AATb;AADZ,KAAP;AAaH;;AAED1F,EAAAA,eAAe,GAAG;AACd,UAAM;AACFW,MAAAA,OADE;AAEFA,MAAAA,OAAO,EAAE;AAAEG,QAAAA,QAAQ,GAAG,EAAb;AAAiB6F,QAAAA,OAAjB;AAA0BC,QAAAA;AAA1B,OAFP;AAGF7F,MAAAA,wBAHE;AAIF8F,MAAAA;AAJE,QAKF,KAAKlH,KALT;AAOA,UAAM;AAAE4E,MAAAA,OAAO,GAAG;AAAZ,QAAmB5D,OAAzB;AAEA,UAAM;AACF6D,MAAAA;AADE,QAEF1D,QAAQ,CAACC,wBAAD,CAAR,IAAsCJ,OAF1C;;AAIA,QAAIgG,OAAO,KAAKtJ,MAAhB,EAAwB;AACpB,YAAM;AACFyJ,QAAAA,mBADE;AAEFC,QAAAA,0BAFE;AAGFC,QAAAA,0BAHE;AAIFrG,QAAAA,OAAO,EAAE;AAAEsG,UAAAA;AAAF;AAJP,UAKF,KAAKtH,KALT;AAOA,aAAO,KAAKuH,qBAAL,CACHJ,mBADG,EAEHC,0BAFG,EAGHC,0BAHG,EAIHC,aAJG,CAAP;AAMH;;AAED,QAAIN,OAAO,KAAKpJ,YAAZ,IAA4BqJ,0BAAhC,EAA4D;AACxD,aAAO,KAAKxB,eAAL,CAAqByB,iBAArB,EAAwCA,iBAAxC,EAA2D,IAA3D,CAAP;AACH;;AAED,QAAI3F,MAAM,CAACC,IAAP,CAAYoD,OAAZ,EAAqBnD,MAArB,KAAgC,CAApC,EAAuC;AACnC,aAAO,KAAKkD,oBAAL,EAAP;AACH;;AAED,WAAOE,WAAP;AACH;;AAEDY,EAAAA,eAAe,CAACe,KAAD,EAAQgB,UAAR,EAAoBC,OAAO,GAAG,KAA9B,EAAqC;AAChD,UAAM;AACFzG,MAAAA,OAAO,EAAE;AACL6D,QAAAA,WAAW,EAAE;AACTC,UAAAA,aAAa,EAAE;AACXC,YAAAA,aAAa,EAAE;AAAEG,cAAAA,QAAQ,GAAG,EAAb;AAAiB1C,cAAAA,KAAK,GAAG;AAAzB,gBAA+B,EADnC;AAEXyC,YAAAA,sBAAsB,EAAE;AAAEzC,cAAAA,KAAK,EAAEkF,cAAc,GAAG;AAA1B,gBAAgC,EAF7C;AAGXpC,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,WAAW,GAAG;AAAhB,gBAAsB;AAHrB,cAIX;AALK,YAMT;AAPC,UAQL;AATF,QAUF,KAAKvF,KAVT;AAYA,UAAMsF,QAAQ,GAAI,IAAIC,WAAW,GAAGvH,mBAApC;AAEA,UAAM2J,SAAS,GAAGF,OAAO,GAAGjF,KAAH,GAAW,CAApC;AACA,UAAMoF,gBAAgB,GAAGH,OAAO,GAAGC,cAAH,GAAoB,CAApD;AAEA,UAAMd,UAAU,GAAG,CAACe,SAAS,GAAGnB,KAAb,IAAsBlB,QAAzC;AACA,UAAMuC,iBAAiB,GAAG,CAACD,gBAAgB,GAAGJ,UAApB,IAAkClC,QAA5D;AAEA,UAAMwC,UAAU,GAAG;AAAEtF,MAAAA,KAAK,EAAEoE,UAAT;AAAqB1B,MAAAA;AAArB,KAAnB;AACA,UAAM6C,iBAAiB,GAAG;AAAEvF,MAAAA,KAAK,EAAEqF,iBAAT;AAA4B3C,MAAAA;AAA5B,KAA1B;AAEA,WAAO;AACHJ,MAAAA,aAAa,EAAE;AACXY,QAAAA,WAAW,EAAEoC,UADF;AAEX/C,QAAAA,aAAa,EAAE+C,UAFJ;AAGXlC,QAAAA,oBAAoB,EAAEmC,iBAHX;AAIX9C,QAAAA,sBAAsB,EAAE8C;AAJb;AADZ,KAAP;AAQH;;AAEDR,EAAAA,qBAAqB,CAACf,KAAD,EAAQgB,UAAR,EAAoBQ,OAApB,EAA6BC,cAA7B,EAA6C;AAC9D,UAAM;AACFjH,MAAAA,OAAO,EAAE;AACL6D,QAAAA,WAAW,EAAE;AACTC,UAAAA,aAAa,EAAE;AACXoD,YAAAA,aAAa,EAAE;AAAEhD,cAAAA,QAAF;AAAY1C,cAAAA,KAAK,EAAE2F;AAAnB,aADJ;AAEXC,YAAAA,mBAAmB,EAAE;AAAE5F,cAAAA,KAAK,EAAE6F;AAAT,aAFV;AAGXjD,YAAAA,4BAA4B,EAAE;AAAE5C,cAAAA,KAAK,EAAE6C;AAAT,aAHnB;AAIXC,YAAAA,QAAQ,EAAEgD,YAJC;AAKXhD,YAAAA,QAAQ,EAAE;AAAEC,cAAAA;AAAF;AALC;AADN;AADR;AADP,QAYF,KAAKvF,KAZT,CAD8D,CAe9D;;AACA,UAAMyH,OAAO,GAAG,CAACQ,cAAjB,CAhB8D,CAkB9D;;AACA,UAAMM,mBAAmB,GAAGd,OAAO,GAAGU,YAAH,GAAkBH,OAArD;AACA,UAAMQ,kBAAkB,GAAGf,OAAO,GAAGY,iBAAH,GAAuB7B,KAAzD;AACA,UAAMiC,aAAa,GAAG,CAAClD,WAAD,IAAgB4C,YAAY,KAAKE,iBAAjC,GAChB;AACE9C,MAAAA,WAAW,EAAGvH,mBAAmB,IAAIuK,mBAAmB,GAAGC,kBAA1B,CAApB,GAAqED,mBADpF;AAEEG,MAAAA,UAAU,EAAEH,mBAAmB,GAAGC;AAFpC,KADgB,GAKhBF,YALN,CArB8D,CA4B9D;;AACA,UAAMK,gBAAgB,GAAGlB,OAAO,GAAGU,YAAH,GAAkB,CAAlD;AACA,UAAMS,cAAc,GAAGnB,OAAO,GAAGY,iBAAH,GAAuB,CAArD;AACA,UAAMT,gBAAgB,GAAGH,OAAO,GAAGpC,wBAAH,GAA8B,CAA9D;AAEA,UAAMwD,YAAY,GAAGF,gBAAgB,GAAGX,OAAxC;AACA,UAAMpB,UAAU,GAAGgC,cAAc,GAAGpC,KAApC;AACA,UAAMqB,iBAAiB,GAAGD,gBAAgB,GAAGJ,UAA7C;AAEA,UAAMsB,iBAAiB,GAAG;AAAEtG,MAAAA,KAAK,EAAEqG,YAAT;AAAuB3D,MAAAA;AAAvB,KAA1B;AACA,UAAM4C,UAAU,GAAG;AAAEtF,MAAAA,KAAK,EAAEoE,UAAT;AAAqB1B,MAAAA;AAArB,KAAnB;AACA,UAAM6C,iBAAiB,GAAG;AAAEvF,MAAAA,KAAK,EAAEqF,iBAAT;AAA4B3C,MAAAA;AAA5B,KAA1B;AAEA,WAAO;AACHJ,MAAAA,aAAa,EAAE;AACXY,QAAAA,WAAW,EAAEoC,UADF;AAEX/C,QAAAA,aAAa,EAAE+D,iBAFJ;AAGXlD,QAAAA,oBAAoB,EAAEmC,iBAHX;AAIX9C,QAAAA,sBAAsB,EAAE6D,iBAJb;AAKXxD,QAAAA,QAAQ,EAAEmD;AALC;AADZ,KAAP;AASH;;AAEDtI,EAAAA,0BAA0B,GAAG;AACzB,UAAM;AAAEhC,MAAAA;AAAF,QAA6B,KAAKD,KAAxC;AACA,WAAOC,sBAAP;AACH;;AAEDiB,EAAAA,0BAA0B,CAAC2J,EAAD,EAAKvG,KAAL,EAAY;AAClC,SAAKC,QAAL,CAAc,UAAC;AAAEtE,MAAAA;AAAF,KAAD;AAAA,aAAiC;AAC3CA,QAAAA,sBAAsB,EAAE,EACpB,GAAGA,sBADiB;AAEpB,WAAC4K,EAAD,GAAMvG;AAFc;AADmB,OAAjC;AAAA,KAAd;AAMH;;AAEDlD,EAAAA,4BAA4B,GAAG;AAC3B,SAAKmD,QAAL,CAAc;AAAEtE,MAAAA,sBAAsB,EAAE;AAA1B,KAAd;AACH;;AAEDW,EAAAA,gBAAgB,CAACkK,UAAD,EAAaC,OAAb,EAAsBC,WAAW,GAAGD,OAApC,EAA6C;AACzD,UAAM;AAAEE,MAAAA;AAAF,QAAuB,KAAKnJ,KAAlC;;AAEA,QAAI,CAACmJ,gBAAL,EAAuB;AACnB,aAAOD,WAAP;AACH;;AACD,QAAIC,gBAAgB,IAAI,CAACH,UAAzB,EAAqC;AACjC,aAAO,IAAP;AACH;;AAED,WAAOC,OAAP;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,yCACK,cADL,oBAEW,KAAKpJ,KAFhB,EAGW,KAAK9B,KAHhB,EAIW,KAAK2B,cAAL,EAJX,EAKW,KAAKhB,kBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQH;;AAzhBsD;AA4hB3D;AACA;;AA7hBaF,wB,CACF0K,S,GAAY;AACfrI,EAAAA,OAAO,EAAEvD,WAAW,CAAC6L,UADN;AAEfC,EAAAA,gBAAgB,EAAElM,SAAS,CAACmM,MAAV,CAAiBF,UAFpB;AAGflI,EAAAA,wBAAwB,EAAE/D,SAAS,CAACoM,MAAV,CAAiBH,UAH5B;AAIfH,EAAAA,gBAAgB,EAAE9L,SAAS,CAACqM,IAAV,CAAeJ,UAJlB;AAKfpF,EAAAA,kBAAkB,EAAE7G,SAAS,CAACsM,QAAV,CAAmBtM,SAAS,CAACuM,KAA7B,EAAoCN,UALzC;AAMfzG,EAAAA,UAAU,EAAExF,SAAS,CAACsM,QAAV,CAAmBtM,SAAS,CAACwM,MAA7B,EAAqCP,UANlC;AAOfjC,EAAAA,0BAA0B,EAAEhK,SAAS,CAACoM,MAAV,CAAiBH,UAP9B;AAQfnC,EAAAA,mBAAmB,EAAE9J,SAAS,CAACoM,MAAV,CAAiBH,UARvB;AASflC,EAAAA,0BAA0B,EAAE/J,SAAS,CAACoM,MAAV,CAAiBH,UAT9B;AAUfpC,EAAAA,iBAAiB,EAAE7J,SAAS,CAACoM,MAAV,CAAiBH,UAVrB;AAWf1F,EAAAA,OAAO,EAAEvG,SAAS,CAACyM,IAAV,CAAeR,UAXT;AAYf7K,EAAAA,iBAAiB,EAAEpB,SAAS,CAACqM,IAAV,CAAeJ;AAZnB,C;AArCvB/H,MAAM,CAACwI,cAAP,CAAsBC,wBAAtB,EAAgD,MAAhD,EAAwD;AAAExH,EAAAA,KAAK,EAAE;AAAT,CAAxD;;;AAkkBA,OAAO,MAAMyH,kBAAkB,cAAG,UAACC,QAAD;AAAA,SAAe,EAAf;AAAA,CAAH,0DAAxB;AAEP,eAAe3M,OAAO,CAACU,eAAD,EAAkBgM,kBAAlB,CAAP,CAA6CtL,uBAA7C,CAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { PRODUCT_OUT_OF_STOCK } from 'Component/CartItem/CartItem.config';\nimport { ProductType } from 'Type/ProductList';\nimport {\n    BUNDLE,\n    CONFIGURABLE,\n    DOWNLOADABLE,\n    GROUPED\n} from 'Util/Product';\n\nimport ProductActions from './ProductActions.component';\nimport { DEFAULT_MAX_PRODUCTS, ONE_HUNDRED_PERCENT } from './ProductActions.config';\n\n/** @namespace Component/ProductActions/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    groupedProductQuantity: state.ProductReducer.groupedProductQuantity,\n    device: state.ConfigReducer.device,\n    displayProductStockStatus: state.ConfigReducer.display_product_stock_status,\n    isWishlistEnabled: state.ConfigReducer.wishlist_general_active\n});\n\n/** @namespace Component/ProductActions/Container */\nexport class ProductActionsContainer extends PureComponent {\n    static propTypes = {\n        product: ProductType.isRequired,\n        productOrVariant: PropTypes.object.isRequired,\n        configurableVariantIndex: PropTypes.number.isRequired,\n        areDetailsLoaded: PropTypes.bool.isRequired,\n        productOptionsData: PropTypes.objectOf(PropTypes.array).isRequired,\n        parameters: PropTypes.objectOf(PropTypes.string).isRequired,\n        selectedInitialBundlePrice: PropTypes.number.isRequired,\n        selectedBundlePrice: PropTypes.number.isRequired,\n        selectedBundlePriceExclTax: PropTypes.number.isRequired,\n        selectedLinkPrice: PropTypes.number.isRequired,\n        getLink: PropTypes.func.isRequired,\n        isWishlistEnabled: PropTypes.bool.isRequired\n    };\n\n    static getMinQuantity(props) {\n        const {\n            product: { stock_item: { min_sale_qty } = {}, variants } = {},\n            configurableVariantIndex\n        } = props;\n\n        if (!min_sale_qty) {\n            return 1;\n        }\n        if (!configurableVariantIndex && !variants) {\n            return min_sale_qty;\n        }\n\n        const { stock_item: { min_sale_qty: minVariantQty } = {} } = variants[configurableVariantIndex] || {};\n\n        return minVariantQty || min_sale_qty;\n    }\n\n    static getMaxQuantity(props) {\n        const {\n            product: {\n                stock_item: {\n                    max_sale_qty\n                } = {},\n                variants\n            } = {},\n            configurableVariantIndex\n        } = props;\n\n        if (!max_sale_qty) {\n            return DEFAULT_MAX_PRODUCTS;\n        }\n\n        if (configurableVariantIndex === -1 || !Object.keys(variants).length) {\n            return max_sale_qty;\n        }\n\n        const {\n            stock_item: {\n                max_sale_qty: maxVariantQty\n            } = {}\n        } = variants[configurableVariantIndex] || {};\n\n        return maxVariantQty || max_sale_qty;\n    }\n\n    state = {\n        quantity: 1,\n        groupedProductQuantity: {}\n    };\n\n    containerFunctions = {\n        showOnlyIfLoaded: this.showOnlyIfLoaded.bind(this),\n        onProductValidationError: this.onProductValidationError.bind(this),\n        getIsOptionInCurrentVariant: this.getIsOptionInCurrentVariant.bind(this),\n        setQuantity: this.setQuantity.bind(this),\n        setGroupedProductQuantity: this._setGroupedProductQuantity.bind(this),\n        clearGroupedProductQuantity: this._clearGroupedProductQuantity.bind(this),\n        getIsConfigurableAttributeAvailable: this.getIsConfigurableAttributeAvailable.bind(this)\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const { quantity } = state;\n        const minQty = ProductActionsContainer.getMinQuantity(props);\n        const maxQty = ProductActionsContainer.getMaxQuantity(props);\n\n        if (quantity < minQty) {\n            return { quantity: minQty };\n        }\n        if (quantity > maxQty) {\n            return { quantity: maxQty };\n        }\n\n        return null;\n    }\n\n    onConfigurableProductError = this.onProductError.bind(this, this.configurableOptionsRef);\n\n    onGroupedProductError = this.onProductError.bind(this, this.groupedProductsRef);\n\n    onProductError(ref) {\n        if (!ref) {\n            return;\n        }\n        const { current } = ref;\n\n        current.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n        });\n\n        current.classList.remove('animate');\n        // eslint-disable-next-line no-unused-expressions\n        current.offsetWidth; // trigger a DOM reflow\n        current.classList.add('animate');\n    }\n\n    onProductValidationError(type) {\n        switch (type) {\n        case CONFIGURABLE:\n            this.onConfigurableProductError();\n            break;\n        case GROUPED:\n            this.onGroupedProductError();\n            break;\n        default:\n            break;\n        }\n    }\n\n    setQuantity(value) {\n        this.setState({ quantity: +value });\n    }\n\n    // TODO: make key=>value based\n    getIsOptionInCurrentVariant(attribute, value) {\n        const { configurableVariantIndex, product: { variants } } = this.props;\n        if (!variants) {\n            return false;\n        }\n\n        return variants[configurableVariantIndex].product[attribute] === value;\n    }\n\n    getIsConfigurableAttributeAvailable({ attribute_code, attribute_value }) {\n        const { parameters, product: { variants } } = this.props;\n\n        const isAttributeSelected = Object.hasOwnProperty.call(parameters, attribute_code);\n\n        // If value matches current attribute_value, option should be enabled\n        if (isAttributeSelected && parameters[attribute_code] === attribute_value) {\n            return true;\n        }\n\n        const parameterPairs = Object.entries(parameters);\n\n        const selectedAttributes = isAttributeSelected\n            // Need to exclude itself, otherwise different attribute_values of the same attribute_code will always be disabled\n            ? parameterPairs.filter(([key]) => key !== attribute_code)\n            : parameterPairs;\n\n        return variants\n            .some(({ stock_status, attributes }) => {\n                const { attribute_value: foundValue } = attributes[attribute_code] || {};\n\n                return (\n                    stock_status === 'IN_STOCK'\n                    // Variant must have currently checked attribute_code and attribute_value\n                    && foundValue === attribute_value\n                    // Variant must have all currently selected attributes\n                    && selectedAttributes.every(([key, value]) => attributes[key].attribute_value === value)\n                );\n            });\n    }\n\n    containerProps = () => ({\n        minQuantity: ProductActionsContainer.getMinQuantity(this.props),\n        maxQuantity: ProductActionsContainer.getMaxQuantity(this.props),\n        groupedProductQuantity: this._getGroupedProductQuantity(),\n        productPrice: this.getProductPrice(),\n        productName: this.getProductName(),\n        offerCount: this.getOfferCount(),\n        offerType: this.getOfferType(),\n        stockMeta: this.getStockMeta(),\n        metaLink: this.getMetaLink()\n    });\n\n    getProductName() {\n        const {\n            product,\n            product: { variants = [] },\n            configurableVariantIndex\n        } = this.props;\n\n        const {\n            name\n        } = variants[configurableVariantIndex] || product;\n\n        return name;\n    }\n\n    getMetaLink() {\n        const { getLink } = this.props;\n        return window.location.origin + getLink().replace(/\\?.*/, '');\n    }\n\n    getStockMeta() {\n        const {\n            product,\n            product: { variants = [] },\n            configurableVariantIndex\n        } = this.props;\n\n        const {\n            stock_status\n        } = variants[configurableVariantIndex] || product;\n\n        if (stock_status === PRODUCT_OUT_OF_STOCK) {\n            return 'https://schema.org/OutOfStock';\n        }\n\n        return 'https://schema.org/InStock';\n    }\n\n    getOfferType() {\n        const { product: { variants } } = this.props;\n\n        if (variants && variants.length >= 1) {\n            return 'https://schema.org/AggregateOffer';\n        }\n\n        return 'https://schema.org/Offer';\n    }\n\n    getOfferCount() {\n        const { product: { variants } } = this.props;\n\n        if (variants && variants.length) {\n            return variants.length;\n        }\n\n        return 0;\n    }\n\n    getSelectedOptions() {\n        const {\n            productOptionsData: {\n                productOptionsMulti = [],\n                productOptions = []\n            } = {}\n        } = this.props;\n\n        return [...productOptionsMulti, ...productOptions].map((productOption) => {\n            const { option_value } = productOption;\n\n            return parseInt(option_value, 10);\n        });\n    }\n\n    getSelectedOptionsMulti() {\n        const {\n            productOptionsData: {\n                productOptionsMulti = [],\n                productOptions = []\n            } = {}\n        } = this.props;\n\n        return [...productOptionsMulti, ...productOptions].map((productOption) => {\n            const { option_id } = productOption;\n\n            return parseInt(option_id, 10);\n        });\n    }\n\n    getCustomizablePrice() {\n        const {\n            product: {\n                options = [],\n                price_range: {\n                    minimum_price: {\n                        regular_price: {\n                            value: regularPrice = 0\n                        } = {},\n                        regular_price_excl_tax: {\n                            currency,\n                            value: regularPriceExclTax = 0\n                        } = {},\n                        default_final_price_excl_tax: {\n                            value: defaultFinalPriceExclTax = 0\n                        } = {},\n                        discount: {\n                            percent_off = 0\n                        } = {}\n                    } = {}\n                } = {}\n            } = {}\n        } = this.props;\n\n        const customPrice = this._getCustomPrice(regularPrice, regularPriceExclTax, false);\n\n        const {\n            minimum_price: {\n                final_price: {\n                    value: finalCustomPrice = 0\n                } = {},\n                final_price_excl_tax: {\n                    value: finalCustomPriceExclTax = 0\n                } = {},\n                regular_price: {\n                    value: regularCustomPrice = 0\n                } = {},\n                regular_price_excl_tax: {\n                    value: regularCustomPriceExclTax = 0\n                } = {}\n            } = {}\n        } = customPrice;\n\n        const selectedOptions = this.getSelectedOptions();\n        const selectedOptionsMulti = this.getSelectedOptionsMulti();\n\n        const prices = options.reduce((acc, { data = [], option_id, type }) => {\n            /*\n            * Such types contain a single item within data\n            * as those are looked up on the option_id\n            */\n            if (['area', 'field', 'file'].includes(type)) {\n                if (selectedOptionsMulti.includes(option_id)) {\n                    /*\n                    * Since such types only have a single value\n                    * we can get the price_type directly\n                    */\n                    const [{ price_type }] = data;\n\n                    if (price_type === 'PERCENT') {\n                        const price = (data[0].price * finalCustomPrice) / ONE_HUNDRED_PERCENT;\n                        acc.push(price);\n                    } else {\n                        acc.push(data[0].price);\n                    }\n                }\n\n                return acc;\n            }\n\n            data.forEach(({ option_type_id, price, price_type }) => {\n                if (selectedOptions.includes(option_type_id)) {\n                    if (price_type === 'PERCENT') {\n                        const finalPrice = (price * finalCustomPrice) / ONE_HUNDRED_PERCENT;\n                        acc.push(finalPrice);\n                    } else {\n                        acc.push(price);\n                    }\n                }\n            });\n\n            return acc;\n        }, []);\n\n        const selectedOptionsTotal = prices.reduce((a, b) => a + b, 0);\n        return {\n            minimum_price: {\n                final_price: {\n                    currency,\n                    value: selectedOptionsTotal + finalCustomPrice\n                },\n                discount: { percent_off },\n                default_final_price_excl_tax: { value: defaultFinalPriceExclTax },\n                regular_price: { value: selectedOptionsTotal + finalCustomPriceExclTax },\n                final_price_excl_tax: { value: selectedOptionsTotal + regularCustomPrice },\n                regular_price_excl_tax: { value: selectedOptionsTotal + regularCustomPriceExclTax }\n            }\n        };\n    }\n\n    getProductPrice() {\n        const {\n            product,\n            product: { variants = [], type_id, links_purchased_separately },\n            configurableVariantIndex,\n            selectedLinkPrice\n        } = this.props;\n\n        const { options = {} } = product;\n\n        const {\n            price_range\n        } = variants[configurableVariantIndex] || product;\n\n        if (type_id === BUNDLE) {\n            const {\n                selectedBundlePrice,\n                selectedBundlePriceExclTax,\n                selectedInitialBundlePrice,\n                product: { dynamic_price }\n            } = this.props;\n\n            return this._getBundleCustomPrice(\n                selectedBundlePrice,\n                selectedBundlePriceExclTax,\n                selectedInitialBundlePrice,\n                dynamic_price\n            );\n        }\n\n        if (type_id === DOWNLOADABLE && links_purchased_separately) {\n            return this._getCustomPrice(selectedLinkPrice, selectedLinkPrice, true);\n        }\n\n        if (Object.keys(options).length !== 0) {\n            return this.getCustomizablePrice();\n        }\n\n        return price_range;\n    }\n\n    _getCustomPrice(price, withoutTax, addBase = false) {\n        const {\n            product: {\n                price_range: {\n                    minimum_price: {\n                        regular_price: { currency = '', value = 0 } = {},\n                        regular_price_excl_tax: { value: value_excl_tax = 0 } = {},\n                        discount: { percent_off = 0 } = {}\n                    } = {}\n                } = {}\n            } = {}\n        } = this.props;\n\n        const discount = (1 - percent_off / ONE_HUNDRED_PERCENT);\n\n        const basePrice = addBase ? value : 0;\n        const basePriceExclTax = addBase ? value_excl_tax : 0;\n\n        const finalPrice = (basePrice + price) * discount;\n        const finalPriceExclTax = (basePriceExclTax + withoutTax) * discount;\n\n        const priceValue = { value: finalPrice, currency };\n        const priceValueExclTax = { value: finalPriceExclTax, currency };\n\n        return {\n            minimum_price: {\n                final_price: priceValue,\n                regular_price: priceValue,\n                final_price_excl_tax: priceValueExclTax,\n                regular_price_excl_tax: priceValueExclTax\n            }\n        };\n    }\n\n    _getBundleCustomPrice(price, withoutTax, initial, isDynamicPrice) {\n        const {\n            product: {\n                price_range: {\n                    minimum_price: {\n                        default_price: { currency, value: defaultPrice },\n                        default_final_price: { value: defaultFinalPrice },\n                        default_final_price_excl_tax: { value: defaultFinalPriceExclTax },\n                        discount: discountData,\n                        discount: { percent_off }\n                    }\n                }\n            }\n        } = this.props;\n\n        // If bundle product has dynamic price, it's own base price is always 0. For fix priced bundles price it's configurable\n        const addBase = !isDynamicPrice;\n\n        // Adjusting `discount` for bundle products for discount to be displayed on PDP\n        const priceBeforeDiscount = addBase ? defaultPrice : initial;\n        const priceAfterDiscount = addBase ? defaultFinalPrice : price;\n        const finalDiscount = !percent_off && defaultPrice !== defaultFinalPrice\n            ? {\n                percent_off: (ONE_HUNDRED_PERCENT * (priceBeforeDiscount - priceAfterDiscount)) / priceBeforeDiscount,\n                amount_off: priceBeforeDiscount - priceAfterDiscount\n            }\n            : discountData;\n\n        // Set initial price different from 0 for specific product types, i.e. downloadable, bundles with fixed price\n        const baseInitialPrice = addBase ? defaultPrice : 0;\n        const baseFinalPrice = addBase ? defaultFinalPrice : 0;\n        const basePriceExclTax = addBase ? defaultFinalPriceExclTax : 0;\n\n        const initialPrice = baseInitialPrice + initial;\n        const finalPrice = baseFinalPrice + price;\n        const finalPriceExclTax = basePriceExclTax + withoutTax;\n\n        const initialPriceValue = { value: initialPrice, currency };\n        const priceValue = { value: finalPrice, currency };\n        const priceValueExclTax = { value: finalPriceExclTax, currency };\n\n        return {\n            minimum_price: {\n                final_price: priceValue,\n                regular_price: initialPriceValue,\n                final_price_excl_tax: priceValueExclTax,\n                regular_price_excl_tax: initialPriceValue,\n                discount: finalDiscount\n            }\n        };\n    }\n\n    _getGroupedProductQuantity() {\n        const { groupedProductQuantity } = this.state;\n        return groupedProductQuantity;\n    }\n\n    _setGroupedProductQuantity(id, value) {\n        this.setState(({ groupedProductQuantity }) => ({\n            groupedProductQuantity: {\n                ...groupedProductQuantity,\n                [id]: value\n            }\n        }));\n    }\n\n    _clearGroupedProductQuantity() {\n        this.setState({ groupedProductQuantity: {} });\n    }\n\n    showOnlyIfLoaded(expression, content, placeholder = content) {\n        const { areDetailsLoaded } = this.props;\n\n        if (!areDetailsLoaded) {\n            return placeholder;\n        }\n        if (areDetailsLoaded && !expression) {\n            return null;\n        }\n\n        return content;\n    }\n\n    render() {\n        return (\n            <ProductActions\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerProps() }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\n/** @namespace Component/ProductActions/Container/mapDispatchToProps */\n// eslint-disable-next-line no-unused-vars\nexport const mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActionsContainer);\n"]},"metadata":{},"sourceType":"module"}