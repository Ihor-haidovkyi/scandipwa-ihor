{"ast":null,"code":"var _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/route/PasswordChangePage/PasswordChangePage.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { toggleBreadcrumbs } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action\";\nimport { updateMeta } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Meta/Meta.action\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport { LocationType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Common\";\nimport { getQueryParam } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Url\";\nimport PasswordChangePage from \"./PasswordChangePage.component\";\nimport { STATUS_PASSWORD_MISS_MATCH, STATUS_PASSWORD_UPDATED } from \"./PasswordChangePage.config\";\nexport const MyAccountDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.dispatcher\");\n/** @namespace Route/PasswordChangePage/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    passwordResetStatus: state.MyAccountReducer.passwordResetStatus,\n    passwordResetMessage: state.MyAccountReducer.passwordResetMessage\n  };\n}, \"Route/PasswordChangePage/Container/mapStateToProps\");\n/** @namespace Route/PasswordChangePage/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    updateMeta: function (meta) {\n      return dispatch(updateMeta(meta));\n    },\n    toggleBreadcrumbs: function (visibility) {\n      return dispatch(toggleBreadcrumbs(visibility));\n    },\n\n    resetPassword(options) {\n      MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.resetPassword(options, dispatch);\n      });\n    },\n\n    updateCustomerPasswordResetStatus(options) {\n      MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateCustomerPasswordResetStatus(options, dispatch);\n      });\n    },\n\n    showNotification(type, message) {\n      dispatch(showNotification(type, message));\n    }\n\n  };\n}, \"Route/PasswordChangePage/Container/mapDispatchToProps\");\n/** @namespace Route/PasswordChangePage/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _PasswordChangePageContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      passwordResetStatus: '',\n      isLoading: false\n    };\n    this.containerFunctions = {\n      onPasswordAttempt: this.onPasswordAttempt.bind(this),\n      onPasswordSuccess: this.onPasswordSuccess.bind(this),\n      onError: this.onError.bind(this)\n    };\n\n    this.containerProps = function () {\n      const {\n        isLoading\n      } = _this.state;\n      return {\n        isLoading\n      };\n    };\n  }\n\n  static getDerivedStateFromProps(props) {\n    const {\n      passwordResetStatus,\n      passwordResetMessage,\n      showNotification\n    } = props;\n    const stateToBeUpdated = {};\n\n    if (passwordResetStatus) {\n      stateToBeUpdated.isLoading = false;\n      stateToBeUpdated.passwordResetStatus = passwordResetStatus;\n\n      switch (passwordResetStatus) {\n        case STATUS_PASSWORD_UPDATED:\n          showNotification('success', __('Password has been successfully updated!'));\n          break;\n\n        case STATUS_PASSWORD_MISS_MATCH:\n          showNotification('info', __('Your password and confirmation password do not match.'));\n          break;\n\n        default:\n          showNotification('error', passwordResetMessage);\n      }\n    }\n\n    return Object.keys(stateToBeUpdated).length ? stateToBeUpdated : null;\n  }\n\n  componentDidMount() {\n    this.updateMeta();\n    this.toggleBreadcrumbs(false);\n  }\n\n  onPasswordSuccess(fields) {\n    const {\n      resetPassword,\n      location\n    } = this.props;\n    const {\n      password,\n      password_confirmation\n    } = fields;\n    const token = getQueryParam('token', location);\n    resetPassword({\n      token,\n      password,\n      password_confirmation\n    });\n  }\n\n  onPasswordAttempt() {\n    this.setState({\n      isLoading: true\n    });\n  }\n\n  onError() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  updateMeta() {\n    const {\n      updateMeta\n    } = this.props;\n    updateMeta({\n      title: __('Password Change Page')\n    });\n  }\n\n  toggleBreadcrumbs(visibility) {\n    const {\n      toggleBreadcrumbs\n    } = this.props;\n    toggleBreadcrumbs(visibility);\n  }\n\n  render() {\n    const {\n      passwordResetStatus\n    } = this.state;\n\n    if (passwordResetStatus === STATUS_PASSWORD_UPDATED) {\n      return /*#__PURE__*/_checkBEM(React, Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/_checkBEM(React, PasswordChangePage, Object.assign({}, this.containerProps(), this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n_PasswordChangePageContainer.propTypes = {\n  updateMeta: PropTypes.func.isRequired,\n  toggleBreadcrumbs: PropTypes.func.isRequired,\n  showNotification: PropTypes.func.isRequired,\n  passwordResetStatus: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n  passwordResetMessage: PropTypes.string.isRequired,\n  resetPassword: PropTypes.func.isRequired,\n  location: LocationType.isRequired\n};\nObject.defineProperty(_PasswordChangePageContainer, 'name', {\n  value: 'PasswordChangePageContainer'\n});\n\nexport const PasswordChangePageContainer = middleware(_PasswordChangePageContainer, \"Route/PasswordChangePage/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChangePageContainer);","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/route/PasswordChangePage/PasswordChangePage.container.js"],"names":["PropTypes","PureComponent","connect","Redirect","toggleBreadcrumbs","updateMeta","showNotification","LocationType","getQueryParam","PasswordChangePage","STATUS_PASSWORD_MISS_MATCH","STATUS_PASSWORD_UPDATED","MyAccountDispatcher","mapStateToProps","state","passwordResetStatus","MyAccountReducer","passwordResetMessage","mapDispatchToProps","dispatch","meta","visibility","resetPassword","options","then","default","dispatcher","updateCustomerPasswordResetStatus","type","message","PasswordChangePageContainer","isLoading","containerFunctions","onPasswordAttempt","bind","onPasswordSuccess","onError","containerProps","getDerivedStateFromProps","props","stateToBeUpdated","__","Object","keys","length","componentDidMount","fields","location","password","password_confirmation","token","setState","title","render","propTypes","func","isRequired","oneOfType","string","bool","defineProperty","_PasswordChangePageContainer","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport { toggleBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { LocationType } from 'Type/Common';\nimport { getQueryParam } from 'Util/Url';\n\nimport PasswordChangePage from './PasswordChangePage.component';\nimport {\n    STATUS_PASSWORD_MISS_MATCH,\n    STATUS_PASSWORD_UPDATED\n} from './PasswordChangePage.config';\n\nexport const MyAccountDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/MyAccount/MyAccount.dispatcher'\n);\n\n/** @namespace Route/PasswordChangePage/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    passwordResetStatus: state.MyAccountReducer.passwordResetStatus,\n    passwordResetMessage: state.MyAccountReducer.passwordResetMessage\n});\n\n/** @namespace Route/PasswordChangePage/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateMeta: (meta) => dispatch(updateMeta(meta)),\n    toggleBreadcrumbs: (visibility) => dispatch(toggleBreadcrumbs(visibility)),\n    resetPassword(options) {\n        MyAccountDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetPassword(options, dispatch)\n        );\n    },\n    updateCustomerPasswordResetStatus(options) {\n        MyAccountDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateCustomerPasswordResetStatus(options, dispatch)\n        );\n    },\n    showNotification(type, message) {\n        dispatch(showNotification(type, message));\n    }\n});\n\n/** @namespace Route/PasswordChangePage/Container */\nexport class PasswordChangePageContainer extends PureComponent {\n    static propTypes = {\n        updateMeta: PropTypes.func.isRequired,\n        toggleBreadcrumbs: PropTypes.func.isRequired,\n        showNotification: PropTypes.func.isRequired,\n        passwordResetStatus: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.bool\n        ]).isRequired,\n        passwordResetMessage: PropTypes.string.isRequired,\n        resetPassword: PropTypes.func.isRequired,\n        location: LocationType.isRequired\n    };\n\n    state = {\n        passwordResetStatus: '',\n        isLoading: false\n    };\n\n    static getDerivedStateFromProps(props) {\n        const {\n            passwordResetStatus,\n            passwordResetMessage,\n            showNotification\n        } = props;\n        const stateToBeUpdated = {};\n\n        if (passwordResetStatus) {\n            stateToBeUpdated.isLoading = false;\n            stateToBeUpdated.passwordResetStatus = passwordResetStatus;\n\n            switch (passwordResetStatus) {\n            case STATUS_PASSWORD_UPDATED:\n                showNotification('success', __('Password has been successfully updated!'));\n                break;\n            case STATUS_PASSWORD_MISS_MATCH:\n                showNotification('info', __('Your password and confirmation password do not match.'));\n                break;\n            default:\n                showNotification('error', passwordResetMessage);\n            }\n        }\n\n        return Object.keys(stateToBeUpdated).length ? stateToBeUpdated : null;\n    }\n\n    containerFunctions = {\n        onPasswordAttempt: this.onPasswordAttempt.bind(this),\n        onPasswordSuccess: this.onPasswordSuccess.bind(this),\n        onError: this.onError.bind(this)\n    };\n\n    componentDidMount() {\n        this.updateMeta();\n        this.toggleBreadcrumbs(false);\n    }\n\n    containerProps = () => {\n        const { isLoading } = this.state;\n        return { isLoading };\n    };\n\n    onPasswordSuccess(fields) {\n        const { resetPassword, location } = this.props;\n        const { password, password_confirmation } = fields;\n        const token = getQueryParam('token', location);\n\n        resetPassword({ token, password, password_confirmation });\n    }\n\n    onPasswordAttempt() {\n        this.setState({ isLoading: true });\n    }\n\n    onError() {\n        this.setState({ isLoading: false });\n    }\n\n    updateMeta() {\n        const { updateMeta } = this.props;\n        updateMeta({ title: __('Password Change Page') });\n    }\n\n    toggleBreadcrumbs(visibility) {\n        const { toggleBreadcrumbs } = this.props;\n        toggleBreadcrumbs(visibility);\n    }\n\n    render() {\n        const { passwordResetStatus } = this.state;\n\n        if (passwordResetStatus === STATUS_PASSWORD_UPDATED) {\n            return <Redirect to=\"/\" />;\n        }\n\n        return (\n            <PasswordChangePage\n              { ...this.containerProps() }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChangePageContainer);\n"]},"metadata":{},"sourceType":"module"}