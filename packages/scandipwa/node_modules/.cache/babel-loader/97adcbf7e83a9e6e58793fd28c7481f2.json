{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{WorkboxError}from'workbox-core/_private/WorkboxError.js';import\"../_version.js\";// Name of the search parameter used to store revision info.\nvar REVISION_SEARCH_PARAM='__WB_REVISION__';/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */export function createCacheKey(entry){if(!entry){throw new WorkboxError('add-to-cache-list-unexpected-type',{entry:entry});}// If a precache manifest entry is a string, it's assumed to be a versioned\n// URL, like '/app.abcd1234.js'. Return as-is.\nif(typeof entry==='string'){var urlObject=new URL(entry,location.href);return{cacheKey:urlObject.href,url:urlObject.href};}var revision=entry.revision,url=entry.url;if(!url){throw new WorkboxError('add-to-cache-list-unexpected-type',{entry:entry});}// If there's just a URL and no revision, then it's also assumed to be a\n// versioned URL.\nif(!revision){var _urlObject=new URL(url,location.href);return{cacheKey:_urlObject.href,url:_urlObject.href};}// Otherwise, construct a properly versioned URL using the custom Workbox\n// search parameter along with the revision info.\nvar cacheKeyURL=new URL(url,location.href);var originalURL=new URL(url,location.href);cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM,revision);return{cacheKey:cacheKeyURL.href,url:originalURL.href};}","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-precaching/utils/createCacheKey.js"],"names":["WorkboxError","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","URL","location","href","cacheKey","url","revision","cacheKeyURL","originalURL","searchParams","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASA,YAAT,KAA6B,uCAA7B,CACA,uBACA;AACA,GAAMC,CAAAA,qBAAqB,CAAG,iBAA9B,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAA+B,CAClC,GAAI,CAACA,KAAL,CAAY,CACR,KAAM,IAAIH,CAAAA,YAAJ,CAAiB,mCAAjB,CAAsD,CAAEG,KAAK,CAALA,KAAF,CAAtD,CAAN,CACH,CACD;AACA;AACA,GAAI,MAAOA,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CAC3B,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,GAAJ,CAAQF,KAAR,CAAeG,QAAQ,CAACC,IAAxB,CAAlB,CACA,MAAO,CACHC,QAAQ,CAAEJ,SAAS,CAACG,IADjB,CAEHE,GAAG,CAAEL,SAAS,CAACG,IAFZ,CAAP,CAIH,CAZiC,GAa1BG,CAAAA,QAb0B,CAaRP,KAbQ,CAa1BO,QAb0B,CAahBD,GAbgB,CAaRN,KAbQ,CAahBM,GAbgB,CAclC,GAAI,CAACA,GAAL,CAAU,CACN,KAAM,IAAIT,CAAAA,YAAJ,CAAiB,mCAAjB,CAAsD,CAAEG,KAAK,CAALA,KAAF,CAAtD,CAAN,CACH,CACD;AACA;AACA,GAAI,CAACO,QAAL,CAAe,CACX,GAAMN,CAAAA,UAAS,CAAG,GAAIC,CAAAA,GAAJ,CAAQI,GAAR,CAAaH,QAAQ,CAACC,IAAtB,CAAlB,CACA,MAAO,CACHC,QAAQ,CAAEJ,UAAS,CAACG,IADjB,CAEHE,GAAG,CAAEL,UAAS,CAACG,IAFZ,CAAP,CAIH,CACD;AACA;AACA,GAAMI,CAAAA,WAAW,CAAG,GAAIN,CAAAA,GAAJ,CAAQI,GAAR,CAAaH,QAAQ,CAACC,IAAtB,CAApB,CACA,GAAMK,CAAAA,WAAW,CAAG,GAAIP,CAAAA,GAAJ,CAAQI,GAAR,CAAaH,QAAQ,CAACC,IAAtB,CAApB,CACAI,WAAW,CAACE,YAAZ,CAAyBC,GAAzB,CAA6Bb,qBAA7B,CAAoDS,QAApD,EACA,MAAO,CACHF,QAAQ,CAAEG,WAAW,CAACJ,IADnB,CAEHE,GAAG,CAAEG,WAAW,CAACL,IAFd,CAAP,CAIH","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}