{"ast":null,"code":"import _regeneratorRuntime from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import\"../_version.js\";var SUBSTRING_TO_FIND='-precache-';/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */var deleteOutdatedCaches=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(currentPrecacheName){var substringToFind,cacheNames,cacheNamesToDelete,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:substringToFind=_args.length>1&&_args[1]!==undefined?_args[1]:SUBSTRING_TO_FIND;_context.next=3;return self.caches.keys();case 3:cacheNames=_context.sent;cacheNamesToDelete=cacheNames.filter(function(cacheName){return cacheName.includes(substringToFind)&&cacheName.includes(self.registration.scope)&&cacheName!==currentPrecacheName;});_context.next=7;return Promise.all(cacheNamesToDelete.map(function(cacheName){return self.caches.delete(cacheName);}));case 7:return _context.abrupt(\"return\",cacheNamesToDelete);case 8:case\"end\":return _context.stop();}}},_callee);}));return function deleteOutdatedCaches(_x){return _ref.apply(this,arguments);};}();export{deleteOutdatedCaches};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js"],"names":["SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","self","caches","keys","cacheNames","cacheNamesToDelete","filter","cacheName","includes","registration","scope","Promise","all","map","delete"],"mappings":"+RAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,uBACA,GAAMA,CAAAA,iBAAiB,CAAG,YAA1B,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,oBAAoB,0FAAG,iBAAOC,mBAAP,oLAA4BC,eAA5B,+CAA8CH,iBAA9C,uBACAI,CAAAA,IAAI,CAACC,MAAL,CAAYC,IAAZ,EADA,QACnBC,UADmB,eAEnBC,kBAFmB,CAEED,UAAU,CAACE,MAAX,CAAkB,SAACC,SAAD,CAAe,CACxD,MAAOA,CAAAA,SAAS,CAACC,QAAV,CAAmBR,eAAnB,GACHO,SAAS,CAACC,QAAV,CAAmBP,IAAI,CAACQ,YAAL,CAAkBC,KAArC,CADG,EAEHH,SAAS,GAAKR,mBAFlB,CAGH,CAJ0B,CAFF,uBAOnBY,CAAAA,OAAO,CAACC,GAAR,CAAYP,kBAAkB,CAACQ,GAAnB,CAAuB,SAACN,SAAD,QAAeN,CAAAA,IAAI,CAACC,MAAL,CAAYY,MAAZ,CAAmBP,SAAnB,CAAf,EAAvB,CAAZ,CAPmB,wCAQlBF,kBARkB,wDAAH,kBAApBP,CAAAA,oBAAoB,4CAA1B,CAUA,OAASA,oBAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n"]},"metadata":{},"sourceType":"module"}