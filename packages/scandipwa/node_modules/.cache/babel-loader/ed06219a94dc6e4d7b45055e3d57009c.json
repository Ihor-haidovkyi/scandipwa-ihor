{"ast":null,"code":"var _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/component/ProductList/ProductList.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport ProductListInfoDispatcher from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/ProductListInfo/ProductListInfo.dispatcher\";\nimport { HistoryType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Common\";\nimport { DeviceType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Device\";\nimport { FilterInputType, PagesType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/ProductList\";\nimport { LocationType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Router\";\nimport { getQueryParam, setQueryParams } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Url\";\nimport ProductList from \"./ProductList.component\";\n/** @namespace Component/ProductList/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    device: state.ConfigReducer.device\n  };\n}, \"Component/ProductList/Container/mapStateToProps\");\n/** @namespace Component/ProductList/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    requestProductListInfo: function (options) {\n      return ProductListInfoDispatcher.handleData(dispatch, options);\n    }\n  };\n}, \"Component/ProductList/Container/mapDispatchToProps\");\n/** @namespace Component/ProductList/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _ProductListContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.containerFunctions = {\n      loadPrevPage: this.loadPage.bind(this, false),\n      loadPage: this.loadPage.bind(this),\n      updatePage: this.updatePage.bind(this)\n    };\n    this.state = {\n      pagesCount: 1\n    };\n\n    this.requestPage = function (currentPage = 1, isNext = false) {\n      const {\n        sort,\n        search,\n        filter,\n        pageSize,\n        requestProductList,\n        requestProductListInfo,\n        noAttributes,\n        noVariants,\n        isWidget\n      } = _this.props;\n      /**\n       * In case the wrong category was passed down to the product list,\n       * prevent it from being requested.\n       */\n\n      if (filter.categoryIds === -1) {\n        return;\n      }\n      /**\n       * Do not request page if there are no filters\n       */\n\n\n      if (!search && !_this.isEmptyFilter()) {\n        return;\n      } // TODO: product list requests filters alongside the page\n      // TODO: sometimes product list is requested more then once\n      // TODO: the product list should not request itself, when coming from PDP\n\n\n      const options = {\n        isNext,\n        noAttributes,\n        noVariants,\n        args: {\n          sort,\n          filter,\n          search,\n          pageSize,\n          currentPage\n        }\n      };\n      const infoOptions = {\n        args: {\n          filter,\n          search\n        }\n      };\n      requestProductList(options);\n\n      if (!isWidget) {\n        requestProductListInfo(infoOptions);\n      }\n    };\n\n    this.containerProps = function () {\n      return {\n        currentPage: _this._getPageFromUrl(),\n        isShowLoading: _this._isShowLoading(),\n        isVisible: _this._isVisible(),\n        requestPage: _this.requestPage,\n        // disable this property to enable infinite scroll on desktop\n        isInfiniteLoaderEnabled: _this._getIsInfiniteLoaderEnabled()\n      };\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pages,\n      isPreventRequest\n    } = this.props;\n    const {\n      pagesCount\n    } = this.state;\n    const pagesLength = Object.keys(pages).length;\n\n    if (pagesCount !== pagesLength) {\n      this.setState({\n        pagesCount: pagesLength\n      });\n    } // Is true when category is changed. This check prevents making new requests when navigating back to PLP from PDP\n\n\n    if (!isPreventRequest) {\n      this.requestPage(this._getPageFromUrl());\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      sort,\n      search,\n      filter\n    } = this.props;\n    const {\n      sort: prevSort,\n      search: prevSearch,\n      filter: prevFilter\n    } = prevProps;\n    const {\n      pages\n    } = this.props;\n    const {\n      pagesCount\n    } = this.state;\n    const pagesLength = Object.keys(pages).length;\n\n    if (pagesCount !== pagesLength) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        pagesCount: pagesLength\n      });\n    }\n\n    if (search !== prevSearch || JSON.stringify(sort) !== JSON.stringify(prevSort) || JSON.stringify(filter) !== JSON.stringify(prevFilter)) {\n      this.requestPage(this._getPageFromUrl());\n    }\n  }\n\n  isEmptyFilter() {\n    const {\n      filter\n    } = this.props;\n    const validFilters = Object.entries(filter).filter(function ([key, value]) {\n      switch (key) {\n        case 'priceRange':\n          return value.min > 0 || value.max > 0;\n\n        case 'customFilters':\n          return Object.keys(value).length > 0;\n\n        case 'categoryIds':\n        default:\n          return true;\n      }\n    });\n    /**\n     * If there is more then one valid filter, filters are not empty.\n     */\n\n    return validFilters.length > 0;\n  }\n\n  _getIsInfiniteLoaderEnabled() {\n    // disable infinite scroll on mobile\n    const {\n      isInfiniteLoaderEnabled,\n      device\n    } = this.props; // allow scroll and mobile\n\n    if (device.isMobile) {\n      return isInfiniteLoaderEnabled;\n    }\n\n    return false;\n  }\n\n  _getPageFromUrl() {\n    const {\n      location\n    } = this.props;\n    return +(getQueryParam('page', location) || 1);\n  }\n\n  _getPagesBounds() {\n    const {\n      pages,\n      totalItems,\n      pageSize\n    } = this.props;\n    const keys = Object.keys(pages);\n    return {\n      maxPage: Math.max(...keys),\n      minPage: Math.min(...keys),\n      totalPages: Math.ceil(totalItems / pageSize),\n      loadedPagesCount: keys.length\n    };\n  }\n\n  _isShowLoading() {\n    const {\n      isLoading\n    } = this.props;\n\n    const {\n      minPage\n    } = this._getPagesBounds();\n\n    return minPage > 1 && !isLoading;\n  }\n\n  _isVisible() {\n    const {\n      maxPage,\n      totalPages\n    } = this._getPagesBounds();\n\n    return maxPage < totalPages;\n  }\n\n  loadPage(next = true) {\n    const {\n      pagesCount\n    } = this.state;\n    const {\n      isPageLoading\n    } = this.props;\n\n    const {\n      minPage,\n      maxPage,\n      totalPages,\n      loadedPagesCount\n    } = this._getPagesBounds();\n\n    const isUpdatable = totalPages > 0 && pagesCount === loadedPagesCount;\n    const shouldUpdateList = next ? maxPage < totalPages : minPage > 1;\n\n    if (isUpdatable && shouldUpdateList && !isPageLoading) {\n      this.setState({\n        pagesCount: pagesCount + 1\n      });\n      this.requestPage(next ? maxPage + 1 : minPage - 1, true);\n    }\n  }\n\n  updatePage(pageNumber) {\n    const {\n      location,\n      history\n    } = this.props;\n    setQueryParams({\n      page: pageNumber === 1 ? '' : pageNumber\n    }, location, history);\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, ProductList, Object.assign({}, this.props, this.containerFunctions, this.containerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n_ProductListContainer.propTypes = {\n  history: HistoryType.isRequired,\n  location: LocationType.isRequired,\n  pages: PagesType.isRequired,\n  pageSize: PropTypes.number,\n  isLoading: PropTypes.bool.isRequired,\n  isPageLoading: PropTypes.bool,\n  totalItems: PropTypes.number.isRequired,\n  requestProductList: PropTypes.func.isRequired,\n  requestProductListInfo: PropTypes.func.isRequired,\n  selectedFilters: PropTypes.objectOf(PropTypes.shape),\n  isPreventRequest: PropTypes.bool,\n  isInfiniteLoaderEnabled: PropTypes.bool,\n  isPaginationEnabled: PropTypes.bool,\n  filter: FilterInputType,\n  search: PropTypes.string,\n  sort: PropTypes.objectOf(PropTypes.string),\n  noAttributes: PropTypes.bool,\n  noVariants: PropTypes.bool,\n  isWidget: PropTypes.bool,\n  device: DeviceType.isRequired\n};\n_ProductListContainer.defaultProps = {\n  pageSize: 24,\n  filter: {},\n  search: '',\n  selectedFilters: {},\n  sort: undefined,\n  isPreventRequest: false,\n  isPaginationEnabled: true,\n  isInfiniteLoaderEnabled: true,\n  isPageLoading: false,\n  noAttributes: false,\n  noVariants: false,\n  isWidget: false\n};\nObject.defineProperty(_ProductListContainer, 'name', {\n  value: 'ProductListContainer'\n});\n\nexport const ProductListContainer = middleware(_ProductListContainer, \"Component/ProductList/Container\");\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProductListContainer));","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/component/ProductList/ProductList.container.js"],"names":["PropTypes","PureComponent","connect","withRouter","ProductListInfoDispatcher","HistoryType","DeviceType","FilterInputType","PagesType","LocationType","getQueryParam","setQueryParams","ProductList","mapStateToProps","state","device","ConfigReducer","mapDispatchToProps","dispatch","requestProductListInfo","options","handleData","ProductListContainer","containerFunctions","loadPrevPage","loadPage","bind","updatePage","pagesCount","requestPage","currentPage","isNext","sort","search","filter","pageSize","requestProductList","noAttributes","noVariants","isWidget","props","categoryIds","isEmptyFilter","args","infoOptions","containerProps","_getPageFromUrl","isShowLoading","_isShowLoading","isVisible","_isVisible","isInfiniteLoaderEnabled","_getIsInfiniteLoaderEnabled","componentDidMount","pages","isPreventRequest","pagesLength","Object","keys","length","setState","componentDidUpdate","prevProps","prevSort","prevSearch","prevFilter","JSON","stringify","validFilters","entries","key","value","min","max","isMobile","location","_getPagesBounds","totalItems","maxPage","Math","minPage","totalPages","ceil","loadedPagesCount","isLoading","next","isPageLoading","isUpdatable","shouldUpdateList","pageNumber","history","page","render","propTypes","isRequired","number","bool","func","selectedFilters","objectOf","shape","isPaginationEnabled","string","defaultProps","undefined","defineProperty","_ProductListContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport ProductListInfoDispatcher from 'Store/ProductListInfo/ProductListInfo.dispatcher';\nimport { HistoryType } from 'Type/Common';\nimport { DeviceType } from 'Type/Device';\nimport { FilterInputType, PagesType } from 'Type/ProductList';\nimport { LocationType } from 'Type/Router';\nimport { getQueryParam, setQueryParams } from 'Util/Url';\n\nimport ProductList from './ProductList.component';\n\n/** @namespace Component/ProductList/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    device: state.ConfigReducer.device\n});\n\n/** @namespace Component/ProductList/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    requestProductListInfo: (options) => ProductListInfoDispatcher.handleData(dispatch, options)\n});\n\n/** @namespace Component/ProductList/Container */\nexport class ProductListContainer extends PureComponent {\n    containerFunctions = {\n        loadPrevPage: this.loadPage.bind(this, false),\n        loadPage: this.loadPage.bind(this),\n        updatePage: this.updatePage.bind(this)\n    };\n\n    static propTypes = {\n        history: HistoryType.isRequired,\n        location: LocationType.isRequired,\n        pages: PagesType.isRequired,\n        pageSize: PropTypes.number,\n        isLoading: PropTypes.bool.isRequired,\n        isPageLoading: PropTypes.bool,\n        totalItems: PropTypes.number.isRequired,\n        requestProductList: PropTypes.func.isRequired,\n        requestProductListInfo: PropTypes.func.isRequired,\n        selectedFilters: PropTypes.objectOf(PropTypes.shape),\n        isPreventRequest: PropTypes.bool,\n        isInfiniteLoaderEnabled: PropTypes.bool,\n        isPaginationEnabled: PropTypes.bool,\n        filter: FilterInputType,\n        search: PropTypes.string,\n        sort: PropTypes.objectOf(PropTypes.string),\n        noAttributes: PropTypes.bool,\n        noVariants: PropTypes.bool,\n        isWidget: PropTypes.bool,\n        device: DeviceType.isRequired\n    };\n\n    static defaultProps = {\n        pageSize: 24,\n        filter: {},\n        search: '',\n        selectedFilters: {},\n        sort: undefined,\n        isPreventRequest: false,\n        isPaginationEnabled: true,\n        isInfiniteLoaderEnabled: true,\n        isPageLoading: false,\n        noAttributes: false,\n        noVariants: false,\n        isWidget: false\n    };\n\n    state = {\n        pagesCount: 1\n    };\n\n    componentDidMount() {\n        const { pages, isPreventRequest } = this.props;\n        const { pagesCount } = this.state;\n        const pagesLength = Object.keys(pages).length;\n\n        if (pagesCount !== pagesLength) {\n            this.setState({ pagesCount: pagesLength });\n        }\n\n        // Is true when category is changed. This check prevents making new requests when navigating back to PLP from PDP\n        if (!isPreventRequest) {\n            this.requestPage(this._getPageFromUrl());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const { sort, search, filter } = this.props;\n        const { sort: prevSort, search: prevSearch, filter: prevFilter } = prevProps;\n\n        const { pages } = this.props;\n        const { pagesCount } = this.state;\n        const pagesLength = Object.keys(pages).length;\n\n        if (pagesCount !== pagesLength) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ pagesCount: pagesLength });\n        }\n\n        if (search !== prevSearch\n            || JSON.stringify(sort) !== JSON.stringify(prevSort)\n            || JSON.stringify(filter) !== JSON.stringify(prevFilter)\n        ) {\n            this.requestPage(this._getPageFromUrl());\n        }\n    }\n\n    isEmptyFilter() {\n        const { filter } = this.props;\n\n        const validFilters = Object.entries(filter).filter(([key, value]) => {\n            switch (key) {\n            case 'priceRange':\n                return value.min > 0 || value.max > 0;\n            case 'customFilters':\n                return Object.keys(value).length > 0;\n            case 'categoryIds':\n            default:\n                return true;\n            }\n        });\n\n        /**\n         * If there is more then one valid filter, filters are not empty.\n         */\n        return validFilters.length > 0;\n    }\n\n    requestPage = (currentPage = 1, isNext = false) => {\n        const {\n            sort,\n            search,\n            filter,\n            pageSize,\n            requestProductList,\n            requestProductListInfo,\n            noAttributes,\n            noVariants,\n            isWidget\n        } = this.props;\n\n        /**\n         * In case the wrong category was passed down to the product list,\n         * prevent it from being requested.\n         */\n        if (filter.categoryIds === -1) {\n            return;\n        }\n\n        /**\n         * Do not request page if there are no filters\n         */\n        if (!search && !this.isEmptyFilter()) {\n            return;\n        }\n\n        // TODO: product list requests filters alongside the page\n        // TODO: sometimes product list is requested more then once\n        // TODO: the product list should not request itself, when coming from PDP\n\n        const options = {\n            isNext,\n            noAttributes,\n            noVariants,\n            args: {\n                sort,\n                filter,\n                search,\n                pageSize,\n                currentPage\n            }\n        };\n\n        const infoOptions = {\n            args: {\n                filter,\n                search\n            }\n        };\n\n        requestProductList(options);\n\n        if (!isWidget) {\n            requestProductListInfo(infoOptions);\n        }\n    };\n\n    containerProps = () => ({\n        currentPage: this._getPageFromUrl(),\n        isShowLoading: this._isShowLoading(),\n        isVisible: this._isVisible(),\n        requestPage: this.requestPage,\n        // disable this property to enable infinite scroll on desktop\n        isInfiniteLoaderEnabled: this._getIsInfiniteLoaderEnabled()\n    });\n\n    _getIsInfiniteLoaderEnabled() { // disable infinite scroll on mobile\n        const { isInfiniteLoaderEnabled, device } = this.props;\n\n        // allow scroll and mobile\n        if (device.isMobile) {\n            return isInfiniteLoaderEnabled;\n        }\n\n        return false;\n    }\n\n    _getPageFromUrl() {\n        const { location } = this.props;\n        return +(getQueryParam('page', location) || 1);\n    }\n\n    _getPagesBounds() {\n        const { pages, totalItems, pageSize } = this.props;\n        const keys = Object.keys(pages);\n\n        return {\n            maxPage: Math.max(...keys),\n            minPage: Math.min(...keys),\n            totalPages: Math.ceil(totalItems / pageSize),\n            loadedPagesCount: keys.length\n        };\n    }\n\n    _isShowLoading() {\n        const { isLoading } = this.props;\n        const { minPage } = this._getPagesBounds();\n        return minPage > 1 && !isLoading;\n    }\n\n    _isVisible() {\n        const { maxPage, totalPages } = this._getPagesBounds();\n        return maxPage < totalPages;\n    }\n\n    loadPage(next = true) {\n        const { pagesCount } = this.state;\n        const { isPageLoading } = this.props;\n\n        const {\n            minPage,\n            maxPage,\n            totalPages,\n            loadedPagesCount\n        } = this._getPagesBounds();\n\n        const isUpdatable = totalPages > 0 && pagesCount === loadedPagesCount;\n        const shouldUpdateList = next ? maxPage < totalPages : minPage > 1;\n\n        if (isUpdatable && shouldUpdateList && !isPageLoading) {\n            this.setState({ pagesCount: pagesCount + 1 });\n            this.requestPage(next ? maxPage + 1 : minPage - 1, true);\n        }\n    }\n\n    updatePage(pageNumber) {\n        const { location, history } = this.props;\n\n        setQueryParams({\n            page: pageNumber === 1 ? '' : pageNumber\n        }, location, history);\n    }\n\n    render() {\n        return (\n            <ProductList\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProductListContainer));\n"]},"metadata":{},"sourceType":"module"}