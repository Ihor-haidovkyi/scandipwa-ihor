{"ast":null,"code":"import _slicedToArray from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */export var MUTATION_TYPE='mutation';export var QUERY_TYPE='query';/**\n * Prepare request body string from query list (all entries must be instances of Query).\n * @param  {Array<Field>} queries\n * @return {String} JSON String, format: `{\"query\":\"{alias: queryName (attr:key) { field1, field2 }}\"}`\n * @namespace Util/Query/prepareFieldString\n */export var prepareFieldString=middleware(function(rootField){var accArgs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var alias=rootField.alias,name=rootField.name,args=rootField.args,children=rootField.children;var resolvedArgs=args.reduce(function(acc,arg){var name=arg.name,type=arg.type,value=arg.value;if(!accArgs[name]){// eslint-disable-next-line no-param-reassign\naccArgs[name]=[];}// add type and value of the argument into argument accumulator,\n// we will need this value when building the query doc and variables\nvar index=accArgs[name].push([type,value]);// join each argument as \"name:$var_1\"\nreturn[].concat(_toConsumableArray(acc),[\"\".concat(name,\":$\").concat(name,\"_\").concat(index)]);},[]);// join arguments, wrap into \"()\" and join with \",\"\nvar formattedArgs=resolvedArgs.length?\"(\".concat(resolvedArgs.join(','),\")\"):'';// join child fields with \",\"\nvar formattedChildren=children.map(function(field){return prepareFieldString(field,accArgs);}).join(',');// wrap body with \"{}\"\nvar body=children.length?\"{\".concat(formattedChildren,\"}\"):'';// format like \"alias:name(arg: $var){field1,field2}\"\nreturn\"\".concat(alias).concat(name).concat(formattedArgs).concat(body);},\"Util/Query/prepareFieldString\\n\");/** @namespace Util/Query/prepareRequest */export var prepareRequest=middleware(function(fields,type){var fieldsArray=Array.isArray(fields)?fields:[fields];if(type!==MUTATION_TYPE&&type!==QUERY_TYPE){// we only support Mutation and Query types\nthrow new Error(\"GraphQL document type \\\"\".concat(type,\"\\\" is not supported.\"));}var variables={};var accArgs={};// prepare fields from each field passed\nvar fieldStrings=fieldsArray.map(function(field){return prepareFieldString(field,accArgs);}).join(',');// go through argument accumulator collected in \"prepareFieldString\", join values\n// into the format \"$var:Type\" and append variable value to variables field\nvar resolvedArgs=Object.entries(accArgs).reduce(function(acc,_ref){var _ref2=_slicedToArray(_ref,2),name=_ref2[0],dataArray=_ref2[1];dataArray.forEach(function(_ref3,i){var _ref4=_slicedToArray(_ref3,2),type=_ref4[0],value=_ref4[1];var variable=\"\".concat(name,\"_\").concat(i+1);acc.push(\"$\".concat(variable,\":\").concat(type));variables[variable]=value;});return acc;},[]);// Wrap arguments with \"()\" and join using \",\"\nvar formattedArgs=resolvedArgs.length?\"(\".concat(resolvedArgs.join(','),\")\"):'';return{// format like \"query($var_1:String){test(arg: $var_1){id}}\"\nquery:\"\".concat(type).concat(formattedArgs,\"{\").concat(fieldStrings,\"}\"),variables:variables};},\"Util/Query/prepareRequest\");/** @namespace Util/Query/prepareMutation */export var prepareMutation=middleware(function(mutations){return prepareRequest(mutations,MUTATION_TYPE);},\"Util/Query/prepareMutation\");/** @namespace Util/Query/prepareQuery */export var prepareQuery=middleware(function(queries){return prepareRequest(queries,QUERY_TYPE);},\"Util/Query/prepareQuery\");","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/util/Query/PrepareDocument.js"],"names":["MUTATION_TYPE","QUERY_TYPE","prepareFieldString","rootField","accArgs","alias","name","args","children","resolvedArgs","reduce","acc","arg","type","value","index","push","formattedArgs","length","join","formattedChildren","map","field","body","prepareRequest","fields","fieldsArray","Array","isArray","Error","variables","fieldStrings","Object","entries","dataArray","forEach","i","variable","query","prepareMutation","mutations","prepareQuery","queries"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nexport const MUTATION_TYPE = 'mutation';\nexport const QUERY_TYPE = 'query';\n\n/**\n * Prepare request body string from query list (all entries must be instances of Query).\n * @param  {Array<Field>} queries\n * @return {String} JSON String, format: `{\"query\":\"{alias: queryName (attr:key) { field1, field2 }}\"}`\n * @namespace Util/Query/prepareFieldString\n */\nexport const prepareFieldString = (rootField, accArgs = {}) => {\n    const {\n        alias, name, args, children\n    } = rootField;\n\n    const resolvedArgs = args.reduce((acc, arg) => {\n        const { name, type, value } = arg;\n\n        if (!accArgs[name]) {\n            // eslint-disable-next-line no-param-reassign\n            accArgs[name] = [];\n        }\n\n        // add type and value of the argument into argument accumulator,\n        // we will need this value when building the query doc and variables\n        const index = accArgs[name].push([type, value]);\n\n        // join each argument as \"name:$var_1\"\n        return [...acc, `${name}:$${name}_${index}`];\n    }, []);\n\n    // join arguments, wrap into \"()\" and join with \",\"\n    const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : '';\n\n    // join child fields with \",\"\n    const formattedChildren = children.map((field) => prepareFieldString(field, accArgs)).join(',');\n\n    // wrap body with \"{}\"\n    const body = children.length ? `{${formattedChildren}}` : '';\n\n    // format like \"alias:name(arg: $var){field1,field2}\"\n    return `${alias}${name}${formattedArgs}${body}`;\n};\n\n/** @namespace Util/Query/prepareRequest */\nexport const prepareRequest = (fields, type) => {\n    const fieldsArray = Array.isArray(fields) ? fields : [fields];\n\n    if (type !== MUTATION_TYPE && type !== QUERY_TYPE) {\n        // we only support Mutation and Query types\n        throw new Error(`GraphQL document type \"${type}\" is not supported.`);\n    }\n\n    const variables = {};\n    const accArgs = {};\n\n    // prepare fields from each field passed\n    const fieldStrings = fieldsArray.map((field) => prepareFieldString(field, accArgs)).join(',');\n\n    // go through argument accumulator collected in \"prepareFieldString\", join values\n    // into the format \"$var:Type\" and append variable value to variables field\n    const resolvedArgs = Object.entries(accArgs).reduce((acc, [name, dataArray]) => {\n        dataArray.forEach(([type, value], i) => {\n            const variable = `${name}_${i + 1}`;\n            acc.push(`$${variable}:${type}`);\n            variables[variable] = value;\n        });\n\n        return acc;\n    }, []);\n\n    // Wrap arguments with \"()\" and join using \",\"\n    const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : '';\n\n    return {\n        // format like \"query($var_1:String){test(arg: $var_1){id}}\"\n        query: `${type}${formattedArgs}{${fieldStrings}}`,\n        variables\n    };\n};\n\n/** @namespace Util/Query/prepareMutation */\nexport const prepareMutation = (mutations) => prepareRequest(mutations, MUTATION_TYPE);\n\n/** @namespace Util/Query/prepareQuery */\nexport const prepareQuery = (queries) => prepareRequest(queries, QUERY_TYPE);\n"]},"metadata":{},"sourceType":"module"}