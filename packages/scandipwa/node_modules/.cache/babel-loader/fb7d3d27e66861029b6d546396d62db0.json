{"ast":null,"code":"import _classCallCheck from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{assert}from'workbox-core/_private/assert.js';import{defaultMethod,validMethods}from\"./utils/constants.js\";import{normalizeHandler}from\"./utils/normalizeHandler.js\";import\"./_version.js\";/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */var Route=/**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */function Route(match,handler){var method=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultMethod;_classCallCheck(this,Route);if(process.env.NODE_ENV!=='production'){assert.isType(match,'function',{moduleName:'workbox-routing',className:'Route',funcName:'constructor',paramName:'match'});if(method){assert.isOneOf(method,validMethods,{paramName:'method'});}}// These values are referenced directly by Router so cannot be\n// altered by minificaton.\nthis.handler=normalizeHandler(handler);this.match=match;this.method=method;};export{Route};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-routing/Route.js"],"names":["assert","defaultMethod","validMethods","normalizeHandler","Route","match","handler","method","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","isOneOf"],"mappings":"mJAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASA,MAAT,KAAuB,iCAAvB,CACA,OAASC,aAAT,CAAwBC,YAAxB,4BACA,OAASC,gBAAT,mCACA,sBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,GACMC,CAAAA,K,CACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,eAAYC,KAAZ,CAAmBC,OAAnB,CAAoD,IAAxBC,CAAAA,MAAwB,2DAAfN,aAAe,6BAChD,GAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCV,MAAM,CAACW,MAAP,CAAcN,KAAd,CAAqB,UAArB,CAAiC,CAC7BO,UAAU,CAAE,iBADiB,CAE7BC,SAAS,CAAE,OAFkB,CAG7BC,QAAQ,CAAE,aAHmB,CAI7BC,SAAS,CAAE,OAJkB,CAAjC,EAMA,GAAIR,MAAJ,CAAY,CACRP,MAAM,CAACgB,OAAP,CAAeT,MAAf,CAAuBL,YAAvB,CAAqC,CAAEa,SAAS,CAAE,QAAb,CAArC,EACH,CACJ,CACD;AACA;AACA,KAAKT,OAAL,CAAeH,gBAAgB,CAACG,OAAD,CAA/B,CACA,KAAKD,KAAL,CAAaA,KAAb,CACA,KAAKE,MAAL,CAAcA,MAAd,CACH,C,CAEL,OAASH,KAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n"]},"metadata":{},"sourceType":"module"}