{"ast":null,"code":"import _regeneratorRuntime from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(generateURLVariations);/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{removeIgnoredSearchParams}from\"./removeIgnoredSearchParams.js\";import\"../_version.js\";/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */export function generateURLVariations(url){var _ref,ignoreURLParametersMatching,directoryIndex,cleanURLs,urlManipulation,urlObject,urlWithoutIgnoredParams,directoryURL,cleanURL,additionalURLs,_iterator,_step,urlToAttempt,_args=arguments;return _regeneratorRuntime.wrap(function generateURLVariations$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref=_args.length>1&&_args[1]!==undefined?_args[1]:{},ignoreURLParametersMatching=_ref.ignoreURLParametersMatching,directoryIndex=_ref.directoryIndex,cleanURLs=_ref.cleanURLs,urlManipulation=_ref.urlManipulation;urlObject=new URL(url,location.href);urlObject.hash='';_context.next=5;return urlObject.href;case 5:urlWithoutIgnoredParams=removeIgnoredSearchParams(urlObject,ignoreURLParametersMatching);_context.next=8;return urlWithoutIgnoredParams.href;case 8:if(!(directoryIndex&&urlWithoutIgnoredParams.pathname.endsWith('/'))){_context.next=13;break;}directoryURL=new URL(urlWithoutIgnoredParams.href);directoryURL.pathname+=directoryIndex;_context.next=13;return directoryURL.href;case 13:if(!cleanURLs){_context.next=18;break;}cleanURL=new URL(urlWithoutIgnoredParams.href);cleanURL.pathname+='.html';_context.next=18;return cleanURL.href;case 18:if(!urlManipulation){_context.next=37;break;}additionalURLs=urlManipulation({url:urlObject});_iterator=_createForOfIteratorHelper(additionalURLs);_context.prev=21;_iterator.s();case 23:if((_step=_iterator.n()).done){_context.next=29;break;}urlToAttempt=_step.value;_context.next=27;return urlToAttempt.href;case 27:_context.next=23;break;case 29:_context.next=34;break;case 31:_context.prev=31;_context.t0=_context[\"catch\"](21);_iterator.e(_context.t0);case 34:_context.prev=34;_iterator.f();return _context.finish(34);case 37:case\"end\":return _context.stop();}}},_marked,null,[[21,31,34,37]]);}","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-precaching/utils/generateURLVariations.js"],"names":["generateURLVariations","removeIgnoredSearchParams","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"mappings":"mWAmBiBA,qB,EAnBjB;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASC,yBAAT,sCACA,uBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAUD,CAAAA,qBAAV,CAAgCE,GAAhC,qXAAoH,EAApH,CAAuCC,2BAAvC,MAAuCA,2BAAvC,CAAoEC,cAApE,MAAoEA,cAApE,CAAoFC,SAApF,MAAoFA,SAApF,CAA+FC,eAA/F,MAA+FA,eAA/F,CACGC,SADH,CACe,GAAIC,CAAAA,GAAJ,CAAQN,GAAR,CAAaO,QAAQ,CAACC,IAAtB,CADf,CAEHH,SAAS,CAACI,IAAV,CAAiB,EAAjB,CAFG,gBAGH,MAAMJ,CAAAA,SAAS,CAACG,IAAhB,CAHG,OAIGE,uBAJH,CAI6BX,yBAAyB,CAACM,SAAD,CAAYJ,2BAAZ,CAJtD,iBAKH,MAAMS,CAAAA,uBAAuB,CAACF,IAA9B,CALG,YAMCN,cAAc,EAAIQ,uBAAuB,CAACC,QAAxB,CAAiCC,QAAjC,CAA0C,GAA1C,CANnB,2BAOOC,YAPP,CAOsB,GAAIP,CAAAA,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAPtB,CAQCK,YAAY,CAACF,QAAb,EAAyBT,cAAzB,CARD,iBASC,MAAMW,CAAAA,YAAY,CAACL,IAAnB,CATD,YAWCL,SAXD,0BAYOW,QAZP,CAYkB,GAAIR,CAAAA,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAZlB,CAaCM,QAAQ,CAACH,QAAT,EAAqB,OAArB,CAbD,iBAcC,MAAMG,CAAAA,QAAQ,CAACN,IAAf,CAdD,YAgBCJ,eAhBD,0BAiBOW,cAjBP,CAiBwBX,eAAe,CAAC,CAAEJ,GAAG,CAAEK,SAAP,CAAD,CAjBvC,sCAkB4BU,cAlB5B,gGAkBYC,YAlBZ,8BAmBK,MAAMA,CAAAA,YAAY,CAACR,IAAnB,CAnBL","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}