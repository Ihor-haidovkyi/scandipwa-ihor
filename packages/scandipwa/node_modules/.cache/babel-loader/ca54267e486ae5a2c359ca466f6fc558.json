{"ast":null,"code":"import{useReducer,useRef,useMemo,useContext,useDebugValue}from'react';import{useReduxContext as useDefaultReduxContext}from\"./useReduxContext\";import Subscription from\"../utils/Subscription\";import{useIsomorphicLayoutEffect}from\"../utils/useIsomorphicLayoutEffect\";import{ReactReduxContext}from\"../components/Context\";var refEquality=function refEquality(a,b){return a===b;};function useSelectorWithStoreAndSubscription(selector,equalityFn,store,contextSub){var _useReducer=useReducer(function(s){return s+1;},0),forceRender=_useReducer[1];var subscription=useMemo(function(){return new Subscription(store,contextSub);},[store,contextSub]);var latestSubscriptionCallbackError=useRef();var latestSelector=useRef();var latestStoreState=useRef();var latestSelectedState=useRef();var storeState=store.getState();var selectedState;try{if(selector!==latestSelector.current||storeState!==latestStoreState.current||latestSubscriptionCallbackError.current){var newSelectedState=selector(storeState);// ensure latest selected state is reused so that a custom equality function can result in identical references\nif(latestSelectedState.current===undefined||!equalityFn(newSelectedState,latestSelectedState.current)){selectedState=newSelectedState;}else{selectedState=latestSelectedState.current;}}else{selectedState=latestSelectedState.current;}}catch(err){if(latestSubscriptionCallbackError.current){err.message+=\"\\nThe error may be correlated with this previous error:\\n\"+latestSubscriptionCallbackError.current.stack+\"\\n\\n\";}throw err;}useIsomorphicLayoutEffect(function(){latestSelector.current=selector;latestStoreState.current=storeState;latestSelectedState.current=selectedState;latestSubscriptionCallbackError.current=undefined;});useIsomorphicLayoutEffect(function(){function checkForUpdates(){try{var _newSelectedState=latestSelector.current(store.getState());if(equalityFn(_newSelectedState,latestSelectedState.current)){return;}latestSelectedState.current=_newSelectedState;}catch(err){// we ignore all errors here, since when the component\n// is re-rendered, the selectors are called again, and\n// will throw again, if neither props nor store state\n// changed\nlatestSubscriptionCallbackError.current=err;}forceRender();}subscription.onStateChange=checkForUpdates;subscription.trySubscribe();checkForUpdates();return function(){return subscription.tryUnsubscribe();};},[store,subscription]);return selectedState;}/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */export function createSelectorHook(context){if(context===void 0){context=ReactReduxContext;}var useReduxContext=context===ReactReduxContext?useDefaultReduxContext:function(){return useContext(context);};return function useSelector(selector,equalityFn){if(equalityFn===void 0){equalityFn=refEquality;}if(process.env.NODE_ENV!=='production'&&!selector){throw new Error(\"You must pass a selector to useSelector\");}var _useReduxContext=useReduxContext(),store=_useReduxContext.store,contextSub=_useReduxContext.subscription;var selectedState=useSelectorWithStoreAndSubscription(selector,equalityFn,store,contextSub);useDebugValue(selectedState);return selectedState;};}/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */export var useSelector=/*#__PURE__*/createSelectorHook();","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useReducer","useRef","useMemo","useContext","useDebugValue","useReduxContext","useDefaultReduxContext","Subscription","useIsomorphicLayoutEffect","ReactReduxContext","refEquality","a","b","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","_useReducer","s","forceRender","subscription","latestSubscriptionCallbackError","latestSelector","latestStoreState","latestSelectedState","storeState","getState","selectedState","current","newSelectedState","undefined","err","message","stack","checkForUpdates","_newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","createSelectorHook","context","useSelector","process","env","NODE_ENV","Error","_useReduxContext"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useMemo, useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references\n\n      if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {\n        selectedState = newSelectedState;\n      } else {\n        selectedState = latestSelectedState.current;\n      }\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var _newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(_newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = _newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelector\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();"]},"metadata":{},"sourceType":"module"}