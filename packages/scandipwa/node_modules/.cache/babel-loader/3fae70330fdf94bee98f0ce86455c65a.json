{"ast":null,"code":"/* eslint-disable fp/no-let */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport getStore from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/Store\"; // TODO: fix no LET\n\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */\n\nexport const updateQueryParamWithoutHistory = middleware(function (name, value, history, location) {\n  const {\n    search,\n    pathname\n  } = location;\n  const params = new URLSearchParams(search);\n  params.set(name, value);\n  history.replace(decodeURIComponent(`${pathname}?${params}`));\n}, \"Util/Url/updateQueryParamWithoutHistory\\n\");\n/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */\n\nexport const removeQueryParamWithoutHistory = middleware(function (name, history, location) {\n  const {\n    search,\n    pathname\n  } = location;\n  const params = new URLSearchParams(search);\n  params.delete(name);\n  history.replace(decodeURIComponent(`${pathname}?${params}`));\n}, \"Util/Url/removeQueryParamWithoutHistory\\n\");\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */\n\nexport const getUrlParam = middleware(function (match, location) {\n  const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n  const currentUrl = location.pathname.replace(new RegExp(window.storeRegexText), '');\n\n  if (baseUrl === '/') {\n    return currentUrl.replace(baseUrl, '');\n  }\n\n  return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n}, \"Util/Url/getUrlParam\\n\");\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */\n\nexport const appendWithStoreCode = middleware(function (pathname) {\n  const {\n    ConfigReducer: {\n      base_link_url = window.location.origin\n    } = {}\n  } = getStore().getState() || {};\n  const {\n    pathname: storePrefix\n  } = new URL(base_link_url); // ignore empty URLs\n\n  if (!pathname) {\n    return pathname;\n  } // match URLs which have the store code in pathname\n\n\n  if (pathname.match(`/(${window.storeList.join('|')})`)) {\n    return pathname;\n  }\n\n  if (!pathname.startsWith('/')) {\n    // eslint-disable-next-line no-param-reassign\n    pathname = `/${pathname}`;\n  } // trim the last slash from URL, and append it to pathname\n\n\n  return storePrefix.slice(0, -1).concat(pathname);\n}, \"Util/Url/appendWithStoreCode\\n\");\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */\n\nexport const getQueryParam = middleware(function (variable, location) {\n  const query = location.search.substring(1);\n  const vars = query.split('&'); // eslint-disable-next-line fp/no-loops\n\n  for (let i = 0; i < vars.length; i++) {\n    const pair = vars[i].split('=');\n\n    if (pair[0] === variable) {\n      return pair[1];\n    }\n  }\n\n  return false;\n}, \"Util/Url/getQueryParam\\n\");\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */\n\nexport const convertQueryStringToKeyValuePairs = middleware(function (queryString) {\n  const keyValuePairs = {};\n  const params = queryString.substring(1).split('&');\n  params.forEach(function (param) {\n    const pair = param.split('=');\n    const [keyPair, valuePair = []] = pair;\n\n    if (keyPair.length > 0 && valuePair.length > 0) {\n      keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n    }\n  });\n  return keyValuePairs;\n}, \"Util/Url/convertQueryStringToKeyValuePairs\\n\");\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */\n\nexport const updateKeyValuePairs = middleware(function (keyValuePairs, currentKey, currentValue) {\n  const updatedKeyValuePairs = {};\n  Object.entries(keyValuePairs).forEach(function (pair) {\n    const [key, value] = pair;\n\n    if (currentKey === key) {\n      updatedKeyValuePairs[key] = currentValue;\n    } else {\n      updatedKeyValuePairs[key] = value;\n    }\n  });\n  return updatedKeyValuePairs;\n}, \"Util/Url/updateKeyValuePairs\\n\");\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */\n\nexport const convertKeyValuesToQueryString = middleware(function (keyValuePairs) {\n  let newSearchQuery = '';\n  Object.entries(keyValuePairs).forEach(function (pair) {\n    const [key, value] = pair;\n    const keyExists = key !== '';\n    const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n    if (valueExists && keyExists) {\n      newSearchQuery += `${key}=${value}&`;\n    }\n  });\n  return `${newSearchQuery.slice(0, -1)}`; // remove trailing '&'\n}, \"Util/Url/convertKeyValuesToQueryString\\n\");\n/** @namespace Util/Url/generateQuery */\n\nexport const generateQuery = middleware(function (keyValueObject, location, history) {\n  let query = history.location.search;\n  Object.entries(keyValueObject).forEach(function (pair) {\n    const [key, value] = pair;\n    const keyAndValueExist = !!key && !!value;\n\n    if (query === '' && keyAndValueExist) {\n      query = `?${key}=${value}`;\n    } else if (getQueryParam(key, location) !== false) {\n      const keyValuePairs = convertQueryStringToKeyValuePairs(query);\n      const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n      const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n      query = updatedQuery.length ? `?${updatedQuery}` : '';\n    } else if (keyAndValueExist) {\n      query = `${query}&${key}=${value}`;\n    }\n  });\n  return query;\n}, \"Util/Url/generateQuery\");\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */\n\nexport const setQueryParams = middleware(function (keyValueObject, location, history) {\n  const {\n    state\n  } = location;\n  const query = generateQuery(keyValueObject, location, history);\n  history.push({\n    search: query,\n    state\n  });\n}, \"Util/Url/setQueryParams\\n\");\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */\n\nexport const clearQueriesFromUrl = middleware(function (history) {\n  history.push({\n    search: ''\n  });\n}, \"Util/Url/clearQueriesFromUrl\\n\");\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */\n\nexport const objectToUri = middleware(function (keyValueObject = {}) {\n  const paramString = Object.entries(keyValueObject).sort().reduce(function (acc, [key, value]) {\n    return `${acc}&${key}=${value}`;\n  }, '').replace('&', '');\n  return paramString.length > 0 ? `?${paramString}` : '';\n}, \"Util/Url/objectToUri\\n\");","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/packages/scandipwa/src/util/Url/Url.js"],"names":["getStore","updateQueryParamWithoutHistory","name","value","history","location","search","pathname","params","URLSearchParams","set","replace","decodeURIComponent","removeQueryParamWithoutHistory","delete","getUrlParam","match","baseUrl","path","window","storeRegexText","currentUrl","RegExp","appendWithStoreCode","ConfigReducer","base_link_url","origin","getState","storePrefix","URL","storeList","join","startsWith","slice","concat","getQueryParam","variable","query","substring","vars","split","i","length","pair","convertQueryStringToKeyValuePairs","queryString","keyValuePairs","forEach","param","keyPair","valuePair","updateKeyValuePairs","currentKey","currentValue","updatedKeyValuePairs","Object","entries","key","convertKeyValuesToQueryString","newSearchQuery","keyExists","valueExists","generateQuery","keyValueObject","keyAndValueExist","updatedQuery","setQueryParams","state","push","clearQueriesFromUrl","objectToUri","paramString","sort","reduce","acc"],"mappings":"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","sourcesContent":["/* eslint-disable fp/no-let */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport getStore from 'Util/Store';\n\n// TODO: fix no LET\n\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */\nexport const updateQueryParamWithoutHistory = (name, value, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.set(name, value);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */\nexport const removeQueryParamWithoutHistory = (name, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.delete(name);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */\nexport const getUrlParam = (match, location) => {\n    const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n    const currentUrl = location.pathname.replace(new RegExp(window.storeRegexText), '');\n\n    if (baseUrl === '/') {\n        return currentUrl.replace(baseUrl, '');\n    }\n\n    return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n};\n\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */\nexport const appendWithStoreCode = (pathname) => {\n    const { ConfigReducer: { base_link_url = window.location.origin } = {} } = getStore().getState() || {};\n    const { pathname: storePrefix } = new URL(base_link_url);\n\n    // ignore empty URLs\n    if (!pathname) {\n        return pathname;\n    }\n\n    // match URLs which have the store code in pathname\n    if (pathname.match(`/(${window.storeList.join('|')})`)) {\n        return pathname;\n    }\n\n    if (!pathname.startsWith('/')) {\n        // eslint-disable-next-line no-param-reassign\n        pathname = `/${ pathname }`;\n    }\n\n    // trim the last slash from URL, and append it to pathname\n    return storePrefix.slice(0, -1).concat(pathname);\n};\n\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */\nexport const getQueryParam = (variable, location) => {\n    const query = location.search.substring(1);\n    const vars = query.split('&');\n    // eslint-disable-next-line fp/no-loops\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n\n    return false;\n};\n\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */\nexport const convertQueryStringToKeyValuePairs = (queryString) => {\n    const keyValuePairs = {};\n    const params = queryString.substring(1).split('&');\n\n    params.forEach((param) => {\n        const pair = param.split('=');\n        const [keyPair, valuePair = []] = pair;\n\n        if (keyPair.length > 0 && valuePair.length > 0) {\n            keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n        }\n    });\n\n    return keyValuePairs;\n};\n\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */\nexport const updateKeyValuePairs = (keyValuePairs, currentKey, currentValue) => {\n    const updatedKeyValuePairs = {};\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n\n        if (currentKey === key) {\n            updatedKeyValuePairs[key] = currentValue;\n        } else {\n            updatedKeyValuePairs[key] = value;\n        }\n    });\n\n    return updatedKeyValuePairs;\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */\nexport const convertKeyValuesToQueryString = (keyValuePairs) => {\n    let newSearchQuery = '';\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n        const keyExists = key !== '';\n        const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n        if (valueExists && keyExists) {\n            newSearchQuery += `${key}=${value}&`;\n        }\n    });\n\n    return `${newSearchQuery.slice(0, -1)}`; // remove trailing '&'\n};\n\n/** @namespace Util/Url/generateQuery */\nexport const generateQuery = (keyValueObject, location, history) => {\n    let query = history.location.search;\n\n    Object.entries(keyValueObject).forEach((pair) => {\n        const [key, value] = pair;\n\n        const keyAndValueExist = !!key && !!value;\n\n        if (query === '' && keyAndValueExist) {\n            query = `?${key}=${value}`;\n        } else if (getQueryParam(key, location) !== false) {\n            const keyValuePairs = convertQueryStringToKeyValuePairs(query);\n            const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n            const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n\n            query = updatedQuery.length ? `?${updatedQuery}` : '';\n        } else if (keyAndValueExist) {\n            query = `${query}&${key}=${value}`;\n        }\n    });\n\n    return query;\n};\n\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */\nexport const setQueryParams = (keyValueObject, location, history) => {\n    const { state } = location;\n    const query = generateQuery(keyValueObject, location, history);\n\n    history.push({ search: query, state });\n};\n\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */\nexport const clearQueriesFromUrl = (history) => {\n    history.push({ search: '' });\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */\nexport const objectToUri = (keyValueObject = {}) => {\n    const paramString = Object.entries(keyValueObject).sort()\n        .reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '')\n        .replace('&', '');\n\n    return paramString.length > 0 ? `?${paramString}` : '';\n};\n"]},"metadata":{},"sourceType":"module"}