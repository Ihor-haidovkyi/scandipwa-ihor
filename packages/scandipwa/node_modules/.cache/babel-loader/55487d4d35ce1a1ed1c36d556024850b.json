{"ast":null,"code":"import _regeneratorRuntime from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */import{CHECKOUT,MY_ACCOUNT}from\"/home/marketihor/scandipwa/packages/scandipwa/src/component/Header/Header.config\";import MyAccountQuery from\"/home/marketihor/scandipwa/packages/scandipwa/src/query/MyAccount.query\";import{updateCustomerDetails,updateCustomerPasswordForgotStatus,updateCustomerPasswordResetStatus,updateCustomerSignInStatus,updateIsLoading}from\"/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.action\";import{showNotification}from\"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";import{ORDERS}from\"/home/marketihor/scandipwa/packages/scandipwa/src/store/Order/Order.reducer\";import{hideActiveOverlay}from\"/home/marketihor/scandipwa/packages/scandipwa/src/store/Overlay/Overlay.action\";import{clearComparedProducts}from\"/home/marketihor/scandipwa/packages/scandipwa/src/store/ProductCompare/ProductCompare.action\";import{deleteAuthorizationToken,isSignedIn,setAuthorizationToken}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Auth\";import BrowserDatabase from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/BrowserDatabase\";import{deleteGuestQuoteId,getGuestQuoteId,setGuestQuoteId}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Cart\";import{removeUid}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Compare\";import history from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/History\";import{prepareQuery}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Query\";import{executePost,fetchMutation,getErrorMessage}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request\";export var CartDispatcher=import(/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\"/home/marketihor/scandipwa/packages/scandipwa/src/store/Cart/Cart.dispatcher\");export var WishlistDispatcher=import(/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\"/home/marketihor/scandipwa/packages/scandipwa/src/store/Wishlist/Wishlist.dispatcher\");export var ProductCompareDispatcher=import(/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\"/home/marketihor/scandipwa/packages/scandipwa/src/store/ProductCompare/ProductCompare.dispatcher\");export var CUSTOMER='customer';export var ONE_MONTH_IN_SECONDS=2628000;/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */export var _MyAccountDispatcher=/*#__PURE__*/function(_Extensible){_inherits(_MyAccountDispatcher,_Extensible);var _super=_createSuper(_MyAccountDispatcher);function _MyAccountDispatcher(){var _this;_classCallCheck(this,_MyAccountDispatcher);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.forceLogoutRedirectPages=[CHECKOUT,MY_ACCOUNT];return _this;}_createClass(_MyAccountDispatcher,[{key:\"requestCustomerData\",value:function requestCustomerData(dispatch){var query=MyAccountQuery.getCustomerQuery();var customer=BrowserDatabase.getItem(CUSTOMER)||{};if(customer.id){dispatch(updateCustomerDetails(customer));}return executePost(prepareQuery([query])).then(/** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen */middleware(function(_ref){var customer=_ref.customer;dispatch(updateCustomerDetails(customer));BrowserDatabase.setItem(customer,CUSTOMER,ONE_MONTH_IN_SECONDS);},\"Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen\"),/** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError */middleware(function(error){return dispatch(showNotification('error',getErrorMessage(error)));},\"Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError\"));}},{key:\"logout\",value:function logout(){var authTokenExpired=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var dispatch=arguments.length>1?arguments[1]:undefined;if(authTokenExpired){dispatch(showNotification('error',__('Your session is over, you are logged out!')));this.handleForceRedirectToLoginPage();}else{deleteAuthorizationToken();dispatch(showNotification('success',__('You are successfully logged out!')));}deleteGuestQuoteId();BrowserDatabase.deleteItem(ORDERS);BrowserDatabase.deleteItem(CUSTOMER);dispatch(updateCustomerSignInStatus(false));dispatch(updateCustomerDetails({}));// After logout cart, wishlist and compared product list is always empty.\n// There is no need to fetch it from the backend.\nCartDispatcher.then(function(_ref2){var dispatcher=_ref2.default;dispatcher.resetGuestCart(dispatch);dispatcher.createGuestEmptyCart(dispatch);});WishlistDispatcher.then(function(_ref3){var dispatcher=_ref3.default;return dispatcher.resetWishlist(dispatch);});BrowserDatabase.deleteItem(ORDERS);BrowserDatabase.deleteItem(CUSTOMER);removeUid();dispatch(clearComparedProducts());dispatch(updateCustomerDetails({}));}/**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */},{key:\"forgotPassword\",value:function forgotPassword(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var dispatch=arguments.length>1?arguments[1]:undefined;var mutation=MyAccountQuery.getForgotPasswordMutation(options);return fetchMutation(mutation).then(/** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen */middleware(function(){return dispatch(updateCustomerPasswordForgotStatus());},\"Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen\"),/** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError */middleware(function(error){return dispatch(showNotification('error',getErrorMessage(error)));},\"Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError\"));}/**\n     * Reset password action\n     * @param {{token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */},{key:\"resetPassword\",value:function resetPassword(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var dispatch=arguments.length>1?arguments[1]:undefined;var mutation=MyAccountQuery.getResetPasswordMutation(options);return fetchMutation(mutation).then(/** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen */middleware(function(_ref4){var status=_ref4.s_resetPassword.status;return dispatch(updateCustomerPasswordResetStatus(status));},\"Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen\"),/** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationError */middleware(function(errors){return dispatch(updateCustomerPasswordResetStatus('error',getErrorMessage(errors)));},\"Store/MyAccount/Dispatcher/resetPasswordFetchMutationError\"));}/**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */},{key:\"createAccount\",value:function createAccount(){var _this2=this;var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var dispatch=arguments.length>1?arguments[1]:undefined;var email=options.customer.email,password=options.password;var mutation=MyAccountQuery.getCreateAccountMutation(options);dispatch(updateIsLoading(true));return fetchMutation(mutation).then(/** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationThen */middleware(function(data){var customer=data.createCustomer.customer;var confirmation_required=customer.confirmation_required;if(confirmation_required){dispatch(updateIsLoading(false));return 2;}return _this2.signIn({email:email,password:password},dispatch);},\"Store/MyAccount/Dispatcher/createAccountFetchMutationThen\"),/** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationError */middleware(function(error){dispatch(updateIsLoading(false));dispatch(showNotification('error',getErrorMessage(error)));Promise.reject();return false;},\"Store/MyAccount/Dispatcher/createAccountFetchMutationError\"));}/**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */},{key:\"confirmAccount\",value:function confirmAccount(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var dispatch=arguments.length>1?arguments[1]:undefined;var mutation=MyAccountQuery.getConfirmAccountMutation(options);return fetchMutation(mutation).then(/** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen */middleware(function(){return dispatch(showNotification('success',__('Your account is confirmed!')));},\"Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen\"),/** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationError */middleware(function(error){return dispatch(showNotification('error',getErrorMessage(error,__('Something went wrong! Please, try again!'))));},\"Store/MyAccount/Dispatcher/confirmAccountFetchMutationError\"));}/**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */},{key:\"signIn\",value:function(){var _signIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var options,dispatch,mutation,result,token,cartDispatcher,guestCartToken,customerCartToken,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>0&&_args[0]!==undefined?_args[0]:{};dispatch=_args.length>1?_args[1]:undefined;mutation=MyAccountQuery.getSignInMutation(options);_context.next=5;return fetchMutation(mutation);case 5:result=_context.sent;token=result.generateCustomerToken.token;setAuthorizationToken(token);_context.next=10;return CartDispatcher;case 10:cartDispatcher=_context.sent.default;guestCartToken=getGuestQuoteId();// if customer is authorized, `createEmptyCart` mutation returns customer cart token\n_context.next=14;return cartDispatcher.createGuestEmptyCart(dispatch);case 14:customerCartToken=_context.sent;if(!(guestCartToken&&guestCartToken!==customerCartToken)){_context.next=18;break;}_context.next=18;return cartDispatcher.mergeCarts(guestCartToken,customerCartToken,dispatch);case 18:setGuestQuoteId(customerCartToken);cartDispatcher.updateInitialCartData(dispatch);WishlistDispatcher.then(function(_ref5){var dispatcher=_ref5.default;return dispatcher.updateInitialWishlistData(dispatch);});ProductCompareDispatcher.then(function(_ref6){var dispatcher=_ref6.default;return dispatcher.assignCompareList(dispatch);});_context.next=24;return this.requestCustomerData(dispatch);case 24:dispatch(updateCustomerSignInStatus(true));dispatch(updateIsLoading(false));dispatch(hideActiveOverlay());dispatch(showNotification('success',__('You are successfully logged in!')));return _context.abrupt(\"return\",true);case 29:case\"end\":return _context.stop();}}},_callee,this);}));function signIn(){return _signIn.apply(this,arguments);}return signIn;}()},{key:\"handleForceRedirectToLoginPage\",value:function handleForceRedirectToLoginPage(){var _history$location=history.location;_history$location=_history$location===void 0?{}:_history$location;var _history$location$pat=_history$location.pathname,pathname=_history$location$pat===void 0?'':_history$location$pat;var doRedirect=this.forceLogoutRedirectPages.reduce(function(result,urlPart){if(pathname.includes(urlPart)){return true;}return result;},false);if(doRedirect){history.push({pathname:'/account/login'});}}},{key:\"handleCustomerDataOnInit\",value:function handleCustomerDataOnInit(dispatch){if(isSignedIn()){return;}BrowserDatabase.deleteItem(ORDERS);BrowserDatabase.deleteItem(CUSTOMER);CartDispatcher.then(function(_ref7){var dispatcher=_ref7.default;return dispatcher.resetGuestCart(dispatch);});}}]);return _MyAccountDispatcher;}(Extensible());Object.defineProperty(_MyAccountDispatcher,'name',{value:'MyAccountDispatcher'});export var MyAccountDispatcher=middleware(_MyAccountDispatcher,\"Store/MyAccount/Dispatcher\");export default new MyAccountDispatcher();","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.dispatcher.js"],"names":["CHECKOUT","MY_ACCOUNT","MyAccountQuery","updateCustomerDetails","updateCustomerPasswordForgotStatus","updateCustomerPasswordResetStatus","updateCustomerSignInStatus","updateIsLoading","showNotification","ORDERS","hideActiveOverlay","clearComparedProducts","deleteAuthorizationToken","isSignedIn","setAuthorizationToken","BrowserDatabase","deleteGuestQuoteId","getGuestQuoteId","setGuestQuoteId","removeUid","history","prepareQuery","executePost","fetchMutation","getErrorMessage","CartDispatcher","WishlistDispatcher","ProductCompareDispatcher","CUSTOMER","ONE_MONTH_IN_SECONDS","MyAccountDispatcher","forceLogoutRedirectPages","dispatch","query","getCustomerQuery","customer","getItem","id","then","setItem","error","authTokenExpired","__","handleForceRedirectToLoginPage","deleteItem","dispatcher","default","resetGuestCart","createGuestEmptyCart","resetWishlist","options","mutation","getForgotPasswordMutation","getResetPasswordMutation","status","s_resetPassword","errors","email","password","getCreateAccountMutation","data","createCustomer","confirmation_required","signIn","Promise","reject","getConfirmAccountMutation","getSignInMutation","result","token","generateCustomerToken","cartDispatcher","guestCartToken","customerCartToken","mergeCarts","updateInitialCartData","updateInitialWishlistData","assignCompareList","requestCustomerData","location","pathname","doRedirect","reduce","urlPart","includes","push","Object","defineProperty","_MyAccountDispatcher","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { CHECKOUT, MY_ACCOUNT } from 'Component/Header/Header.config';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport {\n    updateCustomerDetails,\n    updateCustomerPasswordForgotStatus,\n    updateCustomerPasswordResetStatus,\n    updateCustomerSignInStatus,\n    updateIsLoading\n} from 'Store/MyAccount/MyAccount.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { ORDERS } from 'Store/Order/Order.reducer';\nimport { hideActiveOverlay } from 'Store/Overlay/Overlay.action';\nimport { clearComparedProducts } from 'Store/ProductCompare/ProductCompare.action';\nimport {\n    deleteAuthorizationToken,\n    isSignedIn,\n    setAuthorizationToken\n} from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteGuestQuoteId, getGuestQuoteId, setGuestQuoteId } from 'Util/Cart';\nimport { removeUid } from 'Util/Compare';\nimport history from 'Util/History';\nimport { prepareQuery } from 'Util/Query';\nimport { executePost, fetchMutation, getErrorMessage } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\nexport const WishlistDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Wishlist/Wishlist.dispatcher'\n);\n\nexport const ProductCompareDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductCompare/ProductCompare.dispatcher'\n);\n\nexport const CUSTOMER = 'customer';\n\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n\n/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */\nexport class MyAccountDispatcher {\n    forceLogoutRedirectPages = [\n        CHECKOUT,\n        MY_ACCOUNT\n    ];\n\n    requestCustomerData(dispatch) {\n        const query = MyAccountQuery.getCustomerQuery();\n\n        const customer = BrowserDatabase.getItem(CUSTOMER) || {};\n        if (customer.id) {\n            dispatch(updateCustomerDetails(customer));\n        }\n\n        return executePost(prepareQuery([query])).then(\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen */\n            ({ customer }) => {\n                dispatch(updateCustomerDetails(customer));\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            },\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    logout(authTokenExpired = false, dispatch) {\n        if (authTokenExpired) {\n            dispatch(showNotification('error', __('Your session is over, you are logged out!')));\n            this.handleForceRedirectToLoginPage();\n        } else {\n            deleteAuthorizationToken();\n            dispatch(showNotification('success', __('You are successfully logged out!')));\n        }\n\n        deleteGuestQuoteId();\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n\n        dispatch(updateCustomerSignInStatus(false));\n        dispatch(updateCustomerDetails({}));\n\n        // After logout cart, wishlist and compared product list is always empty.\n        // There is no need to fetch it from the backend.\n        CartDispatcher.then(\n            ({ default: dispatcher }) => {\n                dispatcher.resetGuestCart(dispatch);\n                dispatcher.createGuestEmptyCart(dispatch);\n            }\n        );\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetWishlist(dispatch)\n        );\n\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n        removeUid();\n        dispatch(clearComparedProducts());\n        dispatch(updateCustomerDetails({}));\n    }\n\n    /**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    forgotPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen */\n            () => dispatch(updateCustomerPasswordForgotStatus()),\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    /**\n     * Reset password action\n     * @param {{token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    resetPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResetPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen */\n            ({ s_resetPassword: { status } }) => dispatch(updateCustomerPasswordResetStatus(status)),\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationError */\n            (errors) => dispatch(updateCustomerPasswordResetStatus('error', getErrorMessage(errors)))\n        );\n    }\n\n    /**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    createAccount(options = {}, dispatch) {\n        const { customer: { email }, password } = options;\n        const mutation = MyAccountQuery.getCreateAccountMutation(options);\n        dispatch(updateIsLoading(true));\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationThen */\n            (data) => {\n                const { createCustomer: { customer } } = data;\n                const { confirmation_required } = customer;\n\n                if (confirmation_required) {\n                    dispatch(updateIsLoading(false));\n                    return 2;\n                }\n\n                return this.signIn({ email, password }, dispatch);\n            },\n\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationError */\n            (error) => {\n                dispatch(updateIsLoading(false));\n                dispatch(showNotification('error', getErrorMessage(error)));\n                Promise.reject();\n\n                return false;\n            }\n        );\n    }\n\n    /**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    confirmAccount(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen */\n            () => dispatch(showNotification('success', __('Your account is confirmed!'))),\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationError */\n            (error) => dispatch(\n                showNotification(\n                    'error',\n                    getErrorMessage(error, __('Something went wrong! Please, try again!'))\n                )\n            )\n        );\n    }\n\n    /**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async signIn(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getSignInMutation(options);\n\n        const result = await fetchMutation(mutation);\n        const { generateCustomerToken: { token } } = result;\n\n        setAuthorizationToken(token);\n\n        const cartDispatcher = (await CartDispatcher).default;\n        const guestCartToken = getGuestQuoteId();\n        // if customer is authorized, `createEmptyCart` mutation returns customer cart token\n        const customerCartToken = await cartDispatcher.createGuestEmptyCart(dispatch);\n\n        if (guestCartToken && guestCartToken !== customerCartToken) {\n            // merge guest cart id and customer cart id using magento capabilities\n            await cartDispatcher.mergeCarts(guestCartToken, customerCartToken, dispatch);\n        }\n\n        setGuestQuoteId(customerCartToken);\n        cartDispatcher.updateInitialCartData(dispatch);\n\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n        );\n\n        ProductCompareDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.assignCompareList(dispatch)\n        );\n\n        await this.requestCustomerData(dispatch);\n\n        dispatch(updateCustomerSignInStatus(true));\n        dispatch(updateIsLoading(false));\n        dispatch(hideActiveOverlay());\n        dispatch(showNotification('success', __('You are successfully logged in!')));\n\n        return true;\n    }\n\n    handleForceRedirectToLoginPage() {\n        const { location: { pathname = '' } = {} } = history;\n        const doRedirect = this.forceLogoutRedirectPages.reduce((result, urlPart) => {\n            if (pathname.includes(urlPart)) {\n                return true;\n            }\n\n            return result;\n        }, false);\n\n        if (doRedirect) {\n            history.push({ pathname: '/account/login' });\n        }\n    }\n\n    handleCustomerDataOnInit(dispatch) {\n        if (isSignedIn()) {\n            return;\n        }\n\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n        CartDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetGuestCart(dispatch)\n        );\n    }\n}\n\nexport default new MyAccountDispatcher();\n"]},"metadata":{},"sourceType":"module"}