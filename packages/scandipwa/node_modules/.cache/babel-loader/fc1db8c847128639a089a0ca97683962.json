{"ast":null,"code":"var HTMLDOMPropertyConfig=require(\"./lib/HTMLDOMPropertyConfig\");var SVGDOMPropertyConfig=require(\"./lib/SVGDOMPropertyConfig\");var injection=require(\"./lib/injection\");var MUST_USE_PROPERTY=injection.MUST_USE_PROPERTY;var HAS_BOOLEAN_VALUE=injection.HAS_BOOLEAN_VALUE;var HAS_NUMERIC_VALUE=injection.HAS_NUMERIC_VALUE;var HAS_POSITIVE_NUMERIC_VALUE=injection.HAS_POSITIVE_NUMERIC_VALUE;var HAS_OVERLOADED_BOOLEAN_VALUE=injection.HAS_OVERLOADED_BOOLEAN_VALUE;/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */function checkMask(value,bitmask){return(value&bitmask)===bitmask;}/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */function injectDOMPropertyConfig(domPropertyConfig,config,isSVG){var Properties=domPropertyConfig.Properties;var DOMAttributeNames=domPropertyConfig.DOMAttributeNames;var attributeName;var propertyName;var propConfig;for(propertyName in Properties){attributeName=DOMAttributeNames[propertyName]||(isSVG?propertyName:propertyName.toLowerCase());propConfig=Properties[propertyName];config[attributeName]={attributeName:attributeName,propertyName:propertyName,mustUseProperty:checkMask(propConfig,MUST_USE_PROPERTY),hasBooleanValue:checkMask(propConfig,HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(propConfig,HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(propConfig,HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(propConfig,HAS_OVERLOADED_BOOLEAN_VALUE)};}}/**\n * HTML properties config.\n *\n * @type {Object}\n */var html={};injectDOMPropertyConfig(HTMLDOMPropertyConfig,html);/**\n * SVG properties config.\n *\n * @type {Object}\n */var svg={};injectDOMPropertyConfig(SVGDOMPropertyConfig,svg,true);/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */var properties={};injectDOMPropertyConfig(HTMLDOMPropertyConfig,properties);injectDOMPropertyConfig(SVGDOMPropertyConfig,properties,true);var ATTRIBUTE_NAME_START_CHAR=\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+\"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";module.exports={html:html,svg:svg,properties:properties,/**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */isCustomAttribute:RegExp.prototype.test.bind(new RegExp('^(data|aria)-['+ATTRIBUTE_NAME_CHAR+']*$'))};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/react-property/index.js"],"names":["HTMLDOMPropertyConfig","require","SVGDOMPropertyConfig","injection","MUST_USE_PROPERTY","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","checkMask","value","bitmask","injectDOMPropertyConfig","domPropertyConfig","config","isSVG","Properties","DOMAttributeNames","attributeName","propertyName","propConfig","toLowerCase","mustUseProperty","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","html","svg","properties","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","module","exports","isCustomAttribute","RegExp","prototype","test","bind"],"mappings":"AAAA,GAAIA,CAAAA,qBAAqB,CAAGC,OAAO,+BAAnC,CACA,GAAIC,CAAAA,oBAAoB,CAAGD,OAAO,8BAAlC,CACA,GAAIE,CAAAA,SAAS,CAAGF,OAAO,mBAAvB,CAEA,GAAIG,CAAAA,iBAAiB,CAAGD,SAAS,CAACC,iBAAlC,CACA,GAAIC,CAAAA,iBAAiB,CAAGF,SAAS,CAACE,iBAAlC,CACA,GAAIC,CAAAA,iBAAiB,CAAGH,SAAS,CAACG,iBAAlC,CACA,GAAIC,CAAAA,0BAA0B,CAAGJ,SAAS,CAACI,0BAA3C,CACA,GAAIC,CAAAA,4BAA4B,CAAGL,SAAS,CAACK,4BAA7C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0BC,OAA1B,CAAmC,CACjC,MAAO,CAACD,KAAK,CAAGC,OAAT,IAAsBA,OAA7B,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,uBAAT,CAAiCC,iBAAjC,CAAoDC,MAApD,CAA4DC,KAA5D,CAAmE,CACjE,GAAIC,CAAAA,UAAU,CAAGH,iBAAiB,CAACG,UAAnC,CACA,GAAIC,CAAAA,iBAAiB,CAAGJ,iBAAiB,CAACI,iBAA1C,CACA,GAAIC,CAAAA,aAAJ,CACA,GAAIC,CAAAA,YAAJ,CACA,GAAIC,CAAAA,UAAJ,CAEA,IAAKD,YAAL,GAAqBH,CAAAA,UAArB,CAAiC,CAC/BE,aAAa,CACXD,iBAAiB,CAACE,YAAD,CAAjB,GACCJ,KAAK,CAAGI,YAAH,CAAkBA,YAAY,CAACE,WAAb,EADxB,CADF,CAGAD,UAAU,CAAGJ,UAAU,CAACG,YAAD,CAAvB,CAEAL,MAAM,CAACI,aAAD,CAAN,CAAwB,CACtBA,aAAa,CAAEA,aADO,CAEtBC,YAAY,CAAEA,YAFQ,CAGtBG,eAAe,CAAEb,SAAS,CAACW,UAAD,CAAahB,iBAAb,CAHJ,CAItBmB,eAAe,CAAEd,SAAS,CAACW,UAAD,CAAaf,iBAAb,CAJJ,CAKtBmB,eAAe,CAAEf,SAAS,CAACW,UAAD,CAAad,iBAAb,CALJ,CAMtBmB,uBAAuB,CAAEhB,SAAS,CAChCW,UADgC,CAEhCb,0BAFgC,CANZ,CAUtBmB,yBAAyB,CAAEjB,SAAS,CAClCW,UADkC,CAElCZ,4BAFkC,CAVd,CAAxB,CAeD,CACF,CAED;AACA;AACA;AACA;AACA,GACA,GAAImB,CAAAA,IAAI,CAAG,EAAX,CACAf,uBAAuB,CAACZ,qBAAD,CAAwB2B,IAAxB,CAAvB,CAEA;AACA;AACA;AACA;AACA,GACA,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACAhB,uBAAuB,CAACV,oBAAD,CAAuB0B,GAAvB,CAA4B,IAA5B,CAAvB,CAEA;AACA;AACA;AACA;AACA,GACA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACAjB,uBAAuB,CAACZ,qBAAD,CAAwB6B,UAAxB,CAAvB,CACAjB,uBAAuB,CAACV,oBAAD,CAAuB2B,UAAvB,CAAmC,IAAnC,CAAvB,CAEA,GAAIC,CAAAA,yBAAyB,CAC3B,+KADF,CAEA,GAAIC,CAAAA,mBAAmB,CACrBD,yBAAyB,CAAG,8CAD9B,CAGAE,MAAM,CAACC,OAAP,CAAiB,CACfN,IAAI,CAAEA,IADS,CAEfC,GAAG,CAAEA,GAFU,CAGfC,UAAU,CAAEA,UAHG,CAKf;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACEK,iBAAiB,CAAEC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBC,IAAtB,CACjB,GAAIH,CAAAA,MAAJ,CAAW,iBAAmBJ,mBAAnB,CAAyC,KAApD,CADiB,CAbJ,CAAjB","sourcesContent":["var HTMLDOMPropertyConfig = require('./lib/HTMLDOMPropertyConfig');\nvar SVGDOMPropertyConfig = require('./lib/SVGDOMPropertyConfig');\nvar injection = require('./lib/injection');\n\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */\nfunction injectDOMPropertyConfig(domPropertyConfig, config, isSVG) {\n  var Properties = domPropertyConfig.Properties;\n  var DOMAttributeNames = domPropertyConfig.DOMAttributeNames;\n  var attributeName;\n  var propertyName;\n  var propConfig;\n\n  for (propertyName in Properties) {\n    attributeName =\n      DOMAttributeNames[propertyName] ||\n      (isSVG ? propertyName : propertyName.toLowerCase());\n    propConfig = Properties[propertyName];\n\n    config[attributeName] = {\n      attributeName: attributeName,\n      propertyName: propertyName,\n      mustUseProperty: checkMask(propConfig, MUST_USE_PROPERTY),\n      hasBooleanValue: checkMask(propConfig, HAS_BOOLEAN_VALUE),\n      hasNumericValue: checkMask(propConfig, HAS_NUMERIC_VALUE),\n      hasPositiveNumericValue: checkMask(\n        propConfig,\n        HAS_POSITIVE_NUMERIC_VALUE\n      ),\n      hasOverloadedBooleanValue: checkMask(\n        propConfig,\n        HAS_OVERLOADED_BOOLEAN_VALUE\n      )\n    };\n  }\n}\n\n/**\n * HTML properties config.\n *\n * @type {Object}\n */\nvar html = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, html);\n\n/**\n * SVG properties config.\n *\n * @type {Object}\n */\nvar svg = {};\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, svg, true);\n\n/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */\nvar properties = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, properties);\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, properties, true);\n\nvar ATTRIBUTE_NAME_START_CHAR =\n  ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nvar ATTRIBUTE_NAME_CHAR =\n  ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\n\nmodule.exports = {\n  html: html,\n  svg: svg,\n  properties: properties,\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */\n  isCustomAttribute: RegExp.prototype.test.bind(\n    new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')\n  )\n};\n"]},"metadata":{},"sourceType":"module"}