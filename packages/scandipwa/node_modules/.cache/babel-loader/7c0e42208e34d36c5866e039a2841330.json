{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport CartQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/Cart.query\";\nimport ConfigQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/Config.query\";\nimport RegionQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/Region.query\";\nimport ReviewQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/Review.query\";\nimport { updateConfig } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Config/Config.action\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport BrowserDatabase from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/BrowserDatabase\";\nimport { setCurrency } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Currency\";\nimport { fetchMutation, QueryDispatcher } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request\";\nimport { ONE_MONTH_IN_SECONDS } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request/QueryDispatcher\";\n/** @namespace Store/Config/Dispatcher */\n\nexport class _ConfigDispatcher extends Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('Config');\n  }\n\n  static updateCurrency(dispatch, options) {\n    const {\n      currencyCode\n    } = options;\n    return fetchMutation(ConfigQuery.getSaveSelectedCurrencyMutation(currencyCode)).then(setCurrency(currencyCode), dispatch(updateConfig()));\n  }\n\n  onSuccess(data, dispatch) {\n    if (data) {\n      BrowserDatabase.setItem(data, 'config', ONE_MONTH_IN_SECONDS);\n      dispatch(updateConfig(data));\n    }\n  }\n\n  onError(error, dispatch) {\n    dispatch(showNotification('error', __('Error fetching Config!'), error));\n  }\n\n  prepareRequest() {\n    return [RegionQuery.getCountriesQuery(), ReviewQuery.getRatingQuery(), ConfigQuery.getQuery(), ConfigQuery.getCheckoutAgreements(), ConfigQuery.getCurrencyData(), CartQuery.getCartDisplayConfig()];\n  }\n\n}\nObject.defineProperty(_ConfigDispatcher, 'name', {\n  value: 'ConfigDispatcher'\n});\n\nexport const ConfigDispatcher = middleware(_ConfigDispatcher, \"Store/Config/Dispatcher\");\nexport default new ConfigDispatcher();","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/store/Config/Config.dispatcher.js"],"names":["CartQuery","ConfigQuery","RegionQuery","ReviewQuery","updateConfig","showNotification","BrowserDatabase","setCurrency","fetchMutation","QueryDispatcher","ONE_MONTH_IN_SECONDS","ConfigDispatcher","__construct","updateCurrency","dispatch","options","currencyCode","getSaveSelectedCurrencyMutation","then","onSuccess","data","setItem","onError","error","__","prepareRequest","getCountriesQuery","getRatingQuery","getQuery","getCheckoutAgreements","getCurrencyData","getCartDisplayConfig","Object","defineProperty","_ConfigDispatcher","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,SAASC,YAAT;AACA,SAASC,gBAAT;AACA,OAAOC,eAAP;AACA,SAASC,WAAT;AACA,SAASC,aAAT,EAAwBC,eAAxB;AACA,SAASC,oBAAT;AAEA;;AACA,OAAO,MAAMC,iBAAN,qCAA+C;AAClDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,QAAlB;AACH;;AAEoB,SAAdC,cAAc,CAACC,QAAD,EAAWC,OAAX,EAAoB;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAmBD,OAAzB;AAEA,WAAOP,aAAa,CAACP,WAAW,CAACgB,+BAAZ,CACjBD,YADiB,CAAD,CAAb,CAEJE,IAFI,CAGHX,WAAW,CAACS,YAAD,CAHR,EAIHF,QAAQ,CAACV,YAAY,EAAb,CAJL,CAAP;AAMH;;AAEDe,EAAAA,SAAS,CAACC,IAAD,EAAON,QAAP,EAAiB;AACtB,QAAIM,IAAJ,EAAU;AACNd,MAAAA,eAAe,CAACe,OAAhB,CAAwBD,IAAxB,EAA8B,QAA9B,EAAwCV,oBAAxC;AACAI,MAAAA,QAAQ,CAACV,YAAY,CAACgB,IAAD,CAAb,CAAR;AACH;AACJ;;AAEDE,EAAAA,OAAO,CAACC,KAAD,EAAQT,QAAR,EAAkB;AACrBA,IAAAA,QAAQ,CAACT,gBAAgB,CAAC,OAAD,EAAUmB,EAAE,CAAC,wBAAD,CAAZ,EAAwCD,KAAxC,CAAjB,CAAR;AACH;;AAEDE,EAAAA,cAAc,GAAG;AACb,WAAO,CACHvB,WAAW,CAACwB,iBAAZ,EADG,EAEHvB,WAAW,CAACwB,cAAZ,EAFG,EAGH1B,WAAW,CAAC2B,QAAZ,EAHG,EAIH3B,WAAW,CAAC4B,qBAAZ,EAJG,EAKH5B,WAAW,CAAC6B,eAAZ,EALG,EAMH9B,SAAS,CAAC+B,oBAAV,EANG,CAAP;AAQH;;AApCiD;AAvBtDC,MAAM,CAACC,cAAP,CAAsBC,iBAAtB,EAAyC,MAAzC,EAAiD;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAjD;;;AA8DA,eAAe,IAAIxB,gBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport CartQuery from 'Query/Cart.query';\nimport ConfigQuery from 'Query/Config.query';\nimport RegionQuery from 'Query/Region.query';\nimport ReviewQuery from 'Query/Review.query';\nimport { updateConfig } from 'Store/Config/Config.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { setCurrency } from 'Util/Currency';\nimport { fetchMutation, QueryDispatcher } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\n/** @namespace Store/Config/Dispatcher */\nexport class ConfigDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Config');\n    }\n\n    static updateCurrency(dispatch, options) {\n        const { currencyCode } = options;\n\n        return fetchMutation(ConfigQuery.getSaveSelectedCurrencyMutation(\n            currencyCode\n        )).then(\n            setCurrency(currencyCode),\n            dispatch(updateConfig())\n        );\n    }\n\n    onSuccess(data, dispatch) {\n        if (data) {\n            BrowserDatabase.setItem(data, 'config', ONE_MONTH_IN_SECONDS);\n            dispatch(updateConfig(data));\n        }\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Config!'), error));\n    }\n\n    prepareRequest() {\n        return [\n            RegionQuery.getCountriesQuery(),\n            ReviewQuery.getRatingQuery(),\n            ConfigQuery.getQuery(),\n            ConfigQuery.getCheckoutAgreements(),\n            ConfigQuery.getCurrencyData(),\n            CartQuery.getCartDisplayConfig()\n        ];\n    }\n}\n\nexport default new ConfigDispatcher();\n"]},"metadata":{},"sourceType":"module"}