{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component\\\\Notification\\\\Notification.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\nimport { NotificationType } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\type/NotificationList\";\nimport CSS from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/CSS\";\nimport { ANIMATION_DURATION, ERROR_NOTIFICATION_LIFETIME, ERROR_TYPE, NOTIFICATION_LIFETIME } from \"./Notification.config\";\nimport \"./Notification.style\";\n/**\n * Notification block\n * @class Notification\n * @namespace Component/Notification/Component\n */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _Notification extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      isNotificationVisible: true\n    };\n    this.notification = /*#__PURE__*/createRef();\n\n    this.hideNotification = function () {\n      const {\n        onHideNotification,\n        notificationId\n      } = _this.props;\n\n      _this.setState({\n        isNotificationVisible: false\n      }); // give CSS time to animate\n\n\n      _this.CSSHideTimeout = setTimeout(function () {\n        onHideNotification(notificationId);\n      }, ANIMATION_DURATION);\n    };\n  }\n\n  componentDidMount() {\n    var _this2 = this;\n\n    const {\n      notification: {\n        msgType\n      }\n    } = this.props; // Make sure error notification stays a little longer\n\n    if (msgType.toLowerCase() === ERROR_TYPE) {\n      this.hideTimeout = setTimeout(function () {\n        return _this2.hideNotification();\n      }, ERROR_NOTIFICATION_LIFETIME);\n    } else {\n      this.hideTimeout = setTimeout(function () {\n        return _this2.hideNotification();\n      }, NOTIFICATION_LIFETIME);\n    }\n\n    CSS.setVariable(this.notification, 'animation-duration', `${ANIMATION_DURATION}ms`);\n  }\n\n  componentWillUnmount() {\n    // clear started timeouts, to assure we are not changing state of unmounted component\n    clearTimeout(this.hideTimeout);\n    clearTimeout(this.CSSHideTimeout);\n  }\n  /**\n   * Remove notification from screen\n   * @return {void\n   */\n\n\n  renderDebug() {\n    const {\n      notification: {\n        msgDebug\n      }\n    } = this.props;\n\n    if (!msgDebug) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return null;\n    } // eslint-disable-next-line no-console\n\n\n    console.warn(msgDebug); // so we know what was in notification\n\n    return /*#__PURE__*/_checkBEM(React, \"pre\", {\n      block: \"Notification\",\n      elem: \"Debug\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, JSON.stringify(msgDebug));\n  }\n\n  render() {\n    const {\n      notification\n    } = this.props;\n    const {\n      isNotificationVisible\n    } = this.state;\n    const {\n      msgText,\n      msgType\n    } = notification;\n    const mods = {\n      type: msgType.toLowerCase(),\n      is: isNotificationVisible ? 'opening' : 'closing'\n    };\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Notification\",\n      mods: mods,\n      ref: this.notification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"Notification\",\n      elem: \"Button\",\n      onClick: this.hideNotification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"Close\"), /*#__PURE__*/_checkBEM(React, \"p\", {\n      block: \"Notification\",\n      elem: \"Text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, msgText), this.renderDebug());\n  }\n\n}\n_Notification.propTypes = {\n  notificationId: PropTypes.string.isRequired,\n  notification: NotificationType.isRequired,\n  onHideNotification: PropTypes.func.isRequired\n};\nObject.defineProperty(_Notification, 'name', {\n  value: 'Notification'\n});\n\nexport const Notification = middleware(_Notification, \"Component/Notification/Component\");\nexport default Notification;","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/packages/scandipwa/src/component/Notification/Notification.component.js"],"names":["PropTypes","createRef","PureComponent","NotificationType","CSS","ANIMATION_DURATION","ERROR_NOTIFICATION_LIFETIME","ERROR_TYPE","NOTIFICATION_LIFETIME","Notification","state","isNotificationVisible","notification","hideNotification","onHideNotification","notificationId","props","setState","CSSHideTimeout","setTimeout","componentDidMount","msgType","toLowerCase","hideTimeout","setVariable","componentWillUnmount","clearTimeout","renderDebug","msgDebug","process","env","NODE_ENV","console","warn","JSON","stringify","render","msgText","mods","type","is","propTypes","string","isRequired","func","Object","defineProperty","_Notification","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport { NotificationType } from 'Type/NotificationList';\nimport CSS from 'Util/CSS';\n\nimport {\n    ANIMATION_DURATION, ERROR_NOTIFICATION_LIFETIME, ERROR_TYPE, NOTIFICATION_LIFETIME\n} from './Notification.config';\n\nimport './Notification.style';\n\n/**\n * Notification block\n * @class Notification\n * @namespace Component/Notification/Component\n */\nexport class Notification extends PureComponent {\n    static propTypes = {\n        notificationId: PropTypes.string.isRequired,\n        notification: NotificationType.isRequired,\n        onHideNotification: PropTypes.func.isRequired\n    };\n\n    state = { isNotificationVisible: true };\n\n    notification = createRef();\n\n    componentDidMount() {\n        const { notification: { msgType } } = this.props;\n\n        // Make sure error notification stays a little longer\n        if (msgType.toLowerCase() === ERROR_TYPE) {\n            this.hideTimeout = setTimeout(() => this.hideNotification(), ERROR_NOTIFICATION_LIFETIME);\n        } else {\n            this.hideTimeout = setTimeout(() => this.hideNotification(), NOTIFICATION_LIFETIME);\n        }\n\n        CSS.setVariable(this.notification, 'animation-duration', `${ANIMATION_DURATION}ms`);\n    }\n\n    componentWillUnmount() {\n        // clear started timeouts, to assure we are not changing state of unmounted component\n        clearTimeout(this.hideTimeout);\n        clearTimeout(this.CSSHideTimeout);\n    }\n\n    /**\n     * Remove notification from screen\n     * @return {void\n     */\n    hideNotification = () => {\n        const { onHideNotification, notificationId } = this.props;\n        this.setState({ isNotificationVisible: false });\n\n        // give CSS time to animate\n        this.CSSHideTimeout = setTimeout(() => {\n            onHideNotification(notificationId);\n        }, ANIMATION_DURATION);\n    };\n\n    renderDebug() {\n        const { notification: { msgDebug } } = this.props;\n\n        if (!msgDebug) {\n            return null;\n        }\n\n        if (process.env.NODE_ENV === 'production') {\n            return null;\n        }\n\n        // eslint-disable-next-line no-console\n        console.warn(msgDebug); // so we know what was in notification\n\n        return (\n            <pre block=\"Notification\" elem=\"Debug\">\n                { JSON.stringify(msgDebug) }\n            </pre>\n        );\n    }\n\n    render() {\n        const { notification } = this.props;\n        const { isNotificationVisible } = this.state;\n        const { msgText, msgType } = notification;\n\n        const mods = {\n            type: msgType.toLowerCase(),\n            is: isNotificationVisible ? 'opening' : 'closing'\n        };\n\n        return (\n            <div block=\"Notification\" mods={ mods } ref={ this.notification }>\n                <button block=\"Notification\" elem=\"Button\" onClick={ this.hideNotification }>Close</button>\n                <p block=\"Notification\" elem=\"Text\">{ msgText }</p>\n                { this.renderDebug() }\n            </div>\n        );\n    }\n}\n\nexport default Notification;\n"]},"metadata":{},"sourceType":"module"}