{"ast":null,"code":"import _asyncToGenerator from \"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/component/Form/Form.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { Children, cloneElement, createRef, PureComponent } from 'react';\nimport { FieldContainer } from \"/home/marketihor/scandipwa/packages/scandipwa/src/component/Field/Field.container\";\nimport { ChildrenType, MixType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Common\";\nimport FormPortalCollector from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/FormPortalCollector\";\nimport validationConfig from \"./Form.config\";\n/** @namespace Component/Form/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _Form extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.handleFormSubmit = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (e) {\n        const {\n          onSubmitSuccess,\n          onSubmitError,\n          onSubmit,\n          id\n        } = _this.props;\n        e.preventDefault();\n        onSubmit();\n        const portalData = id ? yield window.formPortalCollector.collect(id) : [];\n        const {\n          invalidFields,\n          inputValues\n        } = portalData.reduce(function (acc, portalData) {\n          const {\n            invalidFields = [],\n            inputValues = {}\n          } = portalData;\n          const {\n            invalidFields: initialInvalidFields,\n            inputValues: initialInputValues\n          } = acc;\n          return {\n            invalidFields: [...initialInvalidFields, ...invalidFields],\n            inputValues: { ...initialInputValues,\n              ...inputValues\n            }\n          };\n        }, _this.collectFieldsInformation());\n        const asyncData = Promise.all(portalData.reduce(function (acc, {\n          asyncData\n        }) {\n          if (!asyncData) {\n            return acc;\n          }\n\n          return [...acc, asyncData];\n        }, []));\n        asyncData.then(\n        /** @namespace Component/Form/Component/handleFormSubmitAsyncDataThen */\n        middleware(function (asyncDataList) {\n          if (!invalidFields.length) {\n            onSubmitSuccess(inputValues, asyncDataList);\n            return;\n          }\n\n          onSubmitError(inputValues, invalidFields);\n        }, \"Component/Form/Component/handleFormSubmitAsyncDataThen\"),\n        /** @namespace Component/Form/Component/handleFormSubmitAsyncDataCatch */\n        middleware(function (e) {\n          return onSubmitError(inputValues, invalidFields, e);\n        }, \"Component/Form/Component/handleFormSubmitAsyncDataCatch\"));\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.collectFieldsInformation = function () {\n      const {\n        refMap\n      } = _this.state;\n      const {\n        children: propsChildren\n      } = _this.props;\n      const {\n        children,\n        fieldsAreValid,\n        invalidFields\n      } = Form.cloneAndValidateChildren(propsChildren, refMap);\n\n      _this.setState({\n        children,\n        fieldsAreValid\n      });\n\n      const inputValues = Object.values(refMap).reduce(function (inputValues, input) {\n        const {\n          current\n        } = input;\n\n        if (current && current.id && current.value) {\n          const {\n            name,\n            value,\n            checked\n          } = current;\n\n          if (current.dataset.skipValue === 'true') {\n            return inputValues;\n          }\n\n          if (current.type === 'checkbox') {\n            const boolValue = checked;\n            return { ...inputValues,\n              [name]: boolValue\n            };\n          }\n\n          return { ...inputValues,\n            [name]: value\n          };\n        }\n\n        return inputValues;\n      }, {});\n\n      if (invalidFields.length) {\n        const {\n          current\n        } = refMap[invalidFields[0]];\n        current.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n\n      return {\n        inputValues,\n        invalidFields\n      };\n    };\n  }\n\n  static updateChildrenRefs(props, state = {}) {\n    const {\n      children: propsChildren\n    } = props;\n    const {\n      refMap: refMapState = {}\n    } = state;\n    const refMap = {};\n    const children = Form.cloneChildren(propsChildren, function (child) {\n      const {\n        props: {\n          name\n        }\n      } = child;\n      const {\n        message\n      } = Object.keys(refMapState).length ? Form.validateField(child, refMapState) : {};\n      refMap[name] = /*#__PURE__*/createRef();\n      const childProps = {\n        formRef: refMap[name],\n        formRefMap: refMap\n      };\n\n      if (message) {\n        childProps.message = message;\n      }\n\n      return /*#__PURE__*/cloneElement(child, childProps);\n    });\n    return {\n      children,\n      refMap\n    };\n  }\n\n  static cloneChildren(originChildren, fieldCallback) {\n    const executeClone = function (originChildren) {\n      return Children.map(originChildren, function (child) {\n        if (child && typeof child === 'object' && child.type && child.props) {\n          const {\n            type: {\n              name\n            },\n            props,\n            props: {\n              children\n            }\n          } = child;\n\n          if (name === FieldContainer.prototype.constructor.name) {\n            return fieldCallback(child);\n          }\n\n          if (typeof children === 'object') {\n            return /*#__PURE__*/cloneElement(child, { ...props,\n              children: executeClone(children)\n            });\n          }\n\n          return child;\n        }\n\n        return child;\n      });\n    };\n\n    return executeClone(originChildren);\n  }\n\n  static cloneAndValidateChildren(propsChildren, refMap) {\n    const invalidFields = [];\n    const children = Form.cloneChildren(propsChildren, function (child) {\n      const {\n        props: {\n          id,\n          name\n        }\n      } = child;\n      const {\n        message\n      } = Form.validateField(child, refMap);\n\n      if (message) {\n        invalidFields.push(id);\n        return /*#__PURE__*/cloneElement(child, {\n          message,\n          formRef: refMap[name]\n        });\n      }\n\n      return /*#__PURE__*/cloneElement(child, {\n        formRef: refMap[name]\n      });\n    });\n    return {\n      children,\n      fieldsAreValid: !invalidFields.length,\n      invalidFields\n    };\n  }\n\n  static validateField(field, refMap) {\n    const {\n      validation,\n      id,\n      name\n    } = field.props;\n\n    if (validation && id && refMap[name] && refMap[name].current) {\n      const {\n        current: inputNode\n      } = refMap[name];\n      const rule = validation.find(function (rule) {\n        if (!validationConfig[rule]) {\n          return false;\n        }\n\n        const validationRules = validationConfig[rule];\n        const isValid = validationRules.validate(inputNode, refMap);\n        return !isValid;\n      });\n\n      if (rule) {\n        return validationConfig[rule];\n      }\n    }\n\n    return {};\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    if (!window.formPortalCollector) {\n      window.formPortalCollector = new FormPortalCollector();\n    }\n\n    this.state = { ...Form.updateChildrenRefs(props),\n      fieldsAreValid: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      refMap\n    } = state;\n    const {\n      children\n    } = props;\n    return { ...Form.cloneAndValidateChildren(children, refMap),\n      ...Form.updateChildrenRefs(props, state)\n    };\n  }\n\n  render() {\n    var _this2 = this;\n\n    const {\n      mix,\n      id\n    } = this.props;\n    const {\n      children,\n      fieldsAreValid\n    } = this.state;\n    return /*#__PURE__*/_checkBEM(React, \"form\", {\n      block: \"Form\",\n      mix: mix,\n      mods: {\n        isInvalid: !fieldsAreValid\n      },\n      ref: function (ref) {\n        _this2.form = ref;\n      },\n      id: id,\n      onSubmit: this.handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }, children);\n  }\n\n}\n_Form.propTypes = {\n  onSubmitSuccess: PropTypes.func,\n  onSubmitError: PropTypes.func,\n  onSubmit: PropTypes.func,\n  children: ChildrenType.isRequired,\n  id: PropTypes.string,\n  mix: MixType\n};\n_Form.defaultProps = {\n  onSubmitSuccess: function () {},\n  onSubmitError: function () {},\n  onSubmit: function () {},\n  mix: {},\n  id: ''\n};\nObject.defineProperty(_Form, 'name', {\n  value: 'Form'\n});\n\nexport const Form = middleware(_Form, \"Component/Form/Component\");\nexport default Form;","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/component/Form/Form.component.js"],"names":["PropTypes","Children","cloneElement","createRef","PureComponent","FieldContainer","ChildrenType","MixType","FormPortalCollector","validationConfig","Form","handleFormSubmit","e","onSubmitSuccess","onSubmitError","onSubmit","id","props","preventDefault","portalData","window","formPortalCollector","collect","invalidFields","inputValues","reduce","acc","initialInvalidFields","initialInputValues","collectFieldsInformation","asyncData","Promise","all","then","asyncDataList","length","refMap","state","children","propsChildren","fieldsAreValid","cloneAndValidateChildren","setState","Object","values","input","current","value","name","checked","dataset","skipValue","type","boolValue","scrollIntoView","behavior","block","updateChildrenRefs","refMapState","cloneChildren","child","message","keys","validateField","childProps","formRef","formRefMap","originChildren","fieldCallback","executeClone","map","prototype","constructor","push","field","validation","inputNode","rule","find","validationRules","isValid","validate","__construct","getDerivedStateFromProps","render","mix","isInvalid","ref","form","propTypes","func","isRequired","string","defaultProps","defineProperty","_Form"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport {\n    Children,\n    cloneElement,\n    createRef,\n    PureComponent\n} from 'react';\n\nimport { FieldContainer } from 'Component/Field/Field.container';\nimport { ChildrenType, MixType } from 'Type/Common';\nimport FormPortalCollector from 'Util/FormPortalCollector';\n\nimport validationConfig from './Form.config';\n\n/** @namespace Component/Form/Component */\nexport class Form extends PureComponent {\n    static propTypes = {\n        onSubmitSuccess: PropTypes.func,\n        onSubmitError: PropTypes.func,\n        onSubmit: PropTypes.func,\n        children: ChildrenType.isRequired,\n        id: PropTypes.string,\n        mix: MixType\n    };\n\n    static defaultProps = {\n        onSubmitSuccess: () => {},\n        onSubmitError: () => {},\n        onSubmit: () => {},\n        mix: {},\n        id: ''\n    };\n\n    static updateChildrenRefs(props, state = {}) {\n        const { children: propsChildren } = props;\n        const { refMap: refMapState = {} } = state;\n\n        const refMap = {};\n\n        const children = Form.cloneChildren(\n            propsChildren,\n            (child) => {\n                const { props: { name } } = child;\n                const { message } = Object.keys(refMapState).length\n                    ? Form.validateField(child, refMapState)\n                    : {};\n\n                refMap[name] = createRef();\n\n                const childProps = {\n                    formRef: refMap[name],\n                    formRefMap: refMap\n                };\n\n                if (message) {\n                    childProps.message = message;\n                }\n\n                return cloneElement(child, childProps);\n            }\n        );\n\n        return { children, refMap };\n    }\n\n    static cloneChildren(originChildren, fieldCallback) {\n        const executeClone = (originChildren) => Children.map(originChildren, (child) => {\n            if (child && typeof child === 'object' && child.type && child.props) {\n                const { type: { name }, props, props: { children } } = child;\n\n                if (name === FieldContainer.prototype.constructor.name) {\n                    return fieldCallback(child);\n                }\n\n                if (typeof children === 'object') {\n                    return cloneElement(child, {\n                        ...props,\n                        children: executeClone(children)\n                    });\n                }\n\n                return child;\n            }\n\n            return child;\n        });\n\n        return executeClone(originChildren);\n    }\n\n    static cloneAndValidateChildren(propsChildren, refMap) {\n        const invalidFields = [];\n        const children = Form.cloneChildren(\n            propsChildren,\n            (child) => {\n                const { props: { id, name } } = child;\n                const { message } = Form.validateField(child, refMap);\n\n                if (message) {\n                    invalidFields.push(id);\n                    return cloneElement(child, {\n                        message,\n                        formRef: refMap[name]\n                    });\n                }\n\n                return cloneElement(child, {\n                    formRef: refMap[name]\n                });\n            }\n        );\n\n        return { children, fieldsAreValid: !invalidFields.length, invalidFields };\n    }\n\n    static validateField(field, refMap) {\n        const { validation, id, name } = field.props;\n\n        if (validation && id && refMap[name] && refMap[name].current) {\n            const { current: inputNode } = refMap[name];\n\n            const rule = validation.find((rule) => {\n                if (!validationConfig[rule]) {\n                    return false;\n                }\n                const validationRules = validationConfig[rule];\n                const isValid = validationRules.validate(inputNode, refMap);\n                return !isValid;\n            });\n\n            if (rule) {\n                return validationConfig[rule];\n            }\n        }\n\n        return {};\n    }\n\n    __construct(props) {\n        super.__construct(props);\n\n        if (!window.formPortalCollector) {\n            window.formPortalCollector = new FormPortalCollector();\n        }\n\n        this.state = {\n            ...Form.updateChildrenRefs(props),\n            fieldsAreValid: true\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { refMap } = state;\n        const { children } = props;\n\n        return {\n            ...Form.cloneAndValidateChildren(children, refMap),\n            ...Form.updateChildrenRefs(props, state)\n        };\n    }\n\n    handleFormSubmit = async (e) => {\n        const {\n            onSubmitSuccess,\n            onSubmitError,\n            onSubmit,\n            id\n        } = this.props;\n\n        e.preventDefault();\n        onSubmit();\n\n        const portalData = id ? await window.formPortalCollector.collect(id) : [];\n\n        const {\n            invalidFields,\n            inputValues\n        } = portalData.reduce((acc, portalData) => {\n            const {\n                invalidFields = [],\n                inputValues = {}\n            } = portalData;\n\n            const {\n                invalidFields: initialInvalidFields,\n                inputValues: initialInputValues\n            } = acc;\n\n            return ({\n                invalidFields: [...initialInvalidFields, ...invalidFields],\n                inputValues: { ...initialInputValues, ...inputValues }\n            });\n        }, this.collectFieldsInformation());\n\n        const asyncData = Promise.all(portalData.reduce((acc, { asyncData }) => {\n            if (!asyncData) {\n                return acc;\n            }\n\n            return [...acc, asyncData];\n        }, []));\n\n        asyncData.then(\n            /** @namespace Component/Form/Component/handleFormSubmitAsyncDataThen */\n            (asyncDataList) => {\n                if (!invalidFields.length) {\n                    onSubmitSuccess(inputValues, asyncDataList);\n                    return;\n                }\n\n                onSubmitError(inputValues, invalidFields);\n            },\n            /** @namespace Component/Form/Component/handleFormSubmitAsyncDataCatch */\n            (e) => onSubmitError(inputValues, invalidFields, e)\n        );\n    };\n\n    collectFieldsInformation = () => {\n        const { refMap } = this.state;\n        const { children: propsChildren } = this.props;\n\n        const {\n            children,\n            fieldsAreValid,\n            invalidFields\n        } = Form.cloneAndValidateChildren(propsChildren, refMap);\n\n        this.setState({ children, fieldsAreValid });\n\n        const inputValues = Object.values(refMap).reduce((inputValues, input) => {\n            const { current } = input;\n            if (current && current.id && current.value) {\n                const { name, value, checked } = current;\n\n                if (current.dataset.skipValue === 'true') {\n                    return inputValues;\n                }\n\n                if (current.type === 'checkbox') {\n                    const boolValue = checked;\n                    return { ...inputValues, [name]: boolValue };\n                }\n\n                return { ...inputValues, [name]: value };\n            }\n\n            return inputValues;\n        }, {});\n\n        if (invalidFields.length) {\n            const { current } = refMap[invalidFields[0]];\n\n            current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n            });\n        }\n\n        return {\n            inputValues,\n            invalidFields\n        };\n    };\n\n    render() {\n        const { mix, id } = this.props;\n        const { children, fieldsAreValid } = this.state;\n\n        return (\n            <form\n              block=\"Form\"\n              mix={ mix }\n              mods={ { isInvalid: !fieldsAreValid } }\n              ref={ (ref) => {\n                  this.form = ref;\n              } }\n              id={ id }\n              onSubmit={ this.handleFormSubmit }\n            >\n                { children }\n            </form>\n        );\n    }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}