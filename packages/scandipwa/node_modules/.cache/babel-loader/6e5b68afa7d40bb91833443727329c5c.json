{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{logger}from'workbox-core/_private/logger.js';import{getOrCreatePrecacheController}from\"./utils/getOrCreatePrecacheController.js\";import{precachePlugins}from\"./utils/precachePlugins.js\";import\"./_version.js\";var installListener=function installListener(event){var precacheController=getOrCreatePrecacheController();var plugins=precachePlugins.get();event.waitUntil(precacheController.install({event:event,plugins:plugins}).catch(function(error){if(process.env.NODE_ENV!=='production'){logger.error(\"Service worker installation failed. It will \"+\"be retried automatically during the next navigation.\");}// Re-throw the error to ensure installation fails.\nthrow error;}));};var activateListener=function activateListener(event){var precacheController=getOrCreatePrecacheController();event.waitUntil(precacheController.activate());};/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */function precache(entries){var precacheController=getOrCreatePrecacheController();precacheController.addToCacheList(entries);if(entries.length>0){// NOTE: these listeners will only be added once (even if the `precache()`\n// method is called multiple times) because event listeners are implemented\n// as a set, where each listener must be unique.\n// See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\nself.addEventListener('install',installListener);self.addEventListener('activate',activateListener);}}export{precache};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-precaching/precache.js"],"names":["logger","getOrCreatePrecacheController","precachePlugins","installListener","event","precacheController","plugins","get","waitUntil","install","catch","error","process","env","NODE_ENV","activateListener","activate","precache","entries","addToCacheList","length","self","addEventListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASA,MAAT,KAAuB,iCAAvB,CACA,OAASC,6BAAT,gDACA,OAASC,eAAT,kCACA,sBACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAC/B,GAAMC,CAAAA,kBAAkB,CAAGJ,6BAA6B,EAAxD,CACA,GAAMK,CAAAA,OAAO,CAAGJ,eAAe,CAACK,GAAhB,EAAhB,CACAH,KAAK,CAACI,SAAN,CAAgBH,kBAAkB,CAACI,OAAnB,CAA2B,CAAEL,KAAK,CAALA,KAAF,CAASE,OAAO,CAAPA,OAAT,CAA3B,EACXI,KADW,CACL,SAACC,KAAD,CAAW,CAClB,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCd,MAAM,CAACW,KAAP,CAAa,qGAAb,EAEH,CACD;AACA,KAAMA,CAAAA,KAAN,CACH,CARe,CAAhB,EASH,CAZD,CAaA,GAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACX,KAAD,CAAW,CAChC,GAAMC,CAAAA,kBAAkB,CAAGJ,6BAA6B,EAAxD,CACAG,KAAK,CAACI,SAAN,CAAgBH,kBAAkB,CAACW,QAAnB,EAAhB,EACH,CAHD,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,QAAT,CAAkBC,OAAlB,CAA2B,CACvB,GAAMb,CAAAA,kBAAkB,CAAGJ,6BAA6B,EAAxD,CACAI,kBAAkB,CAACc,cAAnB,CAAkCD,OAAlC,EACA,GAAIA,OAAO,CAACE,MAAR,CAAiB,CAArB,CAAwB,CACpB;AACA;AACA;AACA;AACAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,CAAiCnB,eAAjC,EACAkB,IAAI,CAACC,gBAAL,CAAsB,UAAtB,CAAkCP,gBAAlC,EACH,CACJ,CACD,OAASE,QAAT","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\nconst installListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    const plugins = precachePlugins.get();\n    event.waitUntil(precacheController.install({ event, plugins })\n        .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Service worker installation failed. It will ` +\n                `be retried automatically during the next navigation.`);\n        }\n        // Re-throw the error to ensure installation fails.\n        throw error;\n    }));\n};\nconst activateListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    event.waitUntil(precacheController.activate());\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.addToCacheList(entries);\n    if (entries.length > 0) {\n        // NOTE: these listeners will only be added once (even if the `precache()`\n        // method is called multiple times) because event listeners are implemented\n        // as a set, where each listener must be unique.\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('install', installListener);\n        self.addEventListener('activate', activateListener);\n    }\n}\nexport { precache };\n"]},"metadata":{},"sourceType":"module"}