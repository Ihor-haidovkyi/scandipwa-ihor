{"ast":null,"code":"import _regeneratorRuntime from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import mergeTranslations from\"../../shared/mergeTranslations\";import localeMap from\"./localeMap\";// Strategy pattern ensures proper chunk splitting\nexport default function loadTranslation(_x){return _loadTranslation.apply(this,arguments);}function _loadTranslation(){_loadTranslation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(locale){var loadTranslationFiles,translations;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Get the translation fetcher from the locale map\nloadTranslationFiles=localeMap[locale];if(loadTranslationFiles){_context.next=3;break;}throw new Error('Unknown locale!');case 3:_context.next=5;return Promise.all(loadTranslationFiles());case 5:translations=_context.sent;return _context.abrupt(\"return\",mergeTranslations(translations));case 7:case\"end\":return _context.stop();}}},_callee);}));return _loadTranslation.apply(this,arguments);}","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/@scandipwa/webpack-i18n-runtime/src/util/loadTranslation.js"],"names":["mergeTranslations","localeMap","loadTranslation","locale","loadTranslationFiles","Error","Promise","all","translations"],"mappings":"+RAAA,MAAOA,CAAAA,iBAAP,sCACA,MAAOC,CAAAA,SAAP,mBAEA;AACA,uBAA8BC,CAAAA,eAA9B,oD,qGAAe,iBAA+BC,MAA/B,wJACX;AACMC,oBAFK,CAEkBH,SAAS,CAACE,MAAD,CAF3B,IAGNC,oBAHM,8BAID,IAAIC,CAAAA,KAAJ,CAAU,iBAAV,CAJC,8BAQgBC,CAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,EAAhC,CARhB,QAQLI,YARK,+CAUJR,iBAAiB,CAACQ,YAAD,CAVb,wD","sourcesContent":["import mergeTranslations from '../../shared/mergeTranslations';\nimport localeMap from './localeMap';\n\n// Strategy pattern ensures proper chunk splitting\nexport default async function loadTranslation(locale) {\n    // Get the translation fetcher from the locale map\n    const loadTranslationFiles = localeMap[locale];\n    if (!loadTranslationFiles) {\n        throw new Error('Unknown locale!');\n    }\n\n    // Import the translations\n    const translations = await Promise.all(loadTranslationFiles());\n\n    return mergeTranslations(translations);\n}\n"]},"metadata":{},"sourceType":"module"}