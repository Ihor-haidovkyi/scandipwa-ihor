{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport ProductListQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/ProductList.query\";\nimport { updateNoMatch } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/NoMatch/NoMatch.action\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport { updateInfoLoadStatus, updateProductListInfo } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/ProductListInfo/ProductListInfo.action\";\nimport { QueryDispatcher } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request\";\n/**\n * Product List Info Dispatcher\n * @class ProductListInfoDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ProductListInfo/Dispatcher\n */\n\nexport class _ProductListInfoDispatcher extends Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('ProductListInfo');\n  }\n\n  onSuccess({\n    products\n  }, dispatch, options) {\n    const {\n      args: {\n        filter\n      }\n    } = options;\n    dispatch(updateProductListInfo(products, filter));\n  }\n\n  onError(error, dispatch) {\n    dispatch(showNotification('error', __('Error fetching Product List Information!'), error));\n    dispatch(updateNoMatch(true));\n  }\n\n  prepareRequest(options, dispatch) {\n    dispatch(updateInfoLoadStatus(true));\n    return ProductListQuery.getQuery({ ...options,\n      requireInfo: true\n    });\n  }\n\n}\nObject.defineProperty(_ProductListInfoDispatcher, 'name', {\n  value: 'ProductListInfoDispatcher'\n});\n\nexport const ProductListInfoDispatcher = middleware(_ProductListInfoDispatcher, \"Store/ProductListInfo/Dispatcher\");\nexport default new ProductListInfoDispatcher();","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/store/ProductListInfo/ProductListInfo.dispatcher.js"],"names":["ProductListQuery","updateNoMatch","showNotification","updateInfoLoadStatus","updateProductListInfo","QueryDispatcher","ProductListInfoDispatcher","__construct","onSuccess","products","dispatch","options","args","filter","onError","error","__","prepareRequest","getQuery","requireInfo","Object","defineProperty","_ProductListInfoDispatcher","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP;AACA,SAASC,aAAT;AACA,SAASC,gBAAT;AACA,SACIC,oBADJ,EAEIC,qBAFJ;AAIA,SAASC,eAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAAN,qCAAwD;AAC3DC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,iBAAlB;AACH;;AAEDC,EAAAA,SAAS,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACvC,UAAM;AACFC,MAAAA,IAAI,EAAE;AACFC,QAAAA;AADE;AADJ,QAIFF,OAJJ;AAMAD,IAAAA,QAAQ,CAACN,qBAAqB,CAACK,QAAD,EAAWI,MAAX,CAAtB,CAAR;AACH;;AAEDC,EAAAA,OAAO,CAACC,KAAD,EAAQL,QAAR,EAAkB;AACrBA,IAAAA,QAAQ,CAACR,gBAAgB,CAAC,OAAD,EAAUc,EAAE,CAAC,0CAAD,CAAZ,EAA0DD,KAA1D,CAAjB,CAAR;AACAL,IAAAA,QAAQ,CAACT,aAAa,CAAC,IAAD,CAAd,CAAR;AACH;;AAEDgB,EAAAA,cAAc,CAACN,OAAD,EAAUD,QAAV,EAAoB;AAC9BA,IAAAA,QAAQ,CAACP,oBAAoB,CAAC,IAAD,CAArB,CAAR;AAEA,WAAOH,gBAAgB,CAACkB,QAAjB,CAA0B,EAC7B,GAAGP,OAD0B;AAE7BQ,MAAAA,WAAW,EAAE;AAFgB,KAA1B,CAAP;AAIH;;AA3B0D;AA1B/DC,MAAM,CAACC,cAAP,CAAsBC,0BAAtB,EAAkD,MAAlD,EAA0D;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA1D;;;AAwDA,eAAe,IAAIjB,yBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    updateInfoLoadStatus,\n    updateProductListInfo\n} from 'Store/ProductListInfo/ProductListInfo.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Product List Info Dispatcher\n * @class ProductListInfoDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ProductListInfo/Dispatcher\n */\nexport class ProductListInfoDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('ProductListInfo');\n    }\n\n    onSuccess({ products }, dispatch, options) {\n        const {\n            args: {\n                filter\n            }\n        } = options;\n\n        dispatch(updateProductListInfo(products, filter));\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Product List Information!'), error));\n        dispatch(updateNoMatch(true));\n    }\n\n    prepareRequest(options, dispatch) {\n        dispatch(updateInfoLoadStatus(true));\n\n        return ProductListQuery.getQuery({\n            ...options,\n            requireInfo: true\n        });\n    }\n}\n\nexport default new ProductListInfoDispatcher();\n"]},"metadata":{},"sourceType":"module"}