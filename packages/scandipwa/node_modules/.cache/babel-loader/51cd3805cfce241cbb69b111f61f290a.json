{"ast":null,"code":"/* eslint-disable no-undef */\n\n/**\n * Get plugins for provided namespaces\n * @param {String[]} namespaces\n * @param {String} targetSpecifier\n * @param {String} memberName\n */\nexport default (function (namespaces, targetSpecifier, memberName) {\n  return namespaces.reduce(function (acc, namespace) {\n    // Handle no member name: return all plugins for the provided section\n    if (!memberName) {\n      var _window$plugins, _window$plugins$names;\n\n      const pluginsOfType = (_window$plugins = window.plugins) === null || _window$plugins === void 0 ? void 0 : (_window$plugins$names = _window$plugins[namespace]) === null || _window$plugins$names === void 0 ? void 0 : _window$plugins$names[targetSpecifier];\n\n      if (pluginsOfType) {\n        return acc.concat(pluginsOfType);\n      }\n    } else {\n      var _window$plugins2, _window$plugins2$name;\n\n      // Handle member name present\n      const {\n        value\n      } = Object.getOwnPropertyDescriptor(((_window$plugins2 = window.plugins) === null || _window$plugins2 === void 0 ? void 0 : (_window$plugins2$name = _window$plugins2[namespace]) === null || _window$plugins2$name === void 0 ? void 0 : _window$plugins2$name[targetSpecifier]) || {}, memberName) || {};\n\n      if (value) {\n        return acc.concat(value);\n      }\n    }\n\n    return acc;\n  }, []);\n});","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/@scandipwa/scandipwa-extensibility/lib/helpers/getPluginsForMember.js"],"names":["namespaces","targetSpecifier","memberName","reduce","acc","namespace","pluginsOfType","window","plugins","concat","value","Object","getOwnPropertyDescriptor"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,UAACA,UAAD,EAAaC,eAAb,EAA8BC,UAA9B;AAAA,SAA6CF,UAAU,CAACG,MAAX,CACxD,UAACC,GAAD,EAAMC,SAAN,EAAoB;AAChB;AACA,QAAI,CAACH,UAAL,EAAiB;AAAA;;AACb,YAAMI,aAAa,sBAAGC,MAAM,CAACC,OAAV,6EAAG,gBAAiBH,SAAjB,CAAH,0DAAG,sBAA8BJ,eAA9B,CAAtB;;AAEA,UAAIK,aAAJ,EAAmB;AACf,eAAOF,GAAG,CAACK,MAAJ,CAAWH,aAAX,CAAP;AACH;AACJ,KAND,MAMO;AAAA;;AACH;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAYC,MAAM,CAACC,wBAAP,CACd,qBAAAL,MAAM,CAACC,OAAP,+FAAiBH,SAAjB,iFAA8BJ,eAA9B,MAAkD,EADpC,EAEdC,UAFc,KAGb,EAHL;;AAKA,UAAIQ,KAAJ,EAAW;AACP,eAAON,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAP;AACH;AACJ;;AAED,WAAON,GAAP;AACH,GAtBuD,EAsBrD,EAtBqD,CAA7C;AAAA,CAAf","sourcesContent":["/* eslint-disable no-undef */\n/**\n * Get plugins for provided namespaces\n * @param {String[]} namespaces\n * @param {String} targetSpecifier\n * @param {String} memberName\n */\nexport default (namespaces, targetSpecifier, memberName) => namespaces.reduce(\n    (acc, namespace) => {\n        // Handle no member name: return all plugins for the provided section\n        if (!memberName) {\n            const pluginsOfType = window.plugins?.[namespace]?.[targetSpecifier];\n\n            if (pluginsOfType) {\n                return acc.concat(pluginsOfType);\n            }\n        } else {\n            // Handle member name present\n            const { value } = Object.getOwnPropertyDescriptor(\n                window.plugins?.[namespace]?.[targetSpecifier] || {},\n                memberName\n            ) || {};\n\n            if (value) {\n                return acc.concat(value);\n            }\n        }\n\n        return acc;\n    }, []\n);\n"]},"metadata":{},"sourceType":"module"}