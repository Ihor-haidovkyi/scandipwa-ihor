{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component\\\\NewProducts\\\\NewProducts.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport ProductListQuery from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\query/ProductList.query\";\nimport { showNotification } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\store/Notification/Notification.action\";\nimport { getIndexedProducts } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/Product\";\nimport { prepareQuery } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/Query\";\nimport { executeGet } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\util/Request\";\nimport NewProducts from \"./NewProducts.component\";\n/** @namespace Component/NewProducts/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    timezone: state.ConfigReducer.timezone\n  };\n}, \"Component/NewProducts/Container/mapStateToProps\");\n/** @namespace Component/NewProducts/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    showNotification: function (type, title, error) {\n      return dispatch(showNotification(type, title, error));\n    }\n  };\n}, \"Component/NewProducts/Container/mapDispatchToProps\");\n/** @namespace Component/NewProducts/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _NewProductsContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: undefined,\n      siblingsHaveBrands: false,\n      siblingsHavePriceBadge: false,\n      siblingsHaveTierPrice: false,\n      siblingsHaveConfigurableOptions: false\n    };\n  }\n\n  componentDidMount() {\n    this.requestProducts();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      category,\n      productsCount,\n      cacheLifetime,\n      timezone\n    } = this.props;\n    const {\n      category: pCategory,\n      productsCount: pProductsCount,\n      cacheLifetime: pCacheLifetime,\n      timezone: pTimezone\n    } = prevProps;\n\n    if (category !== pCategory || timezone !== pTimezone || productsCount !== pProductsCount || cacheLifetime !== pCacheLifetime) {\n      this.requestProducts();\n    }\n  }\n\n  containerProps() {\n    var _this = this;\n\n    const {\n      siblingsHaveBrands,\n      siblingsHavePriceBadge,\n      siblingsHaveTierPrice,\n      siblingsHaveConfigurableOptions\n    } = this.state;\n    return {\n      productCardFunctions: {\n        setSiblingsHaveBrands: function () {\n          return _this.setState({\n            siblingsHaveBrands: true\n          });\n        },\n        setSiblingsHavePriceBadge: function () {\n          return _this.setState({\n            siblingsHavePriceBadge: true\n          });\n        },\n        setSiblingsHaveTierPrice: function () {\n          return _this.setState({\n            siblingsHaveTierPrice: true\n          });\n        },\n        setSiblingsHaveConfigurableOptions: function () {\n          return _this.setState({\n            siblingsHaveConfigurableOptions: true\n          });\n        }\n      },\n      productCardProps: {\n        siblingsHaveBrands,\n        siblingsHavePriceBadge,\n        siblingsHaveTierPrice,\n        siblingsHaveConfigurableOptions\n      }\n    };\n  }\n  /**\n   * Calculates date for request in server locale and with ttl error\n   *\n   * @returns {Date}\n   * @memberof NewProducts\n   */\n\n\n  getRequestDate() {\n    const {\n      cacheLifetime,\n      timezone: timeZone\n    } = this.props;\n    const milliInSeccond = 1000;\n    const now = new Date();\n    const serverNow = new Date(now.toLocaleString('en', {\n      timeZone\n    }));\n    const serverNowTime = serverNow.getTime();\n    const ttl = cacheLifetime * milliInSeccond;\n    const requestTime = serverNowTime - serverNowTime % ttl;\n    const requestDate = new Date(requestTime);\n    const timeOffset = 10;\n    return requestDate.toISOString().slice(0, timeOffset);\n  }\n\n  requestProducts() {\n    var _this2 = this;\n\n    const {\n      timezone,\n      category: categoryUrlPath,\n      productsCount: pageSize,\n      cacheLifetime,\n      showNotification\n    } = this.props;\n\n    if (!timezone) {\n      return;\n    }\n\n    const newToDate = this.getRequestDate();\n    const options = {\n      args: {\n        filter: {\n          categoryUrlPath,\n          newToDate\n        },\n        currentPage: 1,\n        pageSize\n      }\n    };\n    const query = [ProductListQuery.getQuery(options)];\n    executeGet(prepareQuery(query), 'NewProducts', cacheLifetime).then(\n    /** @namespace Component/NewProducts/Container/executeGetThen */\n    middleware(function ({\n      products: {\n        items\n      }\n    }) {\n      return _this2.setState({\n        products: getIndexedProducts(items)\n      });\n    }, \"Component/NewProducts/Container/executeGetThen\")).catch(\n    /** @namespace Component/NewProducts/Container/executeGetThenCatch */\n    middleware(function (e) {\n      return showNotification('error', __('Error fetching NewProducts!'), e);\n    }, \"Component/NewProducts/Container/executeGetThenCatch\"));\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, NewProducts, Object.assign({}, this.props, this.state, this.containerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n_NewProductsContainer.propTypes = {\n  category: PropTypes.string,\n  cacheLifetime: PropTypes.number,\n  productsCount: PropTypes.number,\n  timezone: PropTypes.string.isRequired,\n  showNotification: PropTypes.func.isRequired\n};\n_NewProductsContainer.defaultProps = {\n  category: '',\n  productsCount: 10,\n  cacheLifetime: 86400\n};\nObject.defineProperty(_NewProductsContainer, 'name', {\n  value: 'NewProductsContainer'\n});\n\nexport const NewProductsContainer = middleware(_NewProductsContainer, \"Component/NewProducts/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(NewProductsContainer);","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/packages/scandipwa/src/component/NewProducts/NewProducts.container.js"],"names":["PropTypes","PureComponent","connect","ProductListQuery","showNotification","getIndexedProducts","prepareQuery","executeGet","NewProducts","mapStateToProps","state","timezone","ConfigReducer","mapDispatchToProps","dispatch","type","title","error","NewProductsContainer","products","undefined","siblingsHaveBrands","siblingsHavePriceBadge","siblingsHaveTierPrice","siblingsHaveConfigurableOptions","componentDidMount","requestProducts","componentDidUpdate","prevProps","category","productsCount","cacheLifetime","props","pCategory","pProductsCount","pCacheLifetime","pTimezone","containerProps","productCardFunctions","setSiblingsHaveBrands","setState","setSiblingsHavePriceBadge","setSiblingsHaveTierPrice","setSiblingsHaveConfigurableOptions","productCardProps","getRequestDate","timeZone","milliInSeccond","now","Date","serverNow","toLocaleString","serverNowTime","getTime","ttl","requestTime","requestDate","timeOffset","toISOString","slice","categoryUrlPath","pageSize","newToDate","options","args","filter","currentPage","query","getQuery","then","items","catch","e","__","render","propTypes","string","number","isRequired","func","defaultProps","Object","defineProperty","_NewProductsContainer","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { getIndexedProducts } from 'Util/Product';\nimport { prepareQuery } from 'Util/Query';\nimport { executeGet } from 'Util/Request';\n\nimport NewProducts from './NewProducts.component';\n\n/** @namespace Component/NewProducts/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    timezone: state.ConfigReducer.timezone\n});\n\n/** @namespace Component/NewProducts/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    showNotification: (type, title, error) => dispatch(showNotification(type, title, error))\n});\n\n/** @namespace Component/NewProducts/Container */\nexport class NewProductsContainer extends PureComponent {\n    static propTypes = {\n        category: PropTypes.string,\n        cacheLifetime: PropTypes.number,\n        productsCount: PropTypes.number,\n        timezone: PropTypes.string.isRequired,\n        showNotification: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        category: '',\n        productsCount: 10,\n        cacheLifetime: 86400\n    };\n\n    state = {\n        products: undefined,\n        siblingsHaveBrands: false,\n        siblingsHavePriceBadge: false,\n        siblingsHaveTierPrice: false,\n        siblingsHaveConfigurableOptions: false\n    };\n\n    componentDidMount() {\n        this.requestProducts();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            category,\n            productsCount,\n            cacheLifetime,\n            timezone\n        } = this.props;\n        const {\n            category: pCategory,\n            productsCount: pProductsCount,\n            cacheLifetime: pCacheLifetime,\n            timezone: pTimezone\n        } = prevProps;\n\n        if (category !== pCategory\n            || timezone !== pTimezone\n            || productsCount !== pProductsCount\n            || cacheLifetime !== pCacheLifetime) {\n            this.requestProducts();\n        }\n    }\n\n    containerProps() {\n        const {\n            siblingsHaveBrands,\n            siblingsHavePriceBadge,\n            siblingsHaveTierPrice,\n            siblingsHaveConfigurableOptions\n        } = this.state;\n\n        return {\n            productCardFunctions: {\n                setSiblingsHaveBrands: () => this.setState({ siblingsHaveBrands: true }),\n                setSiblingsHavePriceBadge: () => this.setState({ siblingsHavePriceBadge: true }),\n                setSiblingsHaveTierPrice: () => this.setState({ siblingsHaveTierPrice: true }),\n                setSiblingsHaveConfigurableOptions: () => this.setState({ siblingsHaveConfigurableOptions: true })\n            },\n            productCardProps: {\n                siblingsHaveBrands,\n                siblingsHavePriceBadge,\n                siblingsHaveTierPrice,\n                siblingsHaveConfigurableOptions\n            }\n        };\n    }\n\n    /**\n     * Calculates date for request in server locale and with ttl error\n     *\n     * @returns {Date}\n     * @memberof NewProducts\n     */\n    getRequestDate() {\n        const { cacheLifetime, timezone: timeZone } = this.props;\n        const milliInSeccond = 1000;\n\n        const now = new Date();\n        const serverNow = new Date(now.toLocaleString('en', { timeZone }));\n\n        const serverNowTime = serverNow.getTime();\n        const ttl = cacheLifetime * milliInSeccond;\n\n        const requestTime = serverNowTime - (serverNowTime % ttl);\n        const requestDate = new Date(requestTime);\n\n        const timeOffset = 10;\n        return requestDate.toISOString().slice(0, timeOffset);\n    }\n\n    requestProducts() {\n        const {\n            timezone,\n            category: categoryUrlPath,\n            productsCount: pageSize,\n            cacheLifetime,\n            showNotification\n        } = this.props;\n\n        if (!timezone) {\n            return;\n        }\n\n        const newToDate = this.getRequestDate();\n\n        const options = {\n            args: {\n                filter: {\n                    categoryUrlPath,\n                    newToDate\n                },\n                currentPage: 1,\n                pageSize\n            }\n        };\n\n        const query = [ProductListQuery.getQuery(options)];\n        executeGet(prepareQuery(query), 'NewProducts', cacheLifetime)\n            .then(\n                /** @namespace Component/NewProducts/Container/executeGetThen */\n                ({ products: { items } }) => this.setState({ products: getIndexedProducts(items) })\n            )\n            .catch(\n                /** @namespace Component/NewProducts/Container/executeGetThenCatch */\n                (e) => showNotification('error', __('Error fetching NewProducts!'), e)\n            );\n    }\n\n    render() {\n        return (\n            <NewProducts\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewProductsContainer);\n"]},"metadata":{},"sourceType":"module"}