{"ast":null,"code":"var _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Loader from \"/home/marketihor/scandipwa/packages/scandipwa/src/component/Loader\";\nimport MyAccountQuery from \"/home/marketihor/scandipwa/packages/scandipwa/src/query/MyAccount.query\";\nimport { updateCustomerDetails } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.action\";\nimport { CUSTOMER } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.dispatcher\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport { customerType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Account\";\nimport { isSignedIn } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Auth\";\nimport BrowserDatabase from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/BrowserDatabase/BrowserDatabase\";\nimport { fetchMutation, getErrorMessage } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request\";\nimport { ONE_MONTH_IN_SECONDS } from \"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request/QueryDispatcher\";\nimport MyAccountNewsletterSubscription from \"./MyAccountNewsletterSubscription.component\";\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    customer: state.MyAccountReducer.customer,\n    newsletterConfirmStatus: state.ConfigReducer.newsletter_subscription_confirm\n  };\n}, \"Component/MyAccountNewsletterSubscription/Container/mapStateToProps\");\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    updateCustomer: function (customer) {\n      return dispatch(updateCustomerDetails(customer));\n    },\n    showErrorNotification: function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error)));\n    },\n    showSuccessNotification: function (message) {\n      return dispatch(showNotification('success', message));\n    }\n  };\n}, \"Component/MyAccountNewsletterSubscription/Container/mapDispatchToProps\");\n/** @namespace Component/MyAccountNewsletterSubscription/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _MyAccountNewsletterSubscriptionContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.containerFunctions = {\n      onCustomerSave: this.onCustomerSave.bind(this)\n    };\n    this.state = {\n      isLoading: false\n    };\n\n    this.onError = function () {\n      const {\n        showErrorNotification\n      } = _this.props;\n\n      _this.setState({\n        isLoading: false\n      }, function () {\n        showErrorNotification(__('We are experiencing issues, please try again later'));\n      });\n    };\n  }\n\n  showSubscriptionUpdateNotification(isSubscribed, wasSubscribed) {\n    const {\n      showSuccessNotification,\n      newsletterConfirmStatus\n    } = this.props;\n\n    if (!isSubscribed && wasSubscribed) {\n      showSuccessNotification(__('We have removed your newsletter subscription.'));\n    } else if (isSubscribed && !newsletterConfirmStatus && !wasSubscribed) {\n      showSuccessNotification(__('We have saved your subscription'));\n    } else if (!isSubscribed && newsletterConfirmStatus) {\n      showSuccessNotification(__('A subscription confirmation email has been sent!'));\n    } else {\n      showSuccessNotification(__('We have updated your subscription.'));\n    }\n  }\n\n  onCustomerSave(customer) {\n    var _this2 = this;\n\n    const {\n      updateCustomer,\n      customer: {\n        is_subscribed: wasSubscribed\n      }\n    } = this.props;\n    const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n\n    if (!isSignedIn()) {\n      return null;\n    }\n\n    this.setState({\n      isLoading: true\n    });\n    return fetchMutation(mutation).then(\n    /** @namespace Component/MyAccountNewsletterSubscription/Container/fetchMutationThen */\n    middleware(function ({\n      updateCustomer: {\n        customer\n      }\n    }) {\n      BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n      const {\n        is_subscribed\n      } = customer;\n\n      _this2.setState({\n        isLoading: false\n      }, function () {\n        updateCustomer(customer);\n\n        _this2.showSubscriptionUpdateNotification(is_subscribed, wasSubscribed);\n      });\n    }, \"Component/MyAccountNewsletterSubscription/Container/fetchMutationThen\"), this.onError);\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, /*#__PURE__*/_checkBEM(React, Loader, {\n      isLoading: isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/_checkBEM(React, MyAccountNewsletterSubscription, Object.assign({}, this.props, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n_MyAccountNewsletterSubscriptionContainer.propTypes = {\n  customer: customerType.isRequired,\n  updateCustomer: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired,\n  newsletterConfirmStatus: PropTypes.bool.isRequired\n};\nObject.defineProperty(_MyAccountNewsletterSubscriptionContainer, 'name', {\n  value: 'MyAccountNewsletterSubscriptionContainer'\n});\n\nexport const MyAccountNewsletterSubscriptionContainer = middleware(_MyAccountNewsletterSubscriptionContainer, \"Component/MyAccountNewsletterSubscription/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountNewsletterSubscriptionContainer);","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.container.js"],"names":["PropTypes","React","PureComponent","connect","Loader","MyAccountQuery","updateCustomerDetails","CUSTOMER","showNotification","customerType","isSignedIn","BrowserDatabase","fetchMutation","getErrorMessage","ONE_MONTH_IN_SECONDS","MyAccountNewsletterSubscription","mapStateToProps","state","customer","MyAccountReducer","newsletterConfirmStatus","ConfigReducer","newsletter_subscription_confirm","mapDispatchToProps","dispatch","updateCustomer","showErrorNotification","error","showSuccessNotification","message","MyAccountNewsletterSubscriptionContainer","containerFunctions","onCustomerSave","bind","isLoading","onError","props","setState","__","showSubscriptionUpdateNotification","isSubscribed","wasSubscribed","is_subscribed","mutation","getUpdateInformationMutation","then","setItem","render","propTypes","isRequired","func","bool","Object","defineProperty","_MyAccountNewsletterSubscriptionContainer","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport Loader from 'Component/Loader';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport { updateCustomerDetails } from 'Store/MyAccount/MyAccount.action';\nimport { CUSTOMER } from 'Store/MyAccount/MyAccount.dispatcher';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { customerType } from 'Type/Account';\nimport { isSignedIn } from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase/BrowserDatabase';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nimport MyAccountNewsletterSubscription from './MyAccountNewsletterSubscription.component';\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    customer: state.MyAccountReducer.customer,\n    newsletterConfirmStatus: state.ConfigReducer.newsletter_subscription_confirm\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateCustomer: (customer) => dispatch(updateCustomerDetails(customer)),\n    showErrorNotification: (error) => dispatch(showNotification('error', getErrorMessage(error))),\n    showSuccessNotification: (message) => dispatch(showNotification('success', message))\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container */\nexport class MyAccountNewsletterSubscriptionContainer extends PureComponent {\n    static propTypes = {\n        customer: customerType.isRequired,\n        updateCustomer: PropTypes.func.isRequired,\n        showErrorNotification: PropTypes.func.isRequired,\n        showSuccessNotification: PropTypes.func.isRequired,\n        newsletterConfirmStatus: PropTypes.bool.isRequired\n    };\n\n    containerFunctions = {\n        onCustomerSave: this.onCustomerSave.bind(this)\n    };\n\n    state = {\n        isLoading: false\n    };\n\n    showSubscriptionUpdateNotification(isSubscribed, wasSubscribed) {\n        const {\n            showSuccessNotification,\n            newsletterConfirmStatus\n        } = this.props;\n\n        if (!isSubscribed && wasSubscribed) {\n            showSuccessNotification(__('We have removed your newsletter subscription.'));\n        } else if (isSubscribed && !newsletterConfirmStatus && !wasSubscribed) {\n            showSuccessNotification(__('We have saved your subscription'));\n        } else if (!isSubscribed && newsletterConfirmStatus) {\n            showSuccessNotification(__('A subscription confirmation email has been sent!'));\n        } else {\n            showSuccessNotification(__('We have updated your subscription.'));\n        }\n    }\n\n    onError = () => {\n        const { showErrorNotification } = this.props;\n\n        this.setState({ isLoading: false }, () => {\n            showErrorNotification(__('We are experiencing issues, please try again later'));\n        });\n    };\n\n    onCustomerSave(customer) {\n        const {\n            updateCustomer,\n            customer: {\n                is_subscribed: wasSubscribed\n            }\n        } = this.props;\n\n        const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n\n        if (!isSignedIn()) {\n            return null;\n        }\n\n        this.setState({ isLoading: true });\n\n        return fetchMutation(mutation).then(\n            /** @namespace Component/MyAccountNewsletterSubscription/Container/fetchMutationThen */\n            ({ updateCustomer: { customer } }) => {\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n                const { is_subscribed } = customer;\n\n                this.setState({ isLoading: false }, () => {\n                    updateCustomer(customer);\n                    this.showSubscriptionUpdateNotification(is_subscribed, wasSubscribed);\n                });\n            },\n            this.onError\n        );\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        return (\n            <>\n                <Loader isLoading={ isLoading } />\n                <MyAccountNewsletterSubscription\n                  { ...this.props }\n                  { ...this.containerFunctions }\n                />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountNewsletterSubscriptionContainer);\n"]},"metadata":{},"sourceType":"module"}