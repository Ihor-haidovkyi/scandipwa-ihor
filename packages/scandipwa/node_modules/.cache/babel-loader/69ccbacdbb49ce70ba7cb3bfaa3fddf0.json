{"ast":null,"code":"import _regeneratorRuntime from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectWithoutProperties from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _objectSpread from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */ /** @namespace Util/Address/trimCustomerAddress */export var trimCustomerAddress=middleware(function(customerAddress){var city=customerAddress.city,company=customerAddress.company,country_id=customerAddress.country_id,email=customerAddress.email,firstname=customerAddress.firstname,lastname=customerAddress.lastname,method=customerAddress.method,postcode=customerAddress.postcode,street=customerAddress.street,telephone=customerAddress.telephone,region=customerAddress.region,vat_id=customerAddress.vat_id;return _objectSpread({city:city,company:company,country_id:country_id,email:email,firstname:firstname,lastname:lastname,method:method,postcode:postcode,street:street,telephone:telephone,vat_id:vat_id},region);},\"Util/Address/trimCustomerAddress\");/** @namespace Util/Address/trimAddressFields */export var trimAddressFields=middleware(function(fields){var region=fields.region_string,fieldsData=_objectWithoutProperties(fields,[\"region_string\"]);return _objectSpread(_objectSpread({},fieldsData),{},{region:region});},\"Util/Address/trimAddressFields\");/** transforming \"street[index]\" entries into a single \"street\" object\n    for checkout/billing/myAccoutAddress form fields object */ /** @namespace Util/Address/setAddressesInFormObject */export var setAddressesInFormObject=middleware(function(fields,numberOfLines){var addressKeys=new Array(numberOfLines).fill('').map(function(_,index){return\"street\".concat(index);});var addressValues=addressKeys.map(function(key){return fields[key];});// removing street related fields from the form object\nvar newFields=Object.keys(fields).filter(function(key){return!addressKeys.includes(key);}).reduce(function(acc,key){acc[key]=fields[key];return acc;},{});// setting single street entry to the form object\nnewFields.street=addressValues;return newFields;},\"Util/Address/setAddressesInFormObject\");// get Form Fields object depending on addressLinesQty\n/** @namespace Util/Address/getFormFields */export var getFormFields=middleware(function(fields,addressLinesQty){if(addressLinesQty===1){return fields;}return setAddressesInFormObject(fields,addressLinesQty);},\"Util/Address/getFormFields\");/** @namespace Util/Address/getCityAndRegionFromZipcode */export var getCityAndRegionFromZipcode=middleware(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(countryId,value){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.zippopotam.us/\".concat(countryId,\"/\").concat(value.split(' ')[0]));case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;return _context.abrupt(\"return\",data&&Object.entries(data).length>0?[data.places[0]['place name'],data.places[0]['state abbreviation']]:[null,null]);case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}(),\"Util/Address/getCityAndRegionFromZipcode\");","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/util/Address/index.js"],"names":["trimCustomerAddress","customerAddress","city","company","country_id","email","firstname","lastname","method","postcode","street","telephone","region","vat_id","trimAddressFields","fields","region_string","fieldsData","setAddressesInFormObject","numberOfLines","addressKeys","Array","fill","map","_","index","addressValues","key","newFields","Object","keys","filter","includes","reduce","acc","getFormFields","addressLinesQty","getCityAndRegionFromZipcode","countryId","value","fetch","split","response","json","data","entries","length","places"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\n/** @namespace Util/Address/trimCustomerAddress */\nexport const trimCustomerAddress = (customerAddress) => {\n    const {\n        city,\n        company,\n        country_id,\n        email,\n        firstname,\n        lastname,\n        method,\n        postcode,\n        street,\n        telephone,\n        region,\n        vat_id\n    } = customerAddress;\n\n    return {\n        city,\n        company,\n        country_id,\n        email,\n        firstname,\n        lastname,\n        method,\n        postcode,\n        street,\n        telephone,\n        vat_id,\n        ...region\n    };\n};\n\n/** @namespace Util/Address/trimAddressFields */\nexport const trimAddressFields = (fields) => {\n    const {\n        region_string: region,\n        ...fieldsData\n    } = fields;\n\n    return { ...fieldsData, region };\n};\n\n/** transforming \"street[index]\" entries into a single \"street\" object\n    for checkout/billing/myAccoutAddress form fields object */\n/** @namespace Util/Address/setAddressesInFormObject */\nexport const setAddressesInFormObject = (fields, numberOfLines) => {\n    const addressKeys = new Array(numberOfLines)\n        .fill('')\n        .map((_, index) => `street${index}`);\n\n    const addressValues = addressKeys.map((key) => fields[key]);\n\n    // removing street related fields from the form object\n    const newFields = Object.keys(fields)\n        .filter((key) => !addressKeys.includes(key))\n        .reduce(\n            (acc, key) => {\n                acc[key] = fields[key];\n                return acc;\n            }, {}\n        );\n\n    // setting single street entry to the form object\n    newFields.street = addressValues;\n\n    return newFields;\n};\n\n// get Form Fields object depending on addressLinesQty\n/** @namespace Util/Address/getFormFields */\nexport const getFormFields = (fields, addressLinesQty) => {\n    if (addressLinesQty === 1) {\n        return fields;\n    }\n\n    return setAddressesInFormObject(fields, addressLinesQty);\n};\n\n/** @namespace Util/Address/getCityAndRegionFromZipcode */\nexport const getCityAndRegionFromZipcode = async (countryId, value) => {\n    const response = await fetch(`https://api.zippopotam.us/${countryId}/${value.split(' ')[0]}`);\n    const data = await response.json();\n    return data && Object.entries(data).length > 0\n        ? [\n            data.places[0]['place name'],\n            data.places[0]['state abbreviation']\n        ]\n        : [null, null];\n};\n"]},"metadata":{},"sourceType":"module"}