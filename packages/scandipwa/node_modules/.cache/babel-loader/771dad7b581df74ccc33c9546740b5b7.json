{"ast":null,"code":"var domparser=require(\"./domparser\");var utilities=require(\"./utilities\");var formatDOM=utilities.formatDOM;var isIE9=utilities.isIE(9);var DIRECTIVE_REGEX=/<(![a-zA-Z\\s]+)>/;// e.g., <!doctype html>\n/**\n * Parses HTML and reformats DOM nodes output.\n *\n * @param  {String} html - The HTML string.\n * @return {Array}       - The formatted DOM nodes.\n */function parseDOM(html){if(typeof html!=='string'){throw new TypeError('First argument must be a string');}if(!html){return[];}// match directive\nvar match=html.match(DIRECTIVE_REGEX);var directive;if(match&&match[1]){directive=match[1];// remove directive in IE9 because DOMParser uses\n// MIME type 'text/xml' instead of 'text/html'\nif(isIE9){html=html.replace(match[0],'');}}return formatDOM(domparser(html),null,directive);}module.exports=parseDOM;","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/html-dom-parser/lib/html-to-dom-client.js"],"names":["domparser","require","utilities","formatDOM","isIE9","isIE","DIRECTIVE_REGEX","parseDOM","html","TypeError","match","directive","replace","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,SAAS,CAAGC,OAAO,eAAvB,CACA,GAAIC,CAAAA,SAAS,CAAGD,OAAO,eAAvB,CAEA,GAAIE,CAAAA,SAAS,CAAGD,SAAS,CAACC,SAA1B,CACA,GAAIC,CAAAA,KAAK,CAAGF,SAAS,CAACG,IAAV,CAAe,CAAf,CAAZ,CAEA,GAAIC,CAAAA,eAAe,CAAG,kBAAtB,CAA0C;AAE1C;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAwB,CACtB,GAAI,MAAOA,CAAAA,IAAP,GAAgB,QAApB,CAA8B,CAC5B,KAAM,IAAIC,CAAAA,SAAJ,CAAc,iCAAd,CAAN,CACD,CAED,GAAI,CAACD,IAAL,CAAW,CACT,MAAO,EAAP,CACD,CAED;AACA,GAAIE,CAAAA,KAAK,CAAGF,IAAI,CAACE,KAAL,CAAWJ,eAAX,CAAZ,CACA,GAAIK,CAAAA,SAAJ,CAEA,GAAID,KAAK,EAAIA,KAAK,CAAC,CAAD,CAAlB,CAAuB,CACrBC,SAAS,CAAGD,KAAK,CAAC,CAAD,CAAjB,CAEA;AACA;AACA,GAAIN,KAAJ,CAAW,CACTI,IAAI,CAAGA,IAAI,CAACI,OAAL,CAAaF,KAAK,CAAC,CAAD,CAAlB,CAAuB,EAAvB,CAAP,CACD,CACF,CAED,MAAOP,CAAAA,SAAS,CAACH,SAAS,CAACQ,IAAD,CAAV,CAAkB,IAAlB,CAAwBG,SAAxB,CAAhB,CACD,CAEDE,MAAM,CAACC,OAAP,CAAiBP,QAAjB","sourcesContent":["var domparser = require('./domparser');\nvar utilities = require('./utilities');\n\nvar formatDOM = utilities.formatDOM;\nvar isIE9 = utilities.isIE(9);\n\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n\n/**\n * Parses HTML and reformats DOM nodes output.\n *\n * @param  {String} html - The HTML string.\n * @return {Array}       - The formatted DOM nodes.\n */\nfunction parseDOM(html) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!html) {\n    return [];\n  }\n\n  // match directive\n  var match = html.match(DIRECTIVE_REGEX);\n  var directive;\n\n  if (match && match[1]) {\n    directive = match[1];\n\n    // remove directive in IE9 because DOMParser uses\n    // MIME type 'text/xml' instead of 'text/html'\n    if (isIE9) {\n      html = html.replace(match[0], '');\n    }\n  }\n\n  return formatDOM(domparser(html), null, directive);\n}\n\nmodule.exports = parseDOM;\n"]},"metadata":{},"sourceType":"module"}