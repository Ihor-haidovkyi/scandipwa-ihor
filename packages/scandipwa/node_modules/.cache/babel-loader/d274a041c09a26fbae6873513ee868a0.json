{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component\\\\ProductAttributeValue\\\\ProductAttributeValue.component.js\";\n\n/* eslint-disable no-magic-numbers */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport Field from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component/Field\";\nimport Html from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\component/Html\";\nimport { MixType } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\type/Common\";\nimport { AttributeType } from \"D:\\\\task\\\\magento2\\\\ScandiPWA\\\\packages\\\\scandipwa\\\\src\\\\type/ProductList\";\nimport { STRING_ONLY_ATTRIBUTE_CODES } from \"./ProductAttributeValue.config\";\nimport \"./ProductAttributeValue.style\";\n/** @namespace Component/ProductAttributeValue/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _ProductAttributeValue extends Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.clickHandler = this.clickHandler.bind(this);\n    this.getOptionLabel = this.getOptionLabel.bind(this);\n\n    this._getBooleanLabel = function (label) {\n      return +label ? __('Yes') : __('No');\n    };\n  }\n\n  getIsColorLight(hex) {\n    const color = hex.charAt(0) === '#' ? hex.substring(1, 7) : hex;\n    const r = parseInt(color.substring(0, 2), 16); // hexToR\n\n    const g = parseInt(color.substring(2, 4), 16); // hexToG\n\n    const b = parseInt(color.substring(4, 6), 16); // hexToB\n\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186;\n  }\n\n  getOptionLabel(value) {\n    const {\n      attribute: {\n        attribute_options,\n        is_boolean\n      },\n      isProductCountVisible\n    } = this.props;\n\n    if (attribute_options) {\n      const optionValues = attribute_options[value];\n\n      if (optionValues) {\n        if (!isProductCountVisible) {\n          return optionValues;\n        }\n\n        const {\n          label,\n          count = 0\n        } = optionValues;\n        const adjustedLabel = is_boolean ? this._getBooleanLabel(label) : label;\n        return { ...optionValues,\n          label: `${adjustedLabel} (${count})`\n        };\n      }\n    }\n\n    return {};\n  }\n\n  clickHandler(e) {\n    const {\n      onClick,\n      attribute\n    } = this.props;\n    e.preventDefault();\n    onClick(attribute);\n  }\n\n  renderTextAttribute() {\n    const {\n      attribute: {\n        attribute_value\n      }\n    } = this.props;\n    return this.renderStringValue(attribute_value);\n  }\n\n  renderBooleanAttribute() {\n    const {\n      attribute: {\n        attribute_value\n      }\n    } = this.props;\n    return this.renderStringValue(attribute_value ? __('Yes') : __('No'));\n  }\n\n  renderMultiSelectAttribute() {\n    var _this = this;\n\n    const {\n      attribute: {\n        attribute_value\n      }\n    } = this.props;\n    const labelsArray = attribute_value.split(',').reduce(function (labels, value) {\n      const {\n        label\n      } = _this.getOptionLabel(value);\n\n      if (label) {\n        labels.push(label);\n      }\n\n      return labels;\n    }, []);\n    return this.renderStringValue(labelsArray.length ? labelsArray.join(', ') : __('N/A'));\n  }\n\n  renderSelectAttribute() {\n    const {\n      attribute: {\n        attribute_value,\n        attribute_code\n      }\n    } = this.props;\n    const attributeOption = this.getOptionLabel(attribute_value);\n    const {\n      label,\n      swatch_data\n    } = attributeOption;\n\n    if (!swatch_data || STRING_ONLY_ATTRIBUTE_CODES.includes(attribute_code)) {\n      return this.renderStringValue(label || __('N/A'));\n    }\n\n    const {\n      value,\n      type\n    } = swatch_data;\n\n    switch (type) {\n      case '0':\n        return this.renderStringValue(value, label);\n\n      case '1':\n        return this.renderColorValue(value, label);\n\n      case '2':\n        return this.renderImageValue(value, label);\n\n      default:\n        return this.renderStringValue(label || __('N/A'));\n    }\n  }\n\n  renderImageAttribute() {\n    const {\n      attribute: {\n        attribute_label,\n        attribute_value\n      }\n    } = this.props;\n\n    if (!attribute_value || attribute_value === 'no_selection') {\n      return this.renderPlaceholder();\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"img\", {\n      block: \"ProductAttributeValue\",\n      elem: \"MediaImage\",\n      src: `/media/catalog/product${attribute_value}`,\n      alt: attribute_label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderTextAreaAttribute() {\n    const {\n      attribute: {\n        attribute_value\n      }\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProductAttributeValue\",\n      elem: \"TextArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, Html, {\n      content: attribute_value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderPlaceholder() {\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProductAttributeValue\",\n      elem: \"Placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderColorValue(color, label) {\n    const {\n      isFormattedAsText,\n      isSelected\n    } = this.props;\n    const isLight = this.getIsColorLight(color);\n\n    if (isFormattedAsText) {\n      return label || __('N/A');\n    }\n\n    const style = {\n      '--option-background-color': color,\n      '--option-border-color': isLight ? '#000' : color,\n      '--option-check-mark-background': isLight ? '#000' : '#fff',\n      // stylelint-disable-next-line value-keyword-case\n      '--option-is-selected': isSelected ? 1 : 0\n    };\n    return /*#__PURE__*/_checkBEM(React, \"data\", {\n      block: \"ProductAttributeValue\",\n      elem: \"Color\",\n      value: label,\n      title: label,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderImageValue(img, label) {\n    const {\n      isFormattedAsText,\n      isSelected\n    } = this.props;\n\n    if (isFormattedAsText) {\n      return label || __('N/A');\n    }\n\n    const style = {\n      // stylelint-disable-next-line value-keyword-case\n      '--option-is-selected': isSelected ? 1 : 0\n    };\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, /*#__PURE__*/_checkBEM(React, \"img\", {\n      block: \"ProductAttributeValue\",\n      elem: \"Image\",\n      src: `/media/attribute/swatch${img}`,\n      alt: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/_checkBEM(React, \"data\", {\n      block: \"ProductAttributeValue\",\n      elem: \"Image-Overlay\",\n      value: label,\n      title: label,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderDropdown(value) {\n    const {\n      isSelected\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, Field, {\n      id: value,\n      name: value,\n      type: \"checkbox\",\n      label: value,\n      value: value,\n      mix: {\n        block: 'ProductAttributeValue',\n        elem: 'Text',\n        mods: {\n          isSelected\n        }\n      },\n      checked: isSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderStringValue(value, label) {\n    const {\n      isFormattedAsText,\n      isSelected\n    } = this.props;\n    const isSwatch = label;\n\n    if (isFormattedAsText) {\n      return label || value || __('N/A');\n    }\n\n    if (!isSwatch) {\n      return this.renderDropdown(value);\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"span\", {\n      block: \"ProductAttributeValue\",\n      elem: \"String\",\n      mods: {\n        isSelected\n      },\n      title: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }, value);\n  }\n\n  renderNumericAttribute() {\n    const {\n      attribute: {\n        attribute_value\n      }\n    } = this.props;\n    return this.renderStringValue(parseFloat(attribute_value).toFixed(2));\n  }\n\n  renderAttributeByType() {\n    const {\n      attribute: {\n        attribute_type\n      }\n    } = this.props;\n\n    switch (attribute_type) {\n      case 'select':\n        return this.renderSelectAttribute();\n\n      case 'boolean':\n        return this.renderBooleanAttribute();\n\n      case 'text':\n        return this.renderTextAttribute();\n\n      case 'multiselect':\n        return this.renderMultiSelectAttribute();\n\n      case 'media_image':\n        return this.renderImageAttribute();\n\n      case 'textarea':\n        return this.renderTextAreaAttribute();\n\n      case 'weight':\n        return this.renderNumericAttribute();\n\n      default:\n        return this.renderPlaceholder();\n    }\n  }\n\n  render() {\n    const {\n      getLink,\n      attribute,\n      isAvailable,\n      attribute: {\n        attribute_code,\n        attribute_value\n      },\n      mix,\n      isFormattedAsText\n    } = this.props;\n\n    if (attribute_code && !attribute_value) {\n      return null;\n    }\n\n    const href = getLink(attribute); // Invert to apply css rule without using not()\n\n    const isNotAvailable = !isAvailable;\n\n    if (isFormattedAsText) {\n      return /*#__PURE__*/_checkBEM(React, \"div\", {\n        block: \"ProductAttributeValue\",\n        mix: mix,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 17\n        }\n      }, this.renderAttributeByType());\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"a\", {\n      href: href,\n      block: \"ProductAttributeValue\",\n      mods: {\n        isNotAvailable\n      },\n      onClick: this.clickHandler,\n      \"aria-hidden\": isNotAvailable,\n      mix: mix,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }\n    }, this.renderAttributeByType());\n  }\n\n}\n_ProductAttributeValue.propTypes = {\n  getLink: PropTypes.func,\n  onClick: PropTypes.func,\n  attribute: AttributeType.isRequired,\n  isSelected: PropTypes.bool,\n  isAvailable: PropTypes.bool,\n  mix: MixType,\n  isFormattedAsText: PropTypes.bool,\n  isProductCountVisible: PropTypes.bool\n};\n_ProductAttributeValue.defaultProps = {\n  isSelected: false,\n  onClick: function () {},\n  getLink: function () {},\n  mix: {},\n  isAvailable: true,\n  isFormattedAsText: false,\n  isProductCountVisible: false\n};\nObject.defineProperty(_ProductAttributeValue, 'name', {\n  value: 'ProductAttributeValue'\n});\n\nexport const ProductAttributeValue = middleware(_ProductAttributeValue, \"Component/ProductAttributeValue/Component\");\nexport default ProductAttributeValue;","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/packages/scandipwa/src/component/ProductAttributeValue/ProductAttributeValue.component.js"],"names":["PropTypes","PureComponent","Field","Html","MixType","AttributeType","STRING_ONLY_ATTRIBUTE_CODES","ProductAttributeValue","clickHandler","bind","getOptionLabel","_getBooleanLabel","label","__","getIsColorLight","hex","color","charAt","substring","r","parseInt","g","b","value","attribute","attribute_options","is_boolean","isProductCountVisible","props","optionValues","count","adjustedLabel","e","onClick","preventDefault","renderTextAttribute","attribute_value","renderStringValue","renderBooleanAttribute","renderMultiSelectAttribute","labelsArray","split","reduce","labels","push","length","join","renderSelectAttribute","attribute_code","attributeOption","swatch_data","includes","type","renderColorValue","renderImageValue","renderImageAttribute","attribute_label","renderPlaceholder","renderTextAreaAttribute","isFormattedAsText","isSelected","isLight","style","img","renderDropdown","block","elem","mods","isSwatch","renderNumericAttribute","parseFloat","toFixed","renderAttributeByType","attribute_type","render","getLink","isAvailable","mix","href","isNotAvailable","propTypes","func","isRequired","bool","defaultProps","Object","defineProperty","_ProductAttributeValue"],"mappings":"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","sourcesContent":["/* eslint-disable no-magic-numbers */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport Field from 'Component/Field';\nimport Html from 'Component/Html';\nimport { MixType } from 'Type/Common';\nimport { AttributeType } from 'Type/ProductList';\n\nimport { STRING_ONLY_ATTRIBUTE_CODES } from './ProductAttributeValue.config';\n\nimport './ProductAttributeValue.style';\n\n/** @namespace Component/ProductAttributeValue/Component */\nexport class ProductAttributeValue extends PureComponent {\n    static propTypes = {\n        getLink: PropTypes.func,\n        onClick: PropTypes.func,\n        attribute: AttributeType.isRequired,\n        isSelected: PropTypes.bool,\n        isAvailable: PropTypes.bool,\n        mix: MixType,\n        isFormattedAsText: PropTypes.bool,\n        isProductCountVisible: PropTypes.bool\n    };\n\n    static defaultProps = {\n        isSelected: false,\n        onClick: () => {},\n        getLink: () => {},\n        mix: {},\n        isAvailable: true,\n        isFormattedAsText: false,\n        isProductCountVisible: false\n    };\n\n    clickHandler = this.clickHandler.bind(this);\n\n    getOptionLabel = this.getOptionLabel.bind(this);\n\n    getIsColorLight(hex) {\n        const color = (hex.charAt(0) === '#') ? hex.substring(1, 7) : hex;\n        const r = parseInt(color.substring(0, 2), 16); // hexToR\n        const g = parseInt(color.substring(2, 4), 16); // hexToG\n        const b = parseInt(color.substring(4, 6), 16); // hexToB\n        return ((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186;\n    }\n\n    _getBooleanLabel = (label) => (+label ? __('Yes') : __('No'));\n\n    getOptionLabel(value) {\n        const {\n            attribute: {\n                attribute_options,\n                is_boolean\n            },\n            isProductCountVisible\n        } = this.props;\n\n        if (attribute_options) {\n            const optionValues = attribute_options[value];\n            if (optionValues) {\n                if (!isProductCountVisible) {\n                    return optionValues;\n                }\n\n                const { label, count = 0 } = optionValues;\n                const adjustedLabel = is_boolean ? this._getBooleanLabel(label) : label;\n\n                return {\n                    ...optionValues,\n                    label: `${adjustedLabel} (${count})`\n                };\n            }\n        }\n\n        return {};\n    }\n\n    clickHandler(e) {\n        const { onClick, attribute } = this.props;\n\n        e.preventDefault();\n        onClick(attribute);\n    }\n\n    renderTextAttribute() {\n        const { attribute: { attribute_value } } = this.props;\n        return this.renderStringValue(attribute_value);\n    }\n\n    renderBooleanAttribute() {\n        const { attribute: { attribute_value } } = this.props;\n        return this.renderStringValue(attribute_value ? __('Yes') : __('No'));\n    }\n\n    renderMultiSelectAttribute() {\n        const { attribute: { attribute_value } } = this.props;\n\n        const labelsArray = attribute_value.split(',').reduce((labels, value) => {\n            const { label } = this.getOptionLabel(value);\n            if (label) {\n                labels.push(label);\n            }\n\n            return labels;\n        }, []);\n\n        return this.renderStringValue(labelsArray.length ? labelsArray.join(', ') : __('N/A'));\n    }\n\n    renderSelectAttribute() {\n        const { attribute: { attribute_value, attribute_code } } = this.props;\n        const attributeOption = this.getOptionLabel(attribute_value);\n        const { label, swatch_data } = attributeOption;\n\n        if (!swatch_data || STRING_ONLY_ATTRIBUTE_CODES.includes(attribute_code)) {\n            return this.renderStringValue(label || __('N/A'));\n        }\n\n        const { value, type } = swatch_data;\n\n        switch (type) {\n        case '0':\n            return this.renderStringValue(value, label);\n        case '1':\n            return this.renderColorValue(value, label);\n        case '2':\n            return this.renderImageValue(value, label);\n        default:\n            return this.renderStringValue(label || __('N/A'));\n        }\n    }\n\n    renderImageAttribute() {\n        const {\n            attribute: {\n                attribute_label,\n                attribute_value\n            }\n        } = this.props;\n\n        if (!attribute_value || attribute_value === 'no_selection') {\n            return this.renderPlaceholder();\n        }\n\n        return (\n            <img\n              block=\"ProductAttributeValue\"\n              elem=\"MediaImage\"\n              src={ `/media/catalog/product${attribute_value}` }\n              alt={ attribute_label }\n            />\n        );\n    }\n\n    renderTextAreaAttribute() {\n        const {\n            attribute: { attribute_value }\n        } = this.props;\n\n        return (\n            <div\n              block=\"ProductAttributeValue\"\n              elem=\"TextArea\"\n            >\n                <Html content={ attribute_value } />\n            </div>\n        );\n    }\n\n    renderPlaceholder() {\n        return (\n            <div\n              block=\"ProductAttributeValue\"\n              elem=\"Placeholder\"\n            />\n        );\n    }\n\n    renderColorValue(color, label) {\n        const { isFormattedAsText, isSelected } = this.props;\n        const isLight = this.getIsColorLight(color);\n\n        if (isFormattedAsText) {\n            return label || __('N/A');\n        }\n\n        const style = {\n            '--option-background-color': color,\n            '--option-border-color': isLight ? '#000' : color,\n            '--option-check-mark-background': isLight ? '#000' : '#fff',\n            // stylelint-disable-next-line value-keyword-case\n            '--option-is-selected': isSelected ? 1 : 0\n        };\n\n        return (\n            <data\n              block=\"ProductAttributeValue\"\n              elem=\"Color\"\n              value={ label }\n              title={ label }\n              style={ style }\n            />\n        );\n    }\n\n    renderImageValue(img, label) {\n        const { isFormattedAsText, isSelected } = this.props;\n\n        if (isFormattedAsText) {\n            return label || __('N/A');\n        }\n\n        const style = {\n            // stylelint-disable-next-line value-keyword-case\n            '--option-is-selected': isSelected ? 1 : 0\n        };\n\n        return (\n            <>\n                <img\n                  block=\"ProductAttributeValue\"\n                  elem=\"Image\"\n                  src={ `/media/attribute/swatch${img}` }\n                  alt={ label }\n                />\n                <data\n                  block=\"ProductAttributeValue\"\n                  elem=\"Image-Overlay\"\n                  value={ label }\n                  title={ label }\n                  style={ style }\n                />\n            </>\n        );\n    }\n\n    renderDropdown(value) {\n        const { isSelected } = this.props;\n\n        return (\n            <Field\n              id={ value }\n              name={ value }\n              type=\"checkbox\"\n              label={ value }\n              value={ value }\n              mix={ {\n                  block: 'ProductAttributeValue',\n                  elem: 'Text',\n                  mods: { isSelected }\n              } }\n              checked={ isSelected }\n            />\n        );\n    }\n\n    renderStringValue(value, label) {\n        const { isFormattedAsText, isSelected } = this.props;\n        const isSwatch = label;\n\n        if (isFormattedAsText) {\n            return label || value || __('N/A');\n        }\n\n        if (!isSwatch) {\n            return this.renderDropdown(value);\n        }\n\n        return (\n            <span\n              block=\"ProductAttributeValue\"\n              elem=\"String\"\n              mods={ { isSelected } }\n              title={ label }\n            >\n                { value }\n            </span>\n        );\n    }\n\n    renderNumericAttribute() {\n        const { attribute: { attribute_value } } = this.props;\n        return this.renderStringValue(parseFloat(attribute_value).toFixed(2));\n    }\n\n    renderAttributeByType() {\n        const { attribute: { attribute_type } } = this.props;\n\n        switch (attribute_type) {\n        case 'select':\n            return this.renderSelectAttribute();\n        case 'boolean':\n            return this.renderBooleanAttribute();\n        case 'text':\n            return this.renderTextAttribute();\n        case 'multiselect':\n            return this.renderMultiSelectAttribute();\n        case 'media_image':\n            return this.renderImageAttribute();\n        case 'textarea':\n            return this.renderTextAreaAttribute();\n        case 'weight':\n            return this.renderNumericAttribute();\n        default:\n            return this.renderPlaceholder();\n        }\n    }\n\n    render() {\n        const {\n            getLink,\n            attribute,\n            isAvailable,\n            attribute: { attribute_code, attribute_value },\n            mix,\n            isFormattedAsText\n        } = this.props;\n\n        if (attribute_code && !attribute_value) {\n            return null;\n        }\n\n        const href = getLink(attribute);\n        // Invert to apply css rule without using not()\n        const isNotAvailable = !isAvailable;\n\n        if (isFormattedAsText) {\n            return (\n                <div\n                  block=\"ProductAttributeValue\"\n                  mix={ mix }\n                >\n                    { this.renderAttributeByType() }\n                </div>\n            );\n        }\n\n        return (\n            <a\n              href={ href }\n              block=\"ProductAttributeValue\"\n              mods={ { isNotAvailable } }\n              onClick={ this.clickHandler }\n              aria-hidden={ isNotAvailable }\n              mix={ mix }\n            >\n                { this.renderAttributeByType() }\n            </a>\n        );\n    }\n}\n\nexport default ProductAttributeValue;\n"]},"metadata":{},"sourceType":"module"}