{"ast":null,"code":"import _slicedToArray from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable fp/no-let */ /**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */import getStore from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Store\";// TODO: fix no LET\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */export var updateQueryParamWithoutHistory=middleware(function(name,value,history,location){var search=location.search,pathname=location.pathname;var params=new URLSearchParams(search);params.set(name,value);history.replace(decodeURIComponent(\"\".concat(pathname,\"?\").concat(params)));},\"Util/Url/updateQueryParamWithoutHistory\\n\");/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */export var removeQueryParamWithoutHistory=middleware(function(name,history,location){var search=location.search,pathname=location.pathname;var params=new URLSearchParams(search);params.delete(name);history.replace(decodeURIComponent(\"\".concat(pathname,\"?\").concat(params)));},\"Util/Url/removeQueryParamWithoutHistory\\n\");/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */export var getUrlParam=middleware(function(match,location){var baseUrl=match.path.replace(window.storeRegexText,'').replace('/','');var currentUrl=location.pathname.replace(new RegExp(window.storeRegexText),'');if(baseUrl==='/'){return currentUrl.replace(baseUrl,'');}return currentUrl.replace(baseUrl,'').replace(/^\\/*/,'');},\"Util/Url/getUrlParam\\n\");/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */export var appendWithStoreCode=middleware(function(pathname){var _ref=getStore().getState()||{},_ref$ConfigReducer=_ref.ConfigReducer;_ref$ConfigReducer=_ref$ConfigReducer===void 0?{}:_ref$ConfigReducer;var _ref$ConfigReducer$ba=_ref$ConfigReducer.base_link_url,base_link_url=_ref$ConfigReducer$ba===void 0?window.location.origin:_ref$ConfigReducer$ba;var _URL=new URL(base_link_url),storePrefix=_URL.pathname;// ignore empty URLs\nif(!pathname){return pathname;}// match URLs which have the store code in pathname\nif(pathname.match(\"/(\".concat(window.storeList.join('|'),\")\"))){return pathname;}if(!pathname.startsWith('/')){// eslint-disable-next-line no-param-reassign\npathname=\"/\".concat(pathname);}// trim the last slash from URL, and append it to pathname\nreturn storePrefix.slice(0,-1).concat(pathname);},\"Util/Url/appendWithStoreCode\\n\");/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */export var getQueryParam=middleware(function(variable,location){var query=location.search.substring(1);var vars=query.split('&');// eslint-disable-next-line fp/no-loops\nfor(var i=0;i<vars.length;i++){var pair=vars[i].split('=');if(pair[0]===variable){return pair[1];}}return false;},\"Util/Url/getQueryParam\\n\");/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */export var convertQueryStringToKeyValuePairs=middleware(function(queryString){var keyValuePairs={};var params=queryString.substring(1).split('&');params.forEach(function(param){var pair=param.split('=');var _pair=_slicedToArray(pair,2),keyPair=_pair[0],_pair$=_pair[1],valuePair=_pair$===void 0?[]:_pair$;if(keyPair.length>0&&valuePair.length>0){keyValuePairs[keyPair]=decodeURIComponent(valuePair);}});return keyValuePairs;},\"Util/Url/convertQueryStringToKeyValuePairs\\n\");/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */export var updateKeyValuePairs=middleware(function(keyValuePairs,currentKey,currentValue){var updatedKeyValuePairs={};Object.entries(keyValuePairs).forEach(function(pair){var _pair2=_slicedToArray(pair,2),key=_pair2[0],value=_pair2[1];if(currentKey===key){updatedKeyValuePairs[key]=currentValue;}else{updatedKeyValuePairs[key]=value;}});return updatedKeyValuePairs;},\"Util/Url/updateKeyValuePairs\\n\");/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */export var convertKeyValuesToQueryString=middleware(function(keyValuePairs){var newSearchQuery='';Object.entries(keyValuePairs).forEach(function(pair){var _pair3=_slicedToArray(pair,2),key=_pair3[0],value=_pair3[1];var keyExists=key!=='';var valueExists=typeof value==='object'?value.length:value!=='';if(valueExists&&keyExists){newSearchQuery+=\"\".concat(key,\"=\").concat(value,\"&\");}});return\"\".concat(newSearchQuery.slice(0,-1));// remove trailing '&'\n},\"Util/Url/convertKeyValuesToQueryString\\n\");/** @namespace Util/Url/generateQuery */export var generateQuery=middleware(function(keyValueObject,location,history){var query=history.location.search;Object.entries(keyValueObject).forEach(function(pair){var _pair4=_slicedToArray(pair,2),key=_pair4[0],value=_pair4[1];var keyAndValueExist=!!key&&!!value;if(query===''&&keyAndValueExist){query=\"?\".concat(key,\"=\").concat(value);}else if(getQueryParam(key,location)!==false){var keyValuePairs=convertQueryStringToKeyValuePairs(query);var updatedKeyValuePairs=updateKeyValuePairs(keyValuePairs,key,value);var updatedQuery=convertKeyValuesToQueryString(updatedKeyValuePairs);query=updatedQuery.length?\"?\".concat(updatedQuery):'';}else if(keyAndValueExist){query=\"\".concat(query,\"&\").concat(key,\"=\").concat(value);}});return query;},\"Util/Url/generateQuery\");/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */export var setQueryParams=middleware(function(keyValueObject,location,history){var state=location.state;var query=generateQuery(keyValueObject,location,history);history.push({search:query,state:state});},\"Util/Url/setQueryParams\\n\");/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */export var clearQueriesFromUrl=middleware(function(history){history.push({search:''});},\"Util/Url/clearQueriesFromUrl\\n\");/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */export var objectToUri=middleware(function(){var keyValueObject=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var paramString=Object.entries(keyValueObject).sort().reduce(function(acc,_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],value=_ref3[1];return\"\".concat(acc,\"&\").concat(key,\"=\").concat(value);},'').replace('&','');return paramString.length>0?\"?\".concat(paramString):'';},\"Util/Url/objectToUri\\n\");","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/util/Url/Url.js"],"names":["getStore","updateQueryParamWithoutHistory","name","value","history","location","search","pathname","params","URLSearchParams","set","replace","decodeURIComponent","removeQueryParamWithoutHistory","delete","getUrlParam","match","baseUrl","path","window","storeRegexText","currentUrl","RegExp","appendWithStoreCode","getState","ConfigReducer","base_link_url","origin","URL","storePrefix","storeList","join","startsWith","slice","concat","getQueryParam","variable","query","substring","vars","split","i","length","pair","convertQueryStringToKeyValuePairs","queryString","keyValuePairs","forEach","param","keyPair","valuePair","updateKeyValuePairs","currentKey","currentValue","updatedKeyValuePairs","Object","entries","key","convertKeyValuesToQueryString","newSearchQuery","keyExists","valueExists","generateQuery","keyValueObject","keyAndValueExist","updatedQuery","setQueryParams","state","push","clearQueriesFromUrl","objectToUri","paramString","sort","reduce","acc"],"mappings":"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","sourcesContent":["/* eslint-disable fp/no-let */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport getStore from 'Util/Store';\n\n// TODO: fix no LET\n\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */\nexport const updateQueryParamWithoutHistory = (name, value, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.set(name, value);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */\nexport const removeQueryParamWithoutHistory = (name, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.delete(name);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */\nexport const getUrlParam = (match, location) => {\n    const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n    const currentUrl = location.pathname.replace(new RegExp(window.storeRegexText), '');\n\n    if (baseUrl === '/') {\n        return currentUrl.replace(baseUrl, '');\n    }\n\n    return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n};\n\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */\nexport const appendWithStoreCode = (pathname) => {\n    const { ConfigReducer: { base_link_url = window.location.origin } = {} } = getStore().getState() || {};\n    const { pathname: storePrefix } = new URL(base_link_url);\n\n    // ignore empty URLs\n    if (!pathname) {\n        return pathname;\n    }\n\n    // match URLs which have the store code in pathname\n    if (pathname.match(`/(${window.storeList.join('|')})`)) {\n        return pathname;\n    }\n\n    if (!pathname.startsWith('/')) {\n        // eslint-disable-next-line no-param-reassign\n        pathname = `/${ pathname }`;\n    }\n\n    // trim the last slash from URL, and append it to pathname\n    return storePrefix.slice(0, -1).concat(pathname);\n};\n\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */\nexport const getQueryParam = (variable, location) => {\n    const query = location.search.substring(1);\n    const vars = query.split('&');\n    // eslint-disable-next-line fp/no-loops\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n\n    return false;\n};\n\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */\nexport const convertQueryStringToKeyValuePairs = (queryString) => {\n    const keyValuePairs = {};\n    const params = queryString.substring(1).split('&');\n\n    params.forEach((param) => {\n        const pair = param.split('=');\n        const [keyPair, valuePair = []] = pair;\n\n        if (keyPair.length > 0 && valuePair.length > 0) {\n            keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n        }\n    });\n\n    return keyValuePairs;\n};\n\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */\nexport const updateKeyValuePairs = (keyValuePairs, currentKey, currentValue) => {\n    const updatedKeyValuePairs = {};\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n\n        if (currentKey === key) {\n            updatedKeyValuePairs[key] = currentValue;\n        } else {\n            updatedKeyValuePairs[key] = value;\n        }\n    });\n\n    return updatedKeyValuePairs;\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */\nexport const convertKeyValuesToQueryString = (keyValuePairs) => {\n    let newSearchQuery = '';\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n        const keyExists = key !== '';\n        const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n        if (valueExists && keyExists) {\n            newSearchQuery += `${key}=${value}&`;\n        }\n    });\n\n    return `${newSearchQuery.slice(0, -1)}`; // remove trailing '&'\n};\n\n/** @namespace Util/Url/generateQuery */\nexport const generateQuery = (keyValueObject, location, history) => {\n    let query = history.location.search;\n\n    Object.entries(keyValueObject).forEach((pair) => {\n        const [key, value] = pair;\n\n        const keyAndValueExist = !!key && !!value;\n\n        if (query === '' && keyAndValueExist) {\n            query = `?${key}=${value}`;\n        } else if (getQueryParam(key, location) !== false) {\n            const keyValuePairs = convertQueryStringToKeyValuePairs(query);\n            const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n            const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n\n            query = updatedQuery.length ? `?${updatedQuery}` : '';\n        } else if (keyAndValueExist) {\n            query = `${query}&${key}=${value}`;\n        }\n    });\n\n    return query;\n};\n\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */\nexport const setQueryParams = (keyValueObject, location, history) => {\n    const { state } = location;\n    const query = generateQuery(keyValueObject, location, history);\n\n    history.push({ search: query, state });\n};\n\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */\nexport const clearQueriesFromUrl = (history) => {\n    history.push({ search: '' });\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */\nexport const objectToUri = (keyValueObject = {}) => {\n    const paramString = Object.entries(keyValueObject).sort()\n        .reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '')\n        .replace('&', '');\n\n    return paramString.length > 0 ? `?${paramString}` : '';\n};\n"]},"metadata":{},"sourceType":"module"}