{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{cacheNames}from'workbox-core/_private/cacheNames.js';import{getFriendlyURL}from'workbox-core/_private/getFriendlyURL.js';import{logger}from'workbox-core/_private/logger.js';import{getCacheKeyForURL}from\"./getCacheKeyForURL.js\";import\"../_version.js\";/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */export var addFetchListener=function addFetchListener(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$ignoreURLParamet=_ref.ignoreURLParametersMatching,ignoreURLParametersMatching=_ref$ignoreURLParamet===void 0?[/^utm_/]:_ref$ignoreURLParamet,_ref$directoryIndex=_ref.directoryIndex,directoryIndex=_ref$directoryIndex===void 0?'index.html':_ref$directoryIndex,_ref$cleanURLs=_ref.cleanURLs,cleanURLs=_ref$cleanURLs===void 0?true:_ref$cleanURLs,urlManipulation=_ref.urlManipulation;var cacheName=cacheNames.getPrecacheName();// See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\nself.addEventListener('fetch',function(event){var precachedURL=getCacheKeyForURL(event.request.url,{cleanURLs:cleanURLs,directoryIndex:directoryIndex,ignoreURLParametersMatching:ignoreURLParametersMatching,urlManipulation:urlManipulation});if(!precachedURL){if(process.env.NODE_ENV!=='production'){logger.debug(\"Precaching did not find a match for \"+getFriendlyURL(event.request.url));}return;}var responsePromise=self.caches.open(cacheName).then(function(cache){return cache.match(precachedURL);}).then(function(cachedResponse){if(cachedResponse){return cachedResponse;}// Fall back to the network if we don't have a cached response\n// (perhaps due to manual cache cleanup).\nif(process.env.NODE_ENV!=='production'){logger.warn(\"The precached response for \"+\"\".concat(getFriendlyURL(precachedURL),\" in \").concat(cacheName,\" was not found. \")+\"Falling back to the network instead.\");}return fetch(precachedURL);});if(process.env.NODE_ENV!=='production'){responsePromise=responsePromise.then(function(response){// Workbox is going to handle the route.\n// print the routing details to the console.\nlogger.groupCollapsed(\"Precaching is responding to: \"+getFriendlyURL(event.request.url));logger.log(\"Serving the precached url: \".concat(precachedURL));logger.groupCollapsed(\"View request details here.\");logger.log(event.request);logger.groupEnd();logger.groupCollapsed(\"View response details here.\");logger.log(response);logger.groupEnd();logger.groupEnd();return response;});}event.respondWith(responsePromise);});};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-precaching/utils/addFetchListener.js"],"names":["cacheNames","getFriendlyURL","logger","getCacheKeyForURL","addFetchListener","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","cacheName","getPrecacheName","self","addEventListener","event","precachedURL","request","url","process","env","NODE_ENV","debug","responsePromise","caches","open","then","cache","match","cachedResponse","warn","fetch","response","groupCollapsed","log","groupEnd","respondWith"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASA,UAAT,KAA2B,qCAA3B,CACA,OAASC,cAAT,KAA+B,yCAA/B,CACA,OAASC,MAAT,KAAuB,iCAAvB,CACA,OAASC,iBAAT,8BACA,uBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAyH,oEAAP,EAAO,4BAAtHC,2BAAsH,CAAtHA,2BAAsH,gCAAxF,CAAC,OAAD,CAAwF,gDAA7EC,cAA6E,CAA7EA,cAA6E,8BAA5D,YAA4D,yCAA9CC,SAA8C,CAA9CA,SAA8C,yBAAlC,IAAkC,gBAA5BC,eAA4B,MAA5BA,eAA4B,CACrJ,GAAMC,CAAAA,SAAS,CAAGT,UAAU,CAACU,eAAX,EAAlB,CACA;AACAC,IAAI,CAACC,gBAAL,CAAsB,OAAtB,CAAgC,SAACC,KAAD,CAAW,CACvC,GAAMC,CAAAA,YAAY,CAAGX,iBAAiB,CAACU,KAAK,CAACE,OAAN,CAAcC,GAAf,CAAoB,CACtDT,SAAS,CAATA,SADsD,CAEtDD,cAAc,CAAdA,cAFsD,CAGtDD,2BAA2B,CAA3BA,2BAHsD,CAItDG,eAAe,CAAfA,eAJsD,CAApB,CAAtC,CAMA,GAAI,CAACM,YAAL,CAAmB,CACf,GAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCjB,MAAM,CAACkB,KAAP,CAAa,uCACTnB,cAAc,CAACY,KAAK,CAACE,OAAN,CAAcC,GAAf,CADlB,EAEH,CACD,OACH,CACD,GAAIK,CAAAA,eAAe,CAAGV,IAAI,CAACW,MAAL,CAAYC,IAAZ,CAAiBd,SAAjB,EAA4Be,IAA5B,CAAiC,SAACC,KAAD,CAAW,CAC9D,MAAOA,CAAAA,KAAK,CAACC,KAAN,CAAYZ,YAAZ,CAAP,CACH,CAFqB,EAEnBU,IAFmB,CAEd,SAACG,cAAD,CAAoB,CACxB,GAAIA,cAAJ,CAAoB,CAChB,MAAOA,CAAAA,cAAP,CACH,CACD;AACA;AACA,GAAIV,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCjB,MAAM,CAAC0B,IAAP,CAAY,wCACL3B,cAAc,CAACa,YAAD,CADT,gBAC8BL,SAD9B,2DAAZ,EAGH,CACD,MAAOoB,CAAAA,KAAK,CAACf,YAAD,CAAZ,CACH,CAdqB,CAAtB,CAeA,GAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCE,eAAe,CAAGA,eAAe,CAACG,IAAhB,CAAqB,SAACM,QAAD,CAAc,CACjD;AACA;AACA5B,MAAM,CAAC6B,cAAP,CAAsB,gCAClB9B,cAAc,CAACY,KAAK,CAACE,OAAN,CAAcC,GAAf,CADlB,EAEAd,MAAM,CAAC8B,GAAP,sCAAyClB,YAAzC,GACAZ,MAAM,CAAC6B,cAAP,+BACA7B,MAAM,CAAC8B,GAAP,CAAWnB,KAAK,CAACE,OAAjB,EACAb,MAAM,CAAC+B,QAAP,GACA/B,MAAM,CAAC6B,cAAP,gCACA7B,MAAM,CAAC8B,GAAP,CAAWF,QAAX,EACA5B,MAAM,CAAC+B,QAAP,GACA/B,MAAM,CAAC+B,QAAP,GACA,MAAOH,CAAAA,QAAP,CACH,CAdiB,CAAlB,CAeH,CACDjB,KAAK,CAACqB,WAAN,CAAkBb,eAAlB,EACH,CA/CD,EAgDH,CAnDM","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\n    const cacheName = cacheNames.getPrecacheName();\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', ((event) => {\n        const precachedURL = getCacheKeyForURL(event.request.url, {\n            cleanURLs,\n            directoryIndex,\n            ignoreURLParametersMatching,\n            urlManipulation,\n        });\n        if (!precachedURL) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(event.request.url));\n            }\n            return;\n        }\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\n            return cache.match(precachedURL);\n        }).then((cachedResponse) => {\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            // Fall back to the network if we don't have a cached response\n            // (perhaps due to manual cache cleanup).\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\n                    `Falling back to the network instead.`);\n            }\n            return fetch(precachedURL);\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            responsePromise = responsePromise.then((response) => {\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(`Precaching is responding to: ` +\n                    getFriendlyURL(event.request.url));\n                logger.log(`Serving the precached url: ${precachedURL}`);\n                logger.groupCollapsed(`View request details here.`);\n                logger.log(event.request);\n                logger.groupEnd();\n                logger.groupCollapsed(`View response details here.`);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n                return response;\n            });\n        }\n        event.respondWith(responsePromise);\n    }));\n};\n"]},"metadata":{},"sourceType":"module"}