{"ast":null,"code":"import _toConsumableArray from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var _this=this;/* eslint-disable @scandipwa/scandipwa-guidelines/create-config-files */ /* eslint-disable no-console */ /**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */import{getAuthorizationToken}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Auth\";import{getCurrency}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Currency\";import{hash}from\"./Hash\";export var GRAPHQL_URI='/graphql';export var WINDOW_ID='WINDOW_ID';/** @namespace Util/Request/getWindowId */export var getWindowId=middleware(function(){var result=sessionStorage.getItem(WINDOW_ID);if(!result){var id=Date.now();sessionStorage.setItem(WINDOW_ID,id);return id;}return result;},\"Util/Request/getWindowId\");/** @namespace Util/Request/getStoreCodePath */export var getStoreCodePath=middleware(function(){var path=location.pathname;// eslint-disable-next-line no-undef\nvar firstPathPart=path.split('/')[1];if(window.storeList.includes(firstPathPart)){return\"/\".concat(firstPathPart);}return'';},\"Util/Request/getStoreCodePath\");/** @namespace Util/Request/getGraphqlEndpoint */export var getGraphqlEndpoint=middleware(function(){return getStoreCodePath().concat(GRAPHQL_URI);},\"Util/Request/getGraphqlEndpoint\");/**\n * Append authorization token to header object\n * @param {Object} headers\n * @returns {Object} Headers with appended authorization\n * @namespace Util/Request/appendTokenToHeaders\n */export var appendTokenToHeaders=middleware(function(headers){var token=getAuthorizationToken();return _objectSpread(_objectSpread({},headers),{},{Authorization:token?\"Bearer \".concat(token):''});},\"Util/Request/appendTokenToHeaders\\n\");/**\n *\n * @param {String} query Request body\n * @param {Object} variables Request variables\n * @param {String} url GraphQL url\n * @returns {*}\n * @namespace Util/Request/formatURI\n */export var formatURI=middleware(function(query,variables,url){// eslint-disable-next-line no-param-reassign\nvariables._currency=getCurrency();var stringifyVariables=Object.keys(variables).reduce(function(acc,variable){return[].concat(_toConsumableArray(acc),[\"\".concat(variable,\"=\").concat(JSON.stringify(variables[variable]))]);},[\"?hash=\".concat(hash(query))]);return\"\".concat(url).concat(stringifyVariables.join('&'));},\"Util/Request/formatURI\\n\");/**\n *\n * @param {String} uri\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/getFetch\n */export var getFetch=middleware(function(uri,name){return fetch(uri,{method:'GET',headers:appendTokenToHeaders({'Content-Type':'application/json','Application-Model':\"\".concat(name,\"_\").concat(getWindowId()),Accept:'application/json'})});},\"Util/Request/getFetch\\n\");/**\n *\n * @param {String} graphQlURI\n * @param {{}} query Request body\n * @param {Int} cacheTTL\n * @namespace Util/Request/putPersistedQuery\n */export var putPersistedQuery=middleware(function(graphQlURI,query,cacheTTL){return fetch(\"\".concat(graphQlURI,\"?hash=\").concat(hash(query)),{method:'PUT',body:JSON.stringify(query),headers:{'Content-Type':'application/json','SW-Cache-Age':cacheTTL}});},\"Util/Request/putPersistedQuery\\n\");/**\n *\n * @param {String} graphQlURI\n * @param {String} queryObject\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/postFetch\n */export var postFetch=middleware(function(graphQlURI,query,variables){return fetch(graphQlURI,{method:'POST',body:JSON.stringify({query:query,variables:variables}),headers:appendTokenToHeaders({'Content-Type':'application/json',Accept:'application/json'})});},\"Util/Request/postFetch\\n\");/**\n * Checks for errors in response, if they exist, rejects promise\n * @param  {Object} res Response from GraphQL endpoint\n * @return {Promise<Object>} Handled GraphqlQL results promise\n * @namespace Util/Request/checkForErrors\n */export var checkForErrors=middleware(function(res){return new Promise(function(resolve,reject){var errors=res.errors,data=res.data;return errors?reject(errors):resolve(data);});},\"Util/Request/checkForErrors\\n\");/**\n * Handle connection errors\n * @param  {any} err Error from fetch\n * @return {void} Simply console error\n * @namespace Util/Request/handleConnectionError\n */export var handleConnectionError=middleware(function(err){return console.error(err);},\"Util/Request/handleConnectionError\\n\");// TODO: Add to logs pool\n/**\n * Parse response and check wether it contains errors\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/parseResponse\n */export var parseResponse=middleware(function(promise){return new Promise(function(resolve,reject){promise.then(/** @namespace Util/Request/promiseThen */middleware(function(res){return res.json().then(/** @namespace Util/Request/resJsonThen */middleware(function(res){return resolve(checkForErrors(res));},\"Util/Request/resJsonThen\"),/** @namespace Util/Request/resJsonError */middleware(function(){return handleConnectionError('Can not transform JSON!')&&reject();},\"Util/Request/resJsonError\"));},\"Util/Request/promiseThen\"),/** @namespace Util/Request/promiseError */middleware(function(err){return handleConnectionError('Can not establish connection!')&&reject(err);},\"Util/Request/promiseError\"));});},\"Util/Request/parseResponse\\n\");export var HTTP_410_GONE=410;export var HTTP_201_CREATED=201;/**\n * Make GET request to endpoint (via ServiceWorker)\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executeGet\n */export var executeGet=middleware(function(queryObject,name,cacheTTL){var query=queryObject.query,variables=queryObject.variables;var uri=formatURI(query,variables,getGraphqlEndpoint());return parseResponse(new Promise(function(resolve){getFetch(uri,name).then(/** @namespace Util/Request/getFetchThen */middleware(function(res){if(res.status===HTTP_410_GONE){putPersistedQuery(getGraphqlEndpoint(),query,cacheTTL).then(/** @namespace Util/Request/putPersistedQueryThen */middleware(function(putResponse){if(putResponse.status===HTTP_201_CREATED){getFetch(uri,name).then(/** @namespace Util/Request/putResponseGetFetchThen */middleware(function(res){return resolve(res);},\"Util/Request/putResponseGetFetchThen\"));}},\"Util/Request/putPersistedQueryThen\"));}else{resolve(res);}},\"Util/Request/getFetchThen\"));}));},\"Util/Request/executeGet\\n\");/**\n * Make POST request to endpoint\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executePost\n */export var executePost=middleware(function(queryObject){var query=queryObject.query,variables=queryObject.variables;return parseResponse(postFetch(getGraphqlEndpoint(),query,variables));},\"Util/Request/executePost\\n\");/**\n * Listen to the BroadCast connection\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @return {Promise<any>} Broadcast message promise\n * @namespace Util/Request/listenForBroadCast\n */export var listenForBroadCast=middleware(function(name){return new Promise(function(resolve){var _window=window,BroadcastChannel=_window.BroadcastChannel;var windowId=getWindowId();if(BroadcastChannel){var bc=new BroadcastChannel(\"\".concat(name,\"_\").concat(windowId));bc.onmessage=function(update){var body=update.data.payload;resolve(checkForErrors(body));};}});},\"Util/Request/listenForBroadCast\\n\");/** @namespace Util/Request/debounce */export var debounce=middleware(function(callback,delay){// eslint-disable-next-line fp/no-let\nvar timeout;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var context=_this;clearTimeout(timeout);timeout=setTimeout(function(){return callback.apply(context,args);},delay);};},\"Util/Request/debounce\");","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/util/Request/Request.js"],"names":["getAuthorizationToken","getCurrency","hash","GRAPHQL_URI","WINDOW_ID","getWindowId","result","sessionStorage","getItem","id","Date","now","setItem","getStoreCodePath","path","location","pathname","firstPathPart","split","window","storeList","includes","getGraphqlEndpoint","concat","appendTokenToHeaders","headers","token","Authorization","formatURI","query","variables","url","_currency","stringifyVariables","Object","keys","reduce","acc","variable","JSON","stringify","join","getFetch","uri","name","fetch","method","Accept","putPersistedQuery","graphQlURI","cacheTTL","body","postFetch","checkForErrors","res","Promise","resolve","reject","errors","data","handleConnectionError","err","console","error","parseResponse","promise","then","json","HTTP_410_GONE","HTTP_201_CREATED","executeGet","queryObject","status","putResponse","executePost","listenForBroadCast","BroadcastChannel","windowId","bc","onmessage","update","payload","debounce","callback","delay","timeout","args","context","clearTimeout","setTimeout","apply"],"mappings":"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","sourcesContent":["/* eslint-disable @scandipwa/scandipwa-guidelines/create-config-files */\n/* eslint-disable no-console */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { getAuthorizationToken } from 'Util/Auth';\nimport { getCurrency } from 'Util/Currency';\n\nimport { hash } from './Hash';\n\nexport const GRAPHQL_URI = '/graphql';\nexport const WINDOW_ID = 'WINDOW_ID';\n\n/** @namespace Util/Request/getWindowId */\nexport const getWindowId = () => {\n    const result = sessionStorage.getItem(WINDOW_ID);\n\n    if (!result) {\n        const id = Date.now();\n        sessionStorage.setItem(WINDOW_ID, id);\n        return id;\n    }\n\n    return result;\n};\n\n/** @namespace Util/Request/getStoreCodePath */\nexport const getStoreCodePath = () => {\n    const path = location.pathname;\n    // eslint-disable-next-line no-undef\n    const firstPathPart = path.split('/')[1];\n\n    if (window.storeList.includes(firstPathPart)) {\n        return `/${ firstPathPart }`;\n    }\n\n    return '';\n};\n\n/** @namespace Util/Request/getGraphqlEndpoint */\nexport const getGraphqlEndpoint = () => getStoreCodePath().concat(GRAPHQL_URI);\n\n/**\n * Append authorization token to header object\n * @param {Object} headers\n * @returns {Object} Headers with appended authorization\n * @namespace Util/Request/appendTokenToHeaders\n */\nexport const appendTokenToHeaders = (headers) => {\n    const token = getAuthorizationToken();\n\n    return {\n        ...headers,\n        Authorization: token ? `Bearer ${token}` : ''\n    };\n};\n\n/**\n *\n * @param {String} query Request body\n * @param {Object} variables Request variables\n * @param {String} url GraphQL url\n * @returns {*}\n * @namespace Util/Request/formatURI\n */\nexport const formatURI = (query, variables, url) => {\n    // eslint-disable-next-line no-param-reassign\n    variables._currency = getCurrency();\n\n    const stringifyVariables = Object.keys(variables).reduce(\n        (acc, variable) => [...acc, `${ variable }=${ JSON.stringify(variables[variable]) }`],\n        [`?hash=${ hash(query) }`]\n    );\n\n    return `${ url }${ stringifyVariables.join('&') }`;\n};\n\n/**\n *\n * @param {String} uri\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/getFetch\n */\nexport const getFetch = (uri, name) => fetch(uri,\n    {\n        method: 'GET',\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            'Application-Model': `${ name }_${ getWindowId() }`,\n            Accept: 'application/json'\n        })\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {{}} query Request body\n * @param {Int} cacheTTL\n * @namespace Util/Request/putPersistedQuery\n */\nexport const putPersistedQuery = (graphQlURI, query, cacheTTL) => fetch(`${ graphQlURI }?hash=${ hash(query) }`,\n    {\n        method: 'PUT',\n        body: JSON.stringify(query),\n        headers: {\n            'Content-Type': 'application/json',\n            'SW-Cache-Age': cacheTTL\n        }\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {String} queryObject\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/postFetch\n */\nexport const postFetch = (graphQlURI, query, variables) => fetch(graphQlURI,\n    {\n        method: 'POST',\n        body: JSON.stringify({ query, variables }),\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        })\n    });\n\n/**\n * Checks for errors in response, if they exist, rejects promise\n * @param  {Object} res Response from GraphQL endpoint\n * @return {Promise<Object>} Handled GraphqlQL results promise\n * @namespace Util/Request/checkForErrors\n */\nexport const checkForErrors = (res) => new Promise((resolve, reject) => {\n    const { errors, data } = res;\n    return errors ? reject(errors) : resolve(data);\n});\n\n/**\n * Handle connection errors\n * @param  {any} err Error from fetch\n * @return {void} Simply console error\n * @namespace Util/Request/handleConnectionError\n */\nexport const handleConnectionError = (err) => console.error(err); // TODO: Add to logs pool\n\n/**\n * Parse response and check wether it contains errors\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/parseResponse\n */\nexport const parseResponse = (promise) => new Promise((resolve, reject) => {\n    promise.then(\n        /** @namespace Util/Request/promiseThen */\n        (res) => res.json().then(\n            /** @namespace Util/Request/resJsonThen */\n            (res) => resolve(checkForErrors(res)),\n            /** @namespace Util/Request/resJsonError */\n            () => handleConnectionError('Can not transform JSON!') && reject()\n        ),\n        /** @namespace Util/Request/promiseError */\n        (err) => handleConnectionError('Can not establish connection!') && reject(err)\n    );\n});\n\nexport const HTTP_410_GONE = 410;\nexport const HTTP_201_CREATED = 201;\n\n/**\n * Make GET request to endpoint (via ServiceWorker)\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executeGet\n */\nexport const executeGet = (queryObject, name, cacheTTL) => {\n    const { query, variables } = queryObject;\n    const uri = formatURI(query, variables, getGraphqlEndpoint());\n\n    return parseResponse(new Promise((resolve) => {\n        getFetch(uri, name).then(\n            /** @namespace Util/Request/getFetchThen */\n            (res) => {\n                if (res.status === HTTP_410_GONE) {\n                    putPersistedQuery(getGraphqlEndpoint(), query, cacheTTL).then(\n                        /** @namespace Util/Request/putPersistedQueryThen */\n                        (putResponse) => {\n                            if (putResponse.status === HTTP_201_CREATED) {\n                                getFetch(uri, name).then(\n                                    /** @namespace Util/Request/putResponseGetFetchThen */\n                                    (res) => resolve(res)\n                                );\n                            }\n                        }\n                    );\n                } else {\n                    resolve(res);\n                }\n            }\n        );\n    }));\n};\n\n/**\n * Make POST request to endpoint\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executePost\n */\nexport const executePost = (queryObject) => {\n    const { query, variables } = queryObject;\n    return parseResponse(postFetch(getGraphqlEndpoint(), query, variables));\n};\n\n/**\n * Listen to the BroadCast connection\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @return {Promise<any>} Broadcast message promise\n * @namespace Util/Request/listenForBroadCast\n */\nexport const listenForBroadCast = (name) => new Promise((resolve) => {\n    const { BroadcastChannel } = window;\n    const windowId = getWindowId();\n\n    if (BroadcastChannel) {\n        const bc = new BroadcastChannel(`${ name }_${ windowId }`);\n        bc.onmessage = (update) => {\n            const { data: { payload: body } } = update;\n            resolve(checkForErrors(body));\n        };\n    }\n});\n\n/** @namespace Util/Request/debounce */\nexport const debounce = (callback, delay) => {\n    // eslint-disable-next-line fp/no-let\n    let timeout;\n    return (...args) => {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => callback.apply(context, args), delay);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}