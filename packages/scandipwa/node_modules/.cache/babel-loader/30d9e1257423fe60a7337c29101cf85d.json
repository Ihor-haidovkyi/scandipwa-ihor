{"ast":null,"code":"import _classCallCheck from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _get from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";import _getPrototypeOf from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* eslint-disable no-unused-vars */ /**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */import{makeCancelable}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Promise\";import{Field,prepareQuery}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Query\";import{executeGet,listenForBroadCast}from\"/home/marketihor/scandipwa/packages/scandipwa/src/util/Request/Request\";export var ONE_MONTH_IN_SECONDS=2592000;export var FIVE_MINUTES_IN_SECONDS=300;/**\n * Abstract request dispatcher.\n * IMPORTANT: it is required to implement `prepareRequest(options)` before using!\n * @class QueryDispatcher\n * @namespace Util/Request/QueryDispatcher\n */export var _QueryDispatcher=/*#__PURE__*/function(_Extensible){_inherits(_QueryDispatcher,_Extensible);var _super=_createSuper(_QueryDispatcher);function _QueryDispatcher(){_classCallCheck(this,_QueryDispatcher);return _super.apply(this,arguments);}_createClass(_QueryDispatcher,[{key:\"__construct\",value:/**\n     * Creates an instance of QueryDispatcher.\n     * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n     * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n     * @memberof QueryDispatcher\n     */function __construct(name){var cacheTTL=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ONE_MONTH_IN_SECONDS;_get(_getPrototypeOf(_QueryDispatcher.prototype),\"__construct\",this).call(this);this.name=name;this.cacheTTL=cacheTTL;this.promise=null;}/**\n     * Is responsible for request routing and manages `onError`, `onSuccess`, `onUpdate` functions triggers.\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @param  {any} options Any options received from Container\n     * @return {void}@memberof QueryDispatcher\n     */},{key:\"handleData\",value:function handleData(dispatch,options){var _this=this;var name=this.name,cacheTTL=this.cacheTTL;var rawQueries=this.prepareRequest(options,dispatch);if(!rawQueries){return;}var queries=rawQueries instanceof Field?[rawQueries]:rawQueries;if(this.promise){this.promise.cancel();}this.promise=makeCancelable(new Promise(function(resolve,reject){executeGet(prepareQuery(queries),name,cacheTTL).then(/** @namespace Util/Request/QueryDispatcher/handleData/executeGetThen */middleware(function(data){return resolve(data);},\"Util/Request/QueryDispatcher/handleData/executeGetThen\"),/** @namespace Util/Request/QueryDispatcher/handleData/executeGetError */middleware(function(error){return reject(error);},\"Util/Request/QueryDispatcher/handleData/executeGetError\"));}));this.promise.promise.then(/** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen */middleware(function(data){return _this.onSuccess(data,dispatch,options);},\"Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen\"),/** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseError */middleware(function(error){return _this.onError(error,dispatch,options);},\"Util/Request/QueryDispatcher/handleData/thisPromisePromiseError\"));listenForBroadCast(name).then(/** @namespace Util/Request/QueryDispatcher/handleData/listenForBroadCastThen */middleware(function(data){return _this.onUpdate(data,dispatch,options);},\"Util/Request/QueryDispatcher/handleData/listenForBroadCastThen\"));}/**\n     * Is triggered by BroadCast updated from ServiceWorker.\n     * Should dispatch some action.\n     * @param  {any} data Data received from fetch of GraphQL endpoint\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @return {void}\n     * @memberof QueryDispatcher\n     */},{key:\"onUpdate\",value:function onUpdate(data,dispatch,options){this.onSuccess(data,dispatch,options);}/**\n     * Is responsible for request building (request & mutation preparation)\n     * @param  {any} options Any options received from Container\n     * @param {Function} dispatch\n     * @return {Array<Field>|Field} Array or single item of Field instances\n     * @memberof QueryDispatcher\n     */},{key:\"prepareRequest\",value:function prepareRequest(options,dispatch){}/**\n     * Is triggered on successful fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function won't trigger!\n     * Should dispatch some action.\n     * @param  {any} data\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */},{key:\"onSuccess\",value:function onSuccess(data,dispatch){}/**\n     * Is triggered on error in fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function will trigger!\n     * Should dispatch some action.\n     * @param  {any} error\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */},{key:\"onError\",value:function onError(error,dispatch){}}]);return _QueryDispatcher;}(Extensible());Object.defineProperty(_QueryDispatcher,'name',{value:'QueryDispatcher'});export var QueryDispatcher=middleware(_QueryDispatcher,\"Util/Request/QueryDispatcher\");export default QueryDispatcher;","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/util/Request/QueryDispatcher.js"],"names":["makeCancelable","Field","prepareQuery","executeGet","listenForBroadCast","ONE_MONTH_IN_SECONDS","FIVE_MINUTES_IN_SECONDS","QueryDispatcher","name","cacheTTL","promise","dispatch","options","rawQueries","prepareRequest","queries","cancel","Promise","resolve","reject","then","data","error","onSuccess","onError","onUpdate","Object","defineProperty","_QueryDispatcher","value"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { makeCancelable } from 'Util/Promise';\nimport { Field, prepareQuery } from 'Util/Query';\nimport { executeGet, listenForBroadCast } from 'Util/Request/Request';\n\nexport const ONE_MONTH_IN_SECONDS = 2592000;\nexport const FIVE_MINUTES_IN_SECONDS = 300;\n\n/**\n * Abstract request dispatcher.\n * IMPORTANT: it is required to implement `prepareRequest(options)` before using!\n * @class QueryDispatcher\n * @namespace Util/Request/QueryDispatcher\n */\nexport class QueryDispatcher {\n    /**\n     * Creates an instance of QueryDispatcher.\n     * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n     * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n     * @memberof QueryDispatcher\n     */\n    __construct(name, cacheTTL = ONE_MONTH_IN_SECONDS) {\n        super.__construct();\n        this.name = name;\n        this.cacheTTL = cacheTTL;\n        this.promise = null;\n    }\n\n    /**\n     * Is responsible for request routing and manages `onError`, `onSuccess`, `onUpdate` functions triggers.\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @param  {any} options Any options received from Container\n     * @return {void}@memberof QueryDispatcher\n     */\n    handleData(dispatch, options) {\n        const { name, cacheTTL } = this;\n\n        const rawQueries = this.prepareRequest(options, dispatch);\n\n        if (!rawQueries) {\n            return;\n        }\n\n        const queries = rawQueries instanceof Field ? [rawQueries] : rawQueries;\n\n        if (this.promise) {\n            this.promise.cancel();\n        }\n\n        this.promise = makeCancelable(\n            new Promise((resolve, reject) => {\n                executeGet(prepareQuery(queries), name, cacheTTL)\n                    .then(\n                        /** @namespace Util/Request/QueryDispatcher/handleData/executeGetThen */\n                        (data) => resolve(data),\n                        /** @namespace Util/Request/QueryDispatcher/handleData/executeGetError */\n                        (error) => reject(error)\n                    );\n            })\n        );\n\n        this.promise.promise.then(\n            /** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen */\n            (data) => this.onSuccess(data, dispatch, options),\n            /** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseError */\n            (error) => this.onError(error, dispatch, options),\n        );\n\n        listenForBroadCast(name).then(\n            /** @namespace Util/Request/QueryDispatcher/handleData/listenForBroadCastThen */\n            (data) => this.onUpdate(data, dispatch, options),\n        );\n    }\n\n    /**\n     * Is triggered by BroadCast updated from ServiceWorker.\n     * Should dispatch some action.\n     * @param  {any} data Data received from fetch of GraphQL endpoint\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @return {void}\n     * @memberof QueryDispatcher\n     */\n    onUpdate(data, dispatch, options) {\n        this.onSuccess(data, dispatch, options);\n    }\n\n    /**\n     * Is responsible for request building (request & mutation preparation)\n     * @param  {any} options Any options received from Container\n     * @param {Function} dispatch\n     * @return {Array<Field>|Field} Array or single item of Field instances\n     * @memberof QueryDispatcher\n     */\n    prepareRequest(options, dispatch) {}\n\n    /**\n     * Is triggered on successful fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function won't trigger!\n     * Should dispatch some action.\n     * @param  {any} data\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */\n    onSuccess(data, dispatch) {}\n\n    /**\n     * Is triggered on error in fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function will trigger!\n     * Should dispatch some action.\n     * @param  {any} error\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */\n    onError(error, dispatch) {}\n}\n\nexport default QueryDispatcher;\n"]},"metadata":{},"sourceType":"module"}