{"ast":null,"code":"import _asyncToGenerator from \"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/component/MyAccountCreateAccount/MyAccountCreateAccount.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { STATE_CONFIRM_EMAIL } from \"/home/marketihor/scandipwa/packages/scandipwa/src/component/MyAccountOverlay/MyAccountOverlay.config\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport MyAccountCreateAccount from \"./MyAccountCreateAccount.component\";\nimport { SHOW_VAT_NUMBER_REQUIRED } from \"./MyAccountCreateAccount.config\";\nexport const MyAccountDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/marketihor/scandipwa/packages/scandipwa/src/store/MyAccount/MyAccount.dispatcher\");\n/** @namespace Component/MyAccountCreateAccount/Container/mapStateToProps */\n// eslint-disable-next-line no-unused-vars\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    isLoading: state.MyAccountReducer.isLoading,\n    showTaxVatNumber: !!state.ConfigReducer.show_tax_vat_number,\n    newsletterActive: state.ConfigReducer.newsletter_general_active\n  };\n}, \"Component/MyAccountCreateAccount/Container/mapStateToProps\");\n/** @namespace Component/MyAccountCreateAccount/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    createAccount: function (options) {\n      return MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.createAccount(options, dispatch);\n      });\n    },\n    showNotification: function (type, message) {\n      return dispatch(showNotification(type, message));\n    }\n  };\n}, \"Component/MyAccountCreateAccount/Container/mapDispatchToProps\");\n/** @namespace Component/MyAccountCreateAccount/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _MyAccountCreateAccountContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.containerProps = {\n      vatNumberValidation: this.getVatNumberValidation()\n    };\n    this.containerFunctions = {\n      onCreateAccountSuccess: this.onCreateAccountSuccess.bind(this),\n      onCreateAccountAttempt: this.onCreateAccountAttempt.bind(this)\n    };\n  }\n\n  getVatNumberValidation() {\n    const {\n      showTaxVatNumber\n    } = this.props;\n\n    if (showTaxVatNumber === SHOW_VAT_NUMBER_REQUIRED) {\n      return ['notEmpty'];\n    }\n\n    return [];\n  }\n\n  onCreateAccountAttempt(_, invalidFields) {\n    const {\n      showNotification,\n      setLoadingState\n    } = this.props;\n\n    if (invalidFields) {\n      showNotification('info', __('Incorrect data! Please resolve all field validation errors.'));\n    }\n\n    setLoadingState(!invalidFields);\n  }\n\n  onCreateAccountSuccess(fields) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        createAccount,\n        onSignIn,\n        setSignInState,\n        setLoadingState,\n        isLoading\n      } = _this.props;\n      const {\n        password,\n        email,\n        firstname,\n        lastname,\n        is_subscribed,\n        taxvat\n      } = fields;\n      const customerData = {\n        customer: {\n          firstname,\n          lastname,\n          email,\n          is_subscribed,\n          taxvat\n        },\n        password\n      };\n\n      if (isLoading) {\n        return;\n      }\n\n      try {\n        const code = yield createAccount(customerData); // if user needs confirmation\n\n        if (code === 2) {\n          setSignInState(STATE_CONFIRM_EMAIL);\n        } else {\n          onSignIn();\n        }\n      } finally {\n        setLoadingState(false);\n      }\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, MyAccountCreateAccount, Object.assign({}, this.props, this.containerProps, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n_MyAccountCreateAccountContainer.propTypes = {\n  createAccount: PropTypes.func.isRequired,\n  onSignIn: PropTypes.func.isRequired,\n  setSignInState: PropTypes.func.isRequired,\n  setLoadingState: PropTypes.func.isRequired,\n  showNotification: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  showTaxVatNumber: PropTypes.string.isRequired\n};\nObject.defineProperty(_MyAccountCreateAccountContainer, 'name', {\n  value: 'MyAccountCreateAccountContainer'\n});\n\nexport const MyAccountCreateAccountContainer = middleware(_MyAccountCreateAccountContainer, \"Component/MyAccountCreateAccount/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountCreateAccountContainer);","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/component/MyAccountCreateAccount/MyAccountCreateAccount.container.js"],"names":["PropTypes","PureComponent","connect","STATE_CONFIRM_EMAIL","showNotification","MyAccountCreateAccount","SHOW_VAT_NUMBER_REQUIRED","MyAccountDispatcher","mapStateToProps","state","isLoading","MyAccountReducer","showTaxVatNumber","ConfigReducer","show_tax_vat_number","newsletterActive","newsletter_general_active","mapDispatchToProps","dispatch","createAccount","options","then","default","dispatcher","type","message","MyAccountCreateAccountContainer","containerProps","vatNumberValidation","getVatNumberValidation","containerFunctions","onCreateAccountSuccess","bind","onCreateAccountAttempt","props","_","invalidFields","setLoadingState","__","fields","onSignIn","setSignInState","password","email","firstname","lastname","is_subscribed","taxvat","customerData","customer","code","render","propTypes","func","isRequired","bool","string","Object","defineProperty","_MyAccountCreateAccountContainer","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { STATE_CONFIRM_EMAIL } from 'Component/MyAccountOverlay/MyAccountOverlay.config';\nimport { showNotification } from 'Store/Notification/Notification.action';\n\nimport MyAccountCreateAccount from './MyAccountCreateAccount.component';\nimport { SHOW_VAT_NUMBER_REQUIRED } from './MyAccountCreateAccount.config';\n\nexport const MyAccountDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/MyAccount/MyAccount.dispatcher'\n);\n\n/** @namespace Component/MyAccountCreateAccount/Container/mapStateToProps */\n// eslint-disable-next-line no-unused-vars\nexport const mapStateToProps = (state) => ({\n    isLoading: state.MyAccountReducer.isLoading,\n    showTaxVatNumber: !!state.ConfigReducer.show_tax_vat_number,\n    newsletterActive: state.ConfigReducer.newsletter_general_active\n});\n\n/** @namespace Component/MyAccountCreateAccount/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    createAccount: (options) => MyAccountDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.createAccount(options, dispatch)\n    ),\n    showNotification: (type, message) => dispatch(showNotification(type, message))\n});\n\n/** @namespace Component/MyAccountCreateAccount/Container */\nexport class MyAccountCreateAccountContainer extends PureComponent {\n    static propTypes = {\n        createAccount: PropTypes.func.isRequired,\n        onSignIn: PropTypes.func.isRequired,\n        setSignInState: PropTypes.func.isRequired,\n        setLoadingState: PropTypes.func.isRequired,\n        showNotification: PropTypes.func.isRequired,\n        isLoading: PropTypes.bool.isRequired,\n        showTaxVatNumber: PropTypes.string.isRequired\n    };\n\n    containerProps = {\n        vatNumberValidation: this.getVatNumberValidation()\n    };\n\n    containerFunctions = {\n        onCreateAccountSuccess: this.onCreateAccountSuccess.bind(this),\n        onCreateAccountAttempt: this.onCreateAccountAttempt.bind(this)\n    };\n\n    getVatNumberValidation() {\n        const { showTaxVatNumber } = this.props;\n\n        if (showTaxVatNumber === SHOW_VAT_NUMBER_REQUIRED) {\n            return ['notEmpty'];\n        }\n\n        return [];\n    }\n\n    onCreateAccountAttempt(_, invalidFields) {\n        const { showNotification, setLoadingState } = this.props;\n\n        if (invalidFields) {\n            showNotification('info', __('Incorrect data! Please resolve all field validation errors.'));\n        }\n\n        setLoadingState(!invalidFields);\n    }\n\n    async onCreateAccountSuccess(fields) {\n        const {\n            createAccount,\n            onSignIn,\n            setSignInState,\n            setLoadingState,\n            isLoading\n        } = this.props;\n\n        const {\n            password,\n            email,\n            firstname,\n            lastname,\n            is_subscribed,\n            taxvat\n        } = fields;\n\n        const customerData = {\n            customer: {\n                firstname,\n                lastname,\n                email,\n                is_subscribed,\n                taxvat\n            },\n            password\n        };\n\n        if (isLoading) {\n            return;\n        }\n\n        try {\n            const code = await createAccount(customerData);\n\n            // if user needs confirmation\n            if (code === 2) {\n                setSignInState(STATE_CONFIRM_EMAIL);\n            } else {\n                onSignIn();\n            }\n        } finally {\n            setLoadingState(false);\n        }\n    }\n\n    render() {\n        return (\n            <MyAccountCreateAccount\n              { ...this.props }\n              { ...this.containerProps }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountCreateAccountContainer);\n"]},"metadata":{},"sourceType":"module"}