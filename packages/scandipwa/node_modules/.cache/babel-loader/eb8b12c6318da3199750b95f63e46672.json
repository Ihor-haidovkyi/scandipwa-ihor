{"ast":null,"code":"var _jsxFileName = \"/home/marketihor/scandipwa/packages/scandipwa/src/component/CheckoutPayments/CheckoutPayments.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { KlarnaContainer } from \"/home/marketihor/scandipwa/packages/scandipwa/src/component/Klarna/Klarna.container\";\nimport { BILLING_STEP } from \"/home/marketihor/scandipwa/packages/scandipwa/src/route/Checkout/Checkout.config\";\nimport { showNotification } from \"/home/marketihor/scandipwa/packages/scandipwa/src/store/Notification/Notification.action\";\nimport { paymentMethodsType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/Checkout\";\nimport { TotalsType } from \"/home/marketihor/scandipwa/packages/scandipwa/src/type/MiniCart\";\nimport CheckoutPayments from \"./CheckoutPayments.component\";\nimport { KLARNA } from \"./CheckoutPayments.config\";\n/** @namespace Component/CheckoutPayments/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = middleware(function (dispatch) {\n  return {\n    showError: function (message) {\n      return dispatch(showNotification('error', message));\n    }\n  };\n}, \"Component/CheckoutPayments/Container/mapDispatchToProps\");\n/** @namespace Component/CheckoutPayments/Container/mapStateToProps */\n\nexport const mapStateToProps = middleware(function (state) {\n  return {\n    totals: state.CartReducer.cartTotals,\n    email: state.CheckoutReducer.email,\n    address: state.CheckoutReducer.shippingFields\n  };\n}, \"Component/CheckoutPayments/Container/mapStateToProps\");\n/** @namespace Component/CheckoutPayments/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport class _CheckoutPaymentsContainer extends Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.containerFunctions = {\n      selectPaymentMethod: this.selectPaymentMethod.bind(this)\n    };\n    this.dataMap = {\n      [KLARNA]: this.getKlarnaData.bind(this)\n    };\n\n    this.collectAdditionalData = function () {\n      const {\n        selectedPaymentCode\n      } = _this.state;\n      const additionalDataGetter = _this.dataMap[selectedPaymentCode];\n\n      if (!additionalDataGetter) {\n        return {};\n      }\n\n      return additionalDataGetter();\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      paymentMethods\n    } = props;\n    const [{\n      code\n    } = {}] = paymentMethods;\n    this.state = {\n      selectedPaymentCode: code\n    };\n  }\n\n  componentDidMount() {\n    if (window.formPortalCollector) {\n      window.formPortalCollector.subscribe(BILLING_STEP, this.collectAdditionalData, 'CheckoutPaymentsContainer');\n    }\n  }\n\n  componentWillUnmount() {\n    if (window.formPortalCollector) {\n      window.formPortalCollector.unsubscribe(BILLING_STEP, 'CheckoutPaymentsContainer');\n    }\n  }\n\n  getKlarnaData() {\n    return {\n      asyncData: KlarnaContainer.authorize()\n    };\n  }\n\n  selectPaymentMethod({\n    code\n  }) {\n    const {\n      onPaymentMethodSelect,\n      setOrderButtonEnableStatus\n    } = this.props;\n    this.setState({\n      selectedPaymentCode: code\n    });\n    onPaymentMethodSelect(code);\n    setOrderButtonEnableStatus(true);\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, CheckoutPayments, Object.assign({}, this.props, this.containerFunctions, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n_CheckoutPaymentsContainer.propTypes = {\n  onPaymentMethodSelect: PropTypes.func.isRequired,\n  setOrderButtonEnableStatus: PropTypes.func.isRequired,\n  paymentMethods: paymentMethodsType.isRequired,\n  totals: TotalsType.isRequired,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.object.isRequired\n};\nObject.defineProperty(_CheckoutPaymentsContainer, 'name', {\n  value: 'CheckoutPaymentsContainer'\n});\n\nexport const CheckoutPaymentsContainer = middleware(_CheckoutPaymentsContainer, \"Component/CheckoutPayments/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutPaymentsContainer);","map":{"version":3,"sources":["/home/marketihor/scandipwa/packages/scandipwa/src/component/CheckoutPayments/CheckoutPayments.container.js"],"names":["PropTypes","PureComponent","connect","KlarnaContainer","BILLING_STEP","showNotification","paymentMethodsType","TotalsType","CheckoutPayments","KLARNA","mapDispatchToProps","dispatch","showError","message","mapStateToProps","state","totals","CartReducer","cartTotals","email","CheckoutReducer","address","shippingFields","CheckoutPaymentsContainer","containerFunctions","selectPaymentMethod","bind","dataMap","getKlarnaData","collectAdditionalData","selectedPaymentCode","additionalDataGetter","__construct","props","paymentMethods","code","componentDidMount","window","formPortalCollector","subscribe","componentWillUnmount","unsubscribe","asyncData","authorize","onPaymentMethodSelect","setOrderButtonEnableStatus","setState","render","propTypes","func","isRequired","string","object","Object","defineProperty","_CheckoutPaymentsContainer","value"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { KlarnaContainer } from 'Component/Klarna/Klarna.container';\nimport { BILLING_STEP } from 'Route/Checkout/Checkout.config';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { paymentMethodsType } from 'Type/Checkout';\nimport { TotalsType } from 'Type/MiniCart';\n\nimport CheckoutPayments from './CheckoutPayments.component';\nimport { KLARNA } from './CheckoutPayments.config';\n\n/** @namespace Component/CheckoutPayments/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    showError: (message) => dispatch(showNotification('error', message))\n});\n\n/** @namespace Component/CheckoutPayments/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    totals: state.CartReducer.cartTotals,\n    email: state.CheckoutReducer.email,\n    address: state.CheckoutReducer.shippingFields\n});\n\n/** @namespace Component/CheckoutPayments/Container */\nexport class CheckoutPaymentsContainer extends PureComponent {\n    static propTypes = {\n        onPaymentMethodSelect: PropTypes.func.isRequired,\n        setOrderButtonEnableStatus: PropTypes.func.isRequired,\n        paymentMethods: paymentMethodsType.isRequired,\n        totals: TotalsType.isRequired,\n        email: PropTypes.string.isRequired,\n        address: PropTypes.object.isRequired\n    };\n\n    containerFunctions = {\n        selectPaymentMethod: this.selectPaymentMethod.bind(this)\n    };\n\n    dataMap = {\n        [KLARNA]: this.getKlarnaData.bind(this)\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        const { paymentMethods } = props;\n        const [{ code } = {}] = paymentMethods;\n        this.state = {\n            selectedPaymentCode: code\n        };\n    }\n\n    componentDidMount() {\n        if (window.formPortalCollector) {\n            window.formPortalCollector.subscribe(BILLING_STEP, this.collectAdditionalData, 'CheckoutPaymentsContainer');\n        }\n    }\n\n    componentWillUnmount() {\n        if (window.formPortalCollector) {\n            window.formPortalCollector.unsubscribe(BILLING_STEP, 'CheckoutPaymentsContainer');\n        }\n    }\n\n    getKlarnaData() {\n        return { asyncData: KlarnaContainer.authorize() };\n    }\n\n    collectAdditionalData = () => {\n        const { selectedPaymentCode } = this.state;\n        const additionalDataGetter = this.dataMap[selectedPaymentCode];\n        if (!additionalDataGetter) {\n            return {};\n        }\n\n        return additionalDataGetter();\n    };\n\n    selectPaymentMethod({ code }) {\n        const {\n            onPaymentMethodSelect,\n            setOrderButtonEnableStatus\n        } = this.props;\n\n        this.setState({\n            selectedPaymentCode: code\n        });\n\n        onPaymentMethodSelect(code);\n        setOrderButtonEnableStatus(true);\n    }\n\n    render() {\n        return (\n            <CheckoutPayments\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.state }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutPaymentsContainer);\n"]},"metadata":{},"sourceType":"module"}