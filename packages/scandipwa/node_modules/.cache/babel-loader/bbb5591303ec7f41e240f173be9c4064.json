{"ast":null,"code":"import _classCallCheck from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import{assert}from'workbox-core/_private/assert.js';import{logger}from'workbox-core/_private/logger.js';import{Route}from\"./Route.js\";import\"./_version.js\";/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */var RegExpRoute=/*#__PURE__*/function(_Route){_inherits(RegExpRoute,_Route);var _super=_createSuper(RegExpRoute);/**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */function RegExpRoute(regExp,handler,method){_classCallCheck(this,RegExpRoute);if(process.env.NODE_ENV!=='production'){assert.isInstance(regExp,RegExp,{moduleName:'workbox-routing',className:'RegExpRoute',funcName:'constructor',paramName:'pattern'});}var match=function match(_ref){var url=_ref.url;var result=regExp.exec(url.href);// Return immediately if there's no match.\nif(!result){return;}// Require that the match start at the first character in the URL string\n// if it's a cross-origin request.\n// See https://github.com/GoogleChrome/workbox/issues/281 for the context\n// behind this behavior.\nif(url.origin!==location.origin&&result.index!==0){if(process.env.NODE_ENV!=='production'){logger.debug(\"The regular expression '\".concat(regExp,\"' only partially matched \")+\"against the cross-origin URL '\".concat(url,\"'. RegExpRoute's will only \")+\"handle cross-origin requests if they match the entire URL.\");}return;}// If the route matches, but there aren't any capture groups defined, then\n// this will return [], which is truthy and therefore sufficient to\n// indicate a match.\n// If there are capture groups, then it will return their values.\nreturn result.slice(1);};return _super.call(this,match,handler,method);}return RegExpRoute;}(Route);export{RegExpRoute};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-routing/RegExpRoute.js"],"names":["assert","logger","Route","RegExpRoute","regExp","handler","method","process","env","NODE_ENV","isInstance","RegExp","moduleName","className","funcName","paramName","match","url","result","exec","href","origin","location","index","debug","slice"],"mappings":"uaAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAASA,MAAT,KAAuB,iCAAvB,CACA,OAASC,MAAT,KAAuB,iCAAvB,CACA,OAASC,KAAT,kBACA,sBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,GACMC,CAAAA,W,kGACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,qBAAYC,MAAZ,CAAoBC,OAApB,CAA6BC,MAA7B,CAAqC,mCACjC,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCT,MAAM,CAACU,UAAP,CAAkBN,MAAlB,CAA0BO,MAA1B,CAAkC,CAC9BC,UAAU,CAAE,iBADkB,CAE9BC,SAAS,CAAE,aAFmB,CAG9BC,QAAQ,CAAE,aAHoB,CAI9BC,SAAS,CAAE,SAJmB,CAAlC,EAMH,CACD,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAa,IAAVC,CAAAA,GAAU,MAAVA,GAAU,CACvB,GAAMC,CAAAA,MAAM,CAAGd,MAAM,CAACe,IAAP,CAAYF,GAAG,CAACG,IAAhB,CAAf,CACA;AACA,GAAI,CAACF,MAAL,CAAa,CACT,OACH,CACD;AACA;AACA;AACA;AACA,GAAKD,GAAG,CAACI,MAAJ,GAAeC,QAAQ,CAACD,MAAzB,EAAqCH,MAAM,CAACK,KAAP,GAAiB,CAA1D,CAA8D,CAC1D,GAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACvCR,MAAM,CAACuB,KAAP,CAAa,kCAA2BpB,MAA3B,sEACwBa,GADxB,4FAAb,EAGH,CACD,OACH,CACD;AACA;AACA;AACA;AACA,MAAOC,CAAAA,MAAM,CAACO,KAAP,CAAa,CAAb,CAAP,CACH,CAvBD,CATiC,wBAiC3BT,KAjC2B,CAiCpBX,OAjCoB,CAiCXC,MAjCW,EAkCpC,C,qBAhDqBJ,K,EAkD1B,OAASC,WAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n"]},"metadata":{},"sourceType":"module"}