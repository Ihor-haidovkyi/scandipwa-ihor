{"ast":null,"code":"/* eslint-disable guard-for-in */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n *\n * The purpose of this functionality is to generate the runtime plugin configuration object\n * All the default exports of the .plugin.js files of enabled extensions must get processed by this algorithm\n */\n\n/*\n    eslint-disable\n    no-param-reassign,\n    no-restricted-syntax,\n    no-continue\n*/\n// Allowed handler types\nconst handlerTypes = ['member-function', 'member-property', 'static-member', 'function', 'class'];\n/**\n * Handlers which don't require member name specification\n */\n\nconst handlersWithReducedSections = ['function', 'class'];\n/**\n * Check if supplied handler type is expected\n * @param {string} handlerType\n */\n\nfunction validateHandlerType(handlerType, namespace) {\n  if (!handlerTypes.includes(handlerType)) {\n    throw Error(`Unexpected handler type '${handlerType}' for namespace '${namespace}', expected one of [${handlerTypes.join(', ')}]`);\n  }\n}\n/**\n * Wrap param in array if it is not array already\n */\n\n\nconst arrayize = function (x) {\n  return Array.isArray(x) ? x : [x];\n};\n/**\n * Push at once to handler section, separation by member names not expected\n * @param {Object} overallConfig\n * @param {string} namespace\n * @param {string} handlerType\n * @param {Array} membersPlugins\n */\n\n\nconst handleReducedSection = function (overallConfig, namespace, handlerType, membersPlugins) {\n  if (!overallConfig[namespace][handlerType]) {\n    overallConfig[namespace][handlerType] = [];\n  }\n\n  arrayize(membersPlugins).forEach(function (memberPlugin) {\n    overallConfig[namespace][handlerType].push(memberPlugin);\n  });\n};\n/**\n * Separate namespace plugins by member names\n * @param {Object} overallConfig\n * @param {string} namespace\n * @param {string} handlerType\n * @param {Array} membersPlugins\n */\n\n\nconst handleRegularSection = function (overallConfig, namespace, handlerType, membersPlugins) {\n  if (!overallConfig[namespace][handlerType]) {\n    overallConfig[namespace][handlerType] = {};\n  }\n\n  Object.entries(membersPlugins).forEach(function ([memberName, memberPlugins]) {\n    if (!overallConfig[namespace][handlerType][memberName]) {\n      overallConfig[namespace][handlerType][memberName] = [];\n    }\n\n    arrayize(memberPlugins).forEach(function (memberPlugin) {\n      overallConfig[namespace][handlerType][memberName].push(memberPlugin);\n    });\n  });\n};\n\nconst DEFAULT_POSITION = 100;\n\nconst sortPluginArray = function (plugins) {\n  return plugins.sort(function ({\n    position: a = DEFAULT_POSITION\n  }, {\n    position: b = DEFAULT_POSITION\n  }) {\n    return a - b;\n  });\n};\n/**\n * Sort the configuration so that plugins with higher priority (lower \"posititon\" value)\n * Go before the ones with lower priority (higher \"position\" value).\n * @param {Object} config\n */\n\n\nconst sortConfig = function (config) {\n  // Process each namespace\n  for (const namespace in config) {\n    // Each handler type of a namespace\n    for (const handlerType in config[namespace]) {\n      // Handle reduced sections\n      if (handlersWithReducedSections.includes(handlerType)) {\n        config[namespace][handlerType] = sortPluginArray(config[namespace][handlerType]);\n        continue;\n      } // Handle regular sections\n\n\n      for (const memberName in config[namespace][handlerType]) {\n        config[namespace][handlerType][memberName] = sortPluginArray(config[namespace][handlerType][memberName]);\n      }\n    }\n  }\n};\n/**\n * Entry point\n */\n\n\nconst generateConfig = function (extensions) {\n  const config = extensions.reduce(function (overallConfig, extension) {\n    Object.entries(extension).forEach(function ([namespace, plugins]) {\n      if (!overallConfig[namespace]) {\n        overallConfig[namespace] = {};\n      }\n\n      Object.entries(plugins).forEach(function ([handlerType, membersPlugins]) {\n        validateHandlerType(handlerType, namespace);\n\n        if (handlersWithReducedSections.includes(handlerType)) {\n          handleReducedSection(overallConfig, namespace, handlerType, membersPlugins);\n        } else {\n          handleRegularSection(overallConfig, namespace, handlerType, membersPlugins);\n        }\n      });\n    });\n    return overallConfig;\n  }, {});\n  sortConfig(config);\n  return config;\n};\n\nexport default generateConfig;","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/@scandipwa/scandipwa-extensibility/runtime-helpers/generateConfig.js"],"names":["handlerTypes","handlersWithReducedSections","validateHandlerType","handlerType","namespace","includes","Error","join","arrayize","x","Array","isArray","handleReducedSection","overallConfig","membersPlugins","forEach","memberPlugin","push","handleRegularSection","Object","entries","memberName","memberPlugins","DEFAULT_POSITION","sortPluginArray","plugins","sort","position","a","b","sortConfig","config","generateConfig","extensions","reduce","extension"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n *\n * The purpose of this functionality is to generate the runtime plugin configuration object\n * All the default exports of the .plugin.js files of enabled extensions must get processed by this algorithm\n */\n\n/*\n    eslint-disable\n    no-param-reassign,\n    no-restricted-syntax,\n    no-continue\n*/\n\n// Allowed handler types\nconst handlerTypes = [\n    'member-function',\n    'member-property',\n    'static-member',\n    'function',\n    'class'\n];\n\n/**\n * Handlers which don't require member name specification\n */\nconst handlersWithReducedSections = [\n    'function',\n    'class'\n];\n\n/**\n * Check if supplied handler type is expected\n * @param {string} handlerType\n */\nfunction validateHandlerType(handlerType, namespace) {\n    if (!handlerTypes.includes(handlerType)) {\n        throw Error(`Unexpected handler type '${handlerType}' for namespace '${namespace}', expected one of [${\n            handlerTypes.join(', ')\n        }]`);\n    }\n}\n\n/**\n * Wrap param in array if it is not array already\n */\nconst arrayize = (x) => (Array.isArray(x) ? x : [x]);\n\n/**\n * Push at once to handler section, separation by member names not expected\n * @param {Object} overallConfig\n * @param {string} namespace\n * @param {string} handlerType\n * @param {Array} membersPlugins\n */\nconst handleReducedSection = (overallConfig, namespace, handlerType, membersPlugins) => {\n    if (!overallConfig[namespace][handlerType]) {\n        overallConfig[namespace][handlerType] = [];\n    }\n\n    arrayize(membersPlugins).forEach((memberPlugin) => {\n        overallConfig[namespace][handlerType].push(memberPlugin);\n    });\n};\n\n/**\n * Separate namespace plugins by member names\n * @param {Object} overallConfig\n * @param {string} namespace\n * @param {string} handlerType\n * @param {Array} membersPlugins\n */\nconst handleRegularSection = (overallConfig, namespace, handlerType, membersPlugins) => {\n    if (!overallConfig[namespace][handlerType]) {\n        overallConfig[namespace][handlerType] = {};\n    }\n\n    Object.entries(membersPlugins).forEach(([memberName, memberPlugins]) => {\n        if (!overallConfig[namespace][handlerType][memberName]) {\n            overallConfig[namespace][handlerType][memberName] = [];\n        }\n        arrayize(memberPlugins).forEach((memberPlugin) => {\n            overallConfig[namespace][handlerType][memberName].push(memberPlugin);\n        });\n    });\n};\n\nconst DEFAULT_POSITION = 100;\nconst sortPluginArray = (plugins) => plugins.sort(\n    ({ position: a = DEFAULT_POSITION }, { position: b = DEFAULT_POSITION }) => a - b\n);\n\n/**\n * Sort the configuration so that plugins with higher priority (lower \"posititon\" value)\n * Go before the ones with lower priority (higher \"position\" value).\n * @param {Object} config\n */\nconst sortConfig = (config) => {\n    // Process each namespace\n    for (const namespace in config) {\n        // Each handler type of a namespace\n        for (const handlerType in config[namespace]) {\n            // Handle reduced sections\n            if (handlersWithReducedSections.includes(handlerType)) {\n                config[namespace][handlerType] = sortPluginArray(config[namespace][handlerType]);\n                continue;\n            }\n\n            // Handle regular sections\n            for (const memberName in config[namespace][handlerType]) {\n                config[namespace][handlerType][memberName] = sortPluginArray(\n                    config[namespace][handlerType][memberName]\n                );\n            }\n        }\n    }\n};\n\n/**\n * Entry point\n */\nconst generateConfig = (extensions) => {\n    const config = extensions.reduce(\n        (overallConfig, extension) => {\n            Object.entries(extension).forEach(([namespace, plugins]) => {\n                if (!overallConfig[namespace]) {\n                    overallConfig[namespace] = {};\n                }\n                Object.entries(plugins).forEach(([handlerType, membersPlugins]) => {\n                    validateHandlerType(handlerType, namespace);\n                    if (handlersWithReducedSections.includes(handlerType)) {\n                        handleReducedSection(overallConfig, namespace, handlerType, membersPlugins);\n                    } else {\n                        handleRegularSection(overallConfig, namespace, handlerType, membersPlugins);\n                    }\n                });\n            });\n\n            return overallConfig;\n        }, {}\n    );\n\n    sortConfig(config);\n    return config;\n};\n\nexport default generateConfig;\n"]},"metadata":{},"sourceType":"module"}