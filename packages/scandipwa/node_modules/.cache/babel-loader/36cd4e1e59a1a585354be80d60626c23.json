{"ast":null,"code":"import _classCallCheck from\"/home/marketihor/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/import\"../_version.js\";/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */var Deferred=/**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */function Deferred(){var _this=this;_classCallCheck(this,Deferred);this.promise=new Promise(function(resolve,reject){_this.resolve=resolve;_this.reject=reject;});};export{Deferred};","map":{"version":3,"sources":["/home/marketihor/scandipwa/node_modules/workbox-core/_private/Deferred.js"],"names":["Deferred","promise","Promise","resolve","reject"],"mappings":"mJAAA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,uBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,GACMA,CAAAA,Q,CACF;AACJ;AACA,OACI,mBAAc,+CACV,KAAKC,OAAL,CAAe,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC5C,KAAI,CAACD,OAAL,CAAeA,OAAf,CACA,KAAI,CAACC,MAAL,CAAcA,MAAd,CACH,CAHc,CAAf,CAIH,C,CAEL,OAASJ,QAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n"]},"metadata":{},"sourceType":"module"}