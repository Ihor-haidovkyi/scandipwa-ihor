{"ast":null,"code":"import getPluginsForMember from \"../helpers/getPluginsForMember\";\nimport getWrapperFromPlugin from \"../helpers/getWrapperFromPlugin\";\nexport default (function (namespaces) {\n  return function (TargetClass, args, newTarget) {\n    // Get an instance\n    const instance = Reflect.construct(TargetClass, args, newTarget); // Get all member-property plugins\n\n    const namespacesPluginsConstruct = getPluginsForMember(namespaces, 'member-property'); // Handle plugin -> property interactions\n\n    namespacesPluginsConstruct.forEach(function (namespacePluginsConstruct) {\n      return Object.entries(namespacePluginsConstruct).forEach( // Apply each plugin to the instance\n      function ([memberName, memberPluginsConstruct]) {\n        // Retrieve the original member\n        const origMember = instance[memberName] || function () {};\n\n        const sortedPlugins = memberPluginsConstruct; // Wrap it into the plugins\n\n        const newMember = sortedPlugins.reduce(function (acc, plugin) {\n          const wrapper = getWrapperFromPlugin(plugin, origMember.name);\n          return wrapper(acc, instance);\n        }, origMember); // Replace the original member with the new one, wrapped into the plugins\n\n        instance[memberName] = newMember;\n      });\n    }); // Handle construct logic\n\n    if (instance.__construct) {\n      // Call the \"magic\" __construct member function\n      instance.__construct(...args);\n    } // Return the processed instance\n\n\n    return instance;\n  };\n});","map":{"version":3,"sources":["D:/task/magento2/ScandiPWA/node_modules/@scandipwa/scandipwa-extensibility/lib/handlers/generateConstructHandler.js"],"names":["getPluginsForMember","getWrapperFromPlugin","namespaces","TargetClass","args","newTarget","instance","Reflect","construct","namespacesPluginsConstruct","forEach","namespacePluginsConstruct","Object","entries","memberName","memberPluginsConstruct","origMember","sortedPlugins","newMember","reduce","acc","plugin","wrapper","name","__construct"],"mappings":"AAAA,OAAOA,mBAAP;AACA,OAAOC,oBAAP;AAEA,gBAAe,UAACC,UAAD;AAAA,SAAgB,UAACC,WAAD,EAAcC,IAAd,EAAoBC,SAApB,EAAkC;AAC7D;AACA,UAAMC,QAAQ,GAAGC,OAAO,CAACC,SAAR,CAAkBL,WAAlB,EAA+BC,IAA/B,EAAqCC,SAArC,CAAjB,CAF6D,CAI7D;;AACA,UAAMI,0BAA0B,GAAGT,mBAAmB,CAACE,UAAD,EAAa,iBAAb,CAAtD,CAL6D,CAO7D;;AACAO,IAAAA,0BAA0B,CAACC,OAA3B,CACI,UAACC,yBAAD;AAAA,aAA+BC,MAAM,CAACC,OAAP,CAAeF,yBAAf,EAA0CD,OAA1C,EAC3B;AACA,gBAAC,CAACI,UAAD,EAAaC,sBAAb,CAAD,EAA0C;AACtC;AACA,cAAMC,UAAU,GAAGV,QAAQ,CAACQ,UAAD,CAAR,IAAyB,YAAM,CAAE,CAApD;;AACA,cAAMG,aAAa,GAAGF,sBAAtB,CAHsC,CAKtC;;AACA,cAAMG,SAAS,GAAGD,aAAa,CAACE,MAAd,CACd,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACb,gBAAMC,OAAO,GAAGrB,oBAAoB,CAACoB,MAAD,EAASL,UAAU,CAACO,IAApB,CAApC;AAEA,iBAAOD,OAAO,CAACF,GAAD,EAAMd,QAAN,CAAd;AACH,SALa,EAMdU,UANc,CAAlB,CANsC,CAetC;;AACAV,QAAAA,QAAQ,CAACQ,UAAD,CAAR,GAAuBI,SAAvB;AACH,OAnB0B,CAA/B;AAAA,KADJ,EAR6D,CAgC7D;;AACA,QAAIZ,QAAQ,CAACkB,WAAb,EAA0B;AACtB;AACAlB,MAAAA,QAAQ,CAACkB,WAAT,CAAqB,GAAGpB,IAAxB;AACH,KApC4D,CAsC7D;;;AACA,WAAOE,QAAP;AACH,GAxCc;AAAA,CAAf","sourcesContent":["import getPluginsForMember from '../helpers/getPluginsForMember';\nimport getWrapperFromPlugin from '../helpers/getWrapperFromPlugin';\n\nexport default (namespaces) => (TargetClass, args, newTarget) => {\n    // Get an instance\n    const instance = Reflect.construct(TargetClass, args, newTarget);\n\n    // Get all member-property plugins\n    const namespacesPluginsConstruct = getPluginsForMember(namespaces, 'member-property');\n\n    // Handle plugin -> property interactions\n    namespacesPluginsConstruct.forEach(\n        (namespacePluginsConstruct) => Object.entries(namespacePluginsConstruct).forEach(\n            // Apply each plugin to the instance\n            ([memberName, memberPluginsConstruct]) => {\n                // Retrieve the original member\n                const origMember = instance[memberName] || (() => {});\n                const sortedPlugins = memberPluginsConstruct;\n\n                // Wrap it into the plugins\n                const newMember = sortedPlugins.reduce(\n                    (acc, plugin) => {\n                        const wrapper = getWrapperFromPlugin(plugin, origMember.name);\n\n                        return wrapper(acc, instance);\n                    },\n                    origMember\n                );\n\n                // Replace the original member with the new one, wrapped into the plugins\n                instance[memberName] = newMember;\n            }\n        )\n    );\n\n    // Handle construct logic\n    if (instance.__construct) {\n        // Call the \"magic\" __construct member function\n        instance.__construct(...args);\n    }\n\n    // Return the processed instance\n    return instance;\n};\n"]},"metadata":{},"sourceType":"module"}