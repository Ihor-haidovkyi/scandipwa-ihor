{"version":3,"sources":["component/ExpandableContent/index.js","component/ExpandableContent/ExpandableContent.component.js","type/Router.js","component/ProductConfigurableAttributes/ProductConfigurableAttributes.container.js","component/ProductConfigurableAttributes/ProductConfigurableAttributes.component.js","component/ProductConfigurableAttributeDropdown/ProductConfigurableAttributeDropdown.container.js","component/ProductConfigurableAttributeDropdown/index.js","component/ProductConfigurableAttributeDropdown/ProductConfigurableAttributeDropdown.component.js"],"names":["ExpandableContent","expandableContentRef","createRef","toggleExpand","onClick","props","setState","isContentExpanded","scrollToExpandedContent","this","state","prevIsContentExpanded","elem","current","elemToWindowTopDist","getBoundingClientRect","top","windowToPageTopDist","document","body","topToElemDistance","getFixedElementHeight","totalFixedElementHeight","total","bottomFixedElementHeight","bottom","elemMaxOffsetHeight","screen","height","offsetHeight","scrollTo","window","behavior","heading","subHeading","mix","block","mods","content","length","children","ref","renderButton","renderContent","defaultProps","Object","defineProperty","_ExpandableContent","value","PropTypes","shape","hash","string","key","pathname","search","ProductConfigurableAttributesContainer","containerFunctions","handleOptionClick","bind","getSubHeading","isSelected","getLink","attribute_code","attribute_value","attribute_values","attribute_options","reduce","acc","label","join","updateConfigurableVariant","parameters","parameter","undefined","includes","_ProductConfigurableAttributesContainer","ProductConfigurableAttributes","attribute","getIsConfigurableAttributeAvailable","isAvailable","option","map","renderConfigurableAttributeValue","numberOfPlaceholders","i","Array","from","_","configurable_options","values","attribute_label","isSwatch","swatch_data","renderSwatch","renderDropdown","isReady","isLoading","renderConfigurableAttributes","renderPlaceholders","_ProductConfigurableAttributes","ProductConfigurableAttributeDropdownContainer","onChange","containerProps","selectValue","_getSelectValue","selectOptions","_getSelectOptions","selectName","selectLabel","id","console","warn","_ProductConfigurableAttributeDropdownContainer","ProductConfigurableAttributeDropdown","name","type","placeholder","__","toLowerCase","_ProductConfigurableAttributeDropdown"],"mappings":"oIAAA,kD,wKCmBaA,EAAb,4MA0BIC,qBAAuBC,sBA1B3B,EA8EIC,aAAe,WAAO,IACVC,EAAY,EAAKC,MAAjBD,QACJA,EACAA,IAGJ,EAAKE,UACD,kBAA4B,CAAEC,mBAA9B,EAAGA,sBACH,kBAAM,EAAKC,8BAtFvB,iDA4BI,SAAYH,GACR,mEAAkBA,GADH,IAEPE,EAAsBE,KAAKJ,MAA3BE,kBACRE,KAAKC,MAAQ,CACTH,oBAEAI,sBAAuBJ,KAlCnC,qCAiDI,WAA2B,IACfA,EAAsBE,KAAKC,MAA3BH,kBACFK,EAAOH,KAAKR,sBAAwBQ,KAAKR,qBAAqBY,QAEpE,IAAIN,GAAsBK,EAA1B,CAIA,IAAME,EAAsBF,EAAKG,wBAAwBC,IACnDC,EAAsBC,SAASC,KAAKJ,wBAAwBC,IAC5DI,EAAoBN,EAAsBG,EAV1B,EAclBI,cAFOC,EAZW,EAYlBC,MACQC,EAbU,EAalBC,OAGEC,EAAsBC,OAAOC,OAAShB,EAAKiB,aAAeL,EAC1DZ,EAAKiB,aACLF,OAAOC,OAASN,EAChBQ,EAAWV,GAAqBO,OAAOC,OAASJ,EAA2BE,IAG5ET,GAAuBa,GAI5BC,OAAOD,SAAS,CAAEE,SAAU,SAAUhB,IAAKc,OA3EnD,0BA0FI,WAAgB,IACJvB,EAAsBE,KAAKC,MAA3BH,kBADG,EAMPE,KAAKJ,MAHL4B,EAHO,EAGPA,QACAC,EAJO,EAIPA,WACAC,EALO,EAKPA,IAGJ,qBAEMC,MAAM,oBACNxB,KAAK,SACLyB,KAAO,CAAE9B,qBACT4B,IAAG,2BAAQA,GAAR,IAAavB,KAAM,4BACtBR,QAAUK,KAAKN,cANrB,YASUiC,MAAM,oBACNxB,KAAK,UACLuB,IAAG,2BAAQA,GAAR,IAAavB,KAAM,8BAEC,kBAAZqB,EAAP,IACG,IADH,CACmBK,QAAUL,EAAUM,OAAO,WAE5CN,GAhBhB,YAoBUG,MAAM,oBACNxB,KAAK,aACLuB,IAAG,2BAAQA,GAAR,IAAavB,KAAM,iCAElBsB,MA1HtB,2BAgII,WAAiB,IAAD,EACczB,KAAKJ,MAAvBmC,EADI,EACJA,SAAUL,EADN,EACMA,IAEZE,EAAO,CAAE9B,kBADeE,KAAKC,MAA3BH,mBAER,kBAEM6B,MAAM,oBACNxB,KAAK,UACLyB,KAAOA,EACPF,IAAG,2BAAQA,GAAR,IAAavB,KAAM,2BAA4ByB,UAE9CG,KA3IlB,oBAgJI,WAAU,IACEL,EAAQ1B,KAAKJ,MAAb8B,IACR,sBAEMC,MAAM,oBACND,IAAMA,EACNM,IAAMhC,KAAKR,sBAEPQ,KAAKiC,eACLjC,KAAKkC,oBAzJvB,uCAsCI,cAAmF,IAAjDpC,EAAgD,EAAhDA,kBAC9B,OAAIA,IAD0E,EAAzBI,sBAE1C,CACHA,sBAAuBJ,EACvBA,qBAID,SA9Cf,uBAAaP,EAmBF4C,aAAe,CAClBV,WAAY,GACZD,QAAS,GACT1B,mBAAmB,EACnBH,QAAS,MA1CjByC,OAAOC,eAAeC,EAAoB,OAAQ,CAAEC,MAAO,sB,mDAiL5ChD,Q,mGCjLf,oBAc4BiD,IAAUC,MAAM,CACxCC,KAAMF,IAAUG,OAChBC,IAAKJ,IAAUG,OACfE,SAAUL,IAAUG,OACpBG,OAAQN,IAAUG,U,uICDTI,EAAb,4MAOIC,mBAAqB,CACjBC,kBAAmB,EAAKA,kBAAkBC,KAAvB,gBACnBC,cAAe,EAAKA,cAAcD,KAAnB,gBACfE,WAAY,EAAKA,WAAWF,KAAhB,gBACZG,QAAS,EAAKA,QAAQH,KAAb,iBAXjB,6CAcI,YAA8C,IAApCI,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBACdF,EAAYrD,KAAKJ,MAAjByD,QACR,OAAOA,EAAQC,EAAgBC,KAhBvC,2BAmBI,YAAwE,IAAD,OAAvDC,EAAuD,EAAvDA,iBAAkBF,EAAqC,EAArCA,eAAgBG,EAAqB,EAArBA,kBAC9C,OAAOD,EAAiBE,QAAO,SAACC,EAAKJ,GAAN,OAC3B,EAAKH,WAAW,CAAEE,iBAAgBC,oBAAlC,sBACUI,GADV,CACeF,EAAkBF,GAAiBK,QAC5CD,IACP,IAAIE,KAAK,QAxBpB,+BA2BI,YAAwD,IAApCP,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,iBAEhCO,EADsC9D,KAAKJ,MAAnCkE,2BACkBR,EAAgBC,KA7BlD,wBAgCI,YAAiD,IAApCD,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBAAmB,EAChBvD,KAAKJ,MAAzBmE,WACFC,QAFsC,MACvB,GADuB,GAEfV,GAE7B,YAAkBW,IAAdD,SAGqBC,IAArBD,EAAUlC,OACHkC,EAAUE,SAASX,GAGvBS,IAAcT,KA3C7B,oBA8CI,WACI,WACK,IADL,iBAEWvD,KAAKJ,MACLI,KAAKgD,yBAlDxB,uBAjBAZ,OAAOC,eAAe8B,EAAyC,OAAQ,CAAE5B,MAAO,2C,+DAyEjEQ,Q,2NClDFqB,EAAb,sLAyBI,SAAiCC,GAAY,IAAD,EAMpCrE,KAAKJ,MAJL0E,EAFoC,EAEpCA,oCACArB,EAHoC,EAGpCA,kBACAI,EAJoC,EAIpCA,QACAD,EALoC,EAKpCA,WAGIG,EAAoBc,EAApBd,gBAER,WACK,IADL,CAEMX,IAAMW,EACNc,UAAYA,EACZjB,WAAaA,EAAWiB,GACxBE,YAAcD,EAAoCD,GAClD1E,QAAUsD,EACVI,QAAUA,MA1CxB,0BA+CI,SAAamB,GAAS,IAAD,OACThB,EAAqBgB,EAArBhB,iBAER,kBAEM7B,MAAM,gCACNxB,KAAK,cAEDqD,EAAiBiB,KAAI,SAAClB,GAAD,OACnB,EAAKmB,iCAAL,2BAA2CF,GAA3C,IAAmDjB,2BAxDvE,4BA8DI,SAAeiB,GAAS,IAAD,EAKfxE,KAAKJ,MAHLkE,EAFe,EAEfA,0BACAQ,EAHe,EAGfA,oCACAP,EAJe,EAIfA,WAGJ,WACK,IADL,CAEMS,OAASA,EACTV,0BAA4BA,EAC5BQ,oCAAsCA,EACtCP,WAAaA,MA1E3B,gCA+EI,WAAsB,IAAD,EACmC/D,KAAKJ,MAAjD+E,EADS,EACTA,qBAAsB7E,EADb,EACaA,kBAE9B,OAAO6E,EAAqBF,KAAI,SAAC3C,EAAQ8C,GAAT,WAC3B,IAD2B,CAG1BhC,IAAMgC,EACNlD,IAAM,CACFC,MAAO,gCACPxB,KAAM,cAEVL,kBAAoBA,GARM,WAYtB8C,IAAMgC,EACNjD,MAAM,gCACNxB,KAAK,cAED0E,MAAMC,KAAK,CAAEhD,WAAU,SAACiD,EAAGH,GAAJ,kBAGnBhC,IAAMgC,EACNjD,MAAM,gCACNxB,KAAK,0BAvG/B,0CA+GI,WAAgC,IAAD,SAKvBH,KAAKJ,MAHLoF,EAFuB,EAEvBA,qBACAlF,EAHuB,EAGvBA,kBACAqD,EAJuB,EAIvBA,cAGJ,OAAOf,OAAO6C,OAAOD,GAAsBP,KAAI,SAACD,GAAY,IAEpDU,EAGAV,EAHAU,gBACA5B,EAEAkB,EAFAlB,eACAG,EACAe,EADAf,kBAJmD,EAO7BA,EAAoBrB,OAAO6C,OAAOxB,GAAqB,CAAC,IAC5E0B,IARiD,oBAO9CC,YAGT,WACK,IADL,CAEMxC,IAAMU,EACN9B,QAAU0D,EACVzD,WAAa0B,EAAcqB,GAC3B9C,IAAM,CACFC,MAAO,gCACPxB,KAAM,cAEVL,kBAAoBA,GAEhBqF,EAAW,EAAKE,aAAab,GAAU,EAAKc,eAAed,SA3IjF,oBAiJI,WAAU,IAAD,EACoBxE,KAAKJ,MAAtB2F,EADH,EACGA,QAAS7D,EADZ,EACYA,IAEjB,kBAEMC,MAAM,gCACNC,KAAO,CAAE4D,WAAYD,GACrB7D,IAAMA,GAEF6D,EAAUvF,KAAKyF,+BAAiCzF,KAAK0F,0BA1JvE,uBAAatB,EAgBFjC,aAAe,CAClBoD,SAAS,EACT7D,IAAK,GAELiD,qBAAsB,CAAC,EAAG,GAAI,GAC9B7E,mBAAmB,EACnBwE,oCAAqC,kBAAM,IA7CnDlC,OAAOC,eAAesD,EAAgC,OAAQ,CAAEpD,MAAO,kC,+DAuLxD6B,Q,mMCrKFwB,EAAb,4MAQI5C,mBAAqB,CACjB6C,SAAU,EAAKA,SAAS3C,KAAd,iBATlB,EAqBI4C,eAAiB,WAAO,IAAD,EACqC,EAAKlG,MAArD4E,OAAUlB,EADC,EACDA,eAAgB4B,EADf,EACeA,gBAElC,MAAO,CACHa,YAAa,EAAKC,kBAClBC,cAAe,EAAKC,oBACpBC,WAAY7C,EACZ8C,YAAalB,IA5BzB,EAgCIgB,kBAAoB,WAAO,IAAD,EAOlB,EAAKtG,MAPa,IAElB4E,OACIf,EAHc,EAGdA,kBACAH,EAJc,EAIdA,eAEJgB,EANkB,EAMlBA,oCAGJ,OAAKb,EAMErB,OAAO6C,OAAOxB,GAChBC,QAAO,SAACC,EAAKa,GAAY,IACdjC,EAAUiC,EAAVjC,MAOR,OALoB+B,EAAoC,CACpDhB,iBACAC,gBAAiBhB,IAOf,GAAN,mBAAWoB,GAAX,4BACOa,GADP,IAEI6B,GAAI9D,MALGoB,IAOZ,KArBH2C,QAAQC,KAAR,4BAAmCjD,EAAnC,gCACO,KA5CnB,EAmEI0C,gBAAkB,WAAO,IACH1C,EAAqB,EAAK1D,MAApC4E,OAAUlB,eADE,EAEQ,EAAK1D,MAAzBmE,WACR,YAHoB,MAEC,GAFD,GAGFT,IAtE1B,8CAYI,SAASf,GAAQ,IAAD,EAIRvC,KAAKJ,OAETkE,EANY,EAERA,2BAFQ,EAGRU,OAAUlB,eAG4Bf,KAlBlD,oBAyEI,WACI,WACK,IADL,iBAEWvC,KAAKJ,MACLI,KAAKgD,mBACLhD,KAAK8F,uBA9ExB,uBAlBA1D,OAAOC,eAAemE,EAAgD,OAAQ,CAAEjE,MAAO,kD,sEAsGxEqD,Q,6ECtGf,kD,kICkBaa,EAAb,4JAkBI,WAAU,IAAD,EAODzG,KAAKJ,MALLqG,EAFC,EAEDA,cACAF,EAHC,EAGDA,YACAI,EAJC,EAIDA,WACAC,EALC,EAKDA,YACAP,EANC,EAMDA,SAGJ,WACK,IADL,CAEMQ,GAAKF,EACLO,KAAOP,EACPQ,KAAK,SACLC,YAAcC,EAAG,YAAaT,EAAYU,eAC1CpF,IAAM,CAAEC,MAAO,wCACfsE,cAAgBA,EAChB1D,MAAQwD,EACRF,SAAWA,QApCzB,uBAAaY,EAaFtE,aAAe,CAClB4D,YAAa,GACbK,YAAa,aAjCrBhE,OAAOC,eAAe0E,EAAuC,OAAQ,CAAExE,MAAO,yC,sEA4D/DkE,Q","file":"static/js/5.6b506947.chunk.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nexport { default } from './ExpandableContent.component';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport TextPlaceholder from 'Component/TextPlaceholder';\nimport { ChildrenType, MixType } from 'Type/Common';\nimport { getFixedElementHeight } from 'Util/CSS';\n\nimport './ExpandableContent.style';\n/** @namespace Component/ExpandableContent/Component */\nexport class ExpandableContent extends PureComponent {\n    static propTypes = {\n        isContentExpanded: PropTypes.bool,\n        heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n        subHeading: PropTypes.string,\n        children: ChildrenType.isRequired,\n        mix: MixType.isRequired,\n        onClick: (props, propName, componentName) => {\n            const propValue = props[propName];\n            if (propValue === null) {\n                return;\n            }\n            if (typeof propValue === 'function') {\n                return;\n            }\n            throw new Error(`${componentName} only accepts null or string`);\n        }\n    };\n\n    static defaultProps = {\n        subHeading: '',\n        heading: '',\n        isContentExpanded: false,\n        onClick: null\n    };\n\n    expandableContentRef = createRef();\n\n    __construct(props) {\n        super.__construct(props);\n        const { isContentExpanded } = this.props;\n        this.state = {\n            isContentExpanded,\n            // eslint-disable-next-line react/no-unused-state\n            prevIsContentExpanded: isContentExpanded\n        };\n    }\n\n    static getDerivedStateFromProps({ isContentExpanded }, { prevIsContentExpanded }) {\n        if (isContentExpanded !== prevIsContentExpanded) {\n            return {\n                prevIsContentExpanded: isContentExpanded,\n                isContentExpanded\n            };\n        }\n\n        return null;\n    }\n\n    scrollToExpandedContent() {\n        const { isContentExpanded } = this.state;\n        const elem = this.expandableContentRef && this.expandableContentRef.current;\n\n        if (isContentExpanded && !elem) {\n            return;\n        }\n\n        const elemToWindowTopDist = elem.getBoundingClientRect().top;\n        const windowToPageTopDist = document.body.getBoundingClientRect().top;\n        const topToElemDistance = elemToWindowTopDist - windowToPageTopDist;\n        const {\n            total: totalFixedElementHeight,\n            bottom: bottomFixedElementHeight\n        } = getFixedElementHeight();\n\n        const elemMaxOffsetHeight = screen.height > elem.offsetHeight + bottomFixedElementHeight\n            ? elem.offsetHeight\n            : screen.height - totalFixedElementHeight;\n        const scrollTo = topToElemDistance - (screen.height - bottomFixedElementHeight - elemMaxOffsetHeight);\n\n        // checking if button is in a view-port\n        if (-windowToPageTopDist >= scrollTo) {\n            return;\n        }\n\n        window.scrollTo({ behavior: 'smooth', top: scrollTo });\n    }\n\n    toggleExpand = () => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n            return;\n        }\n        this.setState(\n            ({ isContentExpanded }) => ({ isContentExpanded: !isContentExpanded }),\n            () => this.scrollToExpandedContent()\n        );\n    };\n\n    renderButton() {\n        const { isContentExpanded } = this.state;\n        const {\n            heading,\n            subHeading,\n            mix\n        } = this.props;\n\n        return (\n            <button\n              block=\"ExpandableContent\"\n              elem=\"Button\"\n              mods={ { isContentExpanded } }\n              mix={ { ...mix, elem: 'ExpandableContentButton' } }\n              onClick={ this.toggleExpand }\n            >\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"Heading\"\n                  mix={ { ...mix, elem: 'ExpandableContentHeading' } }\n                >\n                    { typeof heading === 'string' ? (\n                        <TextPlaceholder content={ heading } length=\"medium\" />\n                    ) : (\n                        heading\n                    ) }\n                </span>\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"SubHeading\"\n                  mix={ { ...mix, elem: 'ExpandableContentSubHeading' } }\n                >\n                    { subHeading }\n                </span>\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, mix } = this.props;\n        const { isContentExpanded } = this.state;\n        const mods = { isContentExpanded };\n        return (\n            <div\n              block=\"ExpandableContent\"\n              elem=\"Content\"\n              mods={ mods }\n              mix={ { ...mix, elem: 'ExpandableContentContent', mods } }\n            >\n                { children }\n            </div>\n        );\n    }\n\n    render() {\n        const { mix } = this.props;\n        return (\n            <article\n              block=\"ExpandableContent\"\n              mix={ mix }\n              ref={ this.expandableContentRef }\n            >\n                { this.renderButton() }\n                { this.renderContent() }\n            </article>\n        );\n    }\n}\nexport default ExpandableContent;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const LocationType = PropTypes.shape({\n    hash: PropTypes.string,\n    key: PropTypes.string,\n    pathname: PropTypes.string,\n    search: PropTypes.string\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ProductConfigurableAttributes from './ProductConfigurableAttributes.component';\n\n/** @namespace Component/ProductConfigurableAttributes/Container */\nexport class ProductConfigurableAttributesContainer extends PureComponent {\n    static propTypes = {\n        getLink: PropTypes.func.isRequired,\n        parameters: PropTypes.shape({}).isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        handleOptionClick: this.handleOptionClick.bind(this),\n        getSubHeading: this.getSubHeading.bind(this),\n        isSelected: this.isSelected.bind(this),\n        getLink: this.getLink.bind(this)\n    };\n\n    getLink({ attribute_code, attribute_value }) {\n        const { getLink } = this.props;\n        return getLink(attribute_code, attribute_value);\n    }\n\n    getSubHeading({ attribute_values, attribute_code, attribute_options }) {\n        return attribute_values.reduce((acc, attribute_value) => (\n            this.isSelected({ attribute_code, attribute_value })\n                ? [...acc, attribute_options[attribute_value].label]\n                : acc\n        ), []).join(', ');\n    }\n\n    handleOptionClick({ attribute_code, attribute_value }) {\n        const { updateConfigurableVariant } = this.props;\n        updateConfigurableVariant(attribute_code, attribute_value);\n    }\n\n    isSelected({ attribute_code, attribute_value }) {\n        const { parameters = {} } = this.props;\n        const parameter = parameters[attribute_code];\n\n        if (parameter === undefined) {\n            return false;\n        }\n        if (parameter.length !== undefined) {\n            return parameter.includes(attribute_value);\n        }\n\n        return parameter === attribute_value;\n    }\n\n    render() {\n        return (\n            <ProductConfigurableAttributes\n              { ...this.props }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributesContainer;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ExpandableContent from 'Component/ExpandableContent';\nimport ProductAttributeValue from 'Component/ProductAttributeValue';\nimport ProductConfigurableAttributeDropdown from 'Component/ProductConfigurableAttributeDropdown';\nimport { MixType } from 'Type/Common';\nimport { AttributeType } from 'Type/ProductList';\n\nimport './ProductConfigurableAttributes.style';\n\n/** @namespace Component/ProductConfigurableAttributes/Component */\nexport class ProductConfigurableAttributes extends PureComponent {\n    static propTypes = {\n        isContentExpanded: PropTypes.bool,\n        numberOfPlaceholders: PropTypes.arrayOf(PropTypes.number),\n        configurable_options: PropTypes.objectOf(AttributeType).isRequired,\n        parameters: PropTypes.shape({}).isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired,\n        isReady: PropTypes.bool,\n        mix: MixType,\n        getIsConfigurableAttributeAvailable: PropTypes.func,\n        handleOptionClick: PropTypes.func.isRequired,\n        getSubHeading: PropTypes.func.isRequired,\n        isSelected: PropTypes.func.isRequired,\n        getLink: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        isReady: true,\n        mix: {},\n        // eslint-disable-next-line no-magic-numbers\n        numberOfPlaceholders: [6, 10, 7],\n        isContentExpanded: false,\n        getIsConfigurableAttributeAvailable: () => true\n    };\n\n    renderConfigurableAttributeValue(attribute) {\n        const {\n            getIsConfigurableAttributeAvailable,\n            handleOptionClick,\n            getLink,\n            isSelected\n        } = this.props;\n\n        const { attribute_value } = attribute;\n\n        return (\n            <ProductAttributeValue\n              key={ attribute_value }\n              attribute={ attribute }\n              isSelected={ isSelected(attribute) }\n              isAvailable={ getIsConfigurableAttributeAvailable(attribute) }\n              onClick={ handleOptionClick }\n              getLink={ getLink }\n            />\n        );\n    }\n\n    renderSwatch(option) {\n        const { attribute_values } = option;\n\n        return (\n            <div\n              block=\"ProductConfigurableAttributes\"\n              elem=\"SwatchList\"\n            >\n                { attribute_values.map((attribute_value) => (\n                    this.renderConfigurableAttributeValue({ ...option, attribute_value })\n                )) }\n            </div>\n        );\n    }\n\n    renderDropdown(option) {\n        const {\n            updateConfigurableVariant,\n            getIsConfigurableAttributeAvailable,\n            parameters\n        } = this.props;\n\n        return (\n            <ProductConfigurableAttributeDropdown\n              option={ option }\n              updateConfigurableVariant={ updateConfigurableVariant }\n              getIsConfigurableAttributeAvailable={ getIsConfigurableAttributeAvailable }\n              parameters={ parameters }\n            />\n        );\n    }\n\n    renderPlaceholders() {\n        const { numberOfPlaceholders, isContentExpanded } = this.props;\n\n        return numberOfPlaceholders.map((length, i) => (\n            <ExpandableContent\n              // eslint-disable-next-line react/no-array-index-key\n              key={ i }\n              mix={ {\n                  block: 'ProductConfigurableAttributes',\n                  elem: 'Expandable'\n              } }\n              isContentExpanded={ isContentExpanded }\n            >\n                <div\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={ i }\n                  block=\"ProductConfigurableAttributes\"\n                  elem=\"SwatchList\"\n                >\n                    { Array.from({ length }, (_, i) => (\n                        <div\n                          // eslint-disable-next-line react/no-array-index-key\n                          key={ i }\n                          block=\"ProductConfigurableAttributes\"\n                          elem=\"Placeholder\"\n                        />\n                    )) }\n                </div>\n            </ExpandableContent>\n        ));\n    }\n\n    renderConfigurableAttributes() {\n        const {\n            configurable_options,\n            isContentExpanded,\n            getSubHeading\n        } = this.props;\n\n        return Object.values(configurable_options).map((option) => {\n            const {\n                attribute_label,\n                attribute_code,\n                attribute_options\n            } = option;\n\n            const [{ swatch_data }] = attribute_options ? Object.values(attribute_options) : [{}];\n            const isSwatch = !!swatch_data;\n\n            return (\n                <ExpandableContent\n                  key={ attribute_code }\n                  heading={ attribute_label }\n                  subHeading={ getSubHeading(option) }\n                  mix={ {\n                      block: 'ProductConfigurableAttributes',\n                      elem: 'Expandable'\n                  } }\n                  isContentExpanded={ isContentExpanded }\n                >\n                    { isSwatch ? this.renderSwatch(option) : this.renderDropdown(option) }\n                </ExpandableContent>\n            );\n        });\n    }\n\n    render() {\n        const { isReady, mix } = this.props;\n\n        return (\n            <div\n              block=\"ProductConfigurableAttributes\"\n              mods={ { isLoading: !isReady } }\n              mix={ mix }\n            >\n                { isReady ? this.renderConfigurableAttributes() : this.renderPlaceholders() }\n            </div>\n        );\n    }\n}\n\nexport default ProductConfigurableAttributes;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { AttributeType } from 'Type/ProductList';\n\nimport ProductConfigurableAttributeDropdown from './ProductConfigurableAttributeDropdown.component';\n\n/** @namespace Component/ProductConfigurableAttributeDropdown/Container */\nexport class ProductConfigurableAttributeDropdownContainer extends PureComponent {\n    static propTypes = {\n        option: AttributeType.isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired,\n        getIsConfigurableAttributeAvailable: PropTypes.func.isRequired,\n        parameters: PropTypes.objectOf(PropTypes.string).isRequired\n    };\n\n    containerFunctions = {\n        onChange: this.onChange.bind(this)\n    };\n\n    onChange(value) {\n        const {\n            updateConfigurableVariant,\n            option: { attribute_code }\n        } = this.props;\n\n        updateConfigurableVariant(attribute_code, value);\n    }\n\n    containerProps = () => {\n        const { option: { attribute_code, attribute_label } } = this.props;\n\n        return {\n            selectValue: this._getSelectValue(),\n            selectOptions: this._getSelectOptions(),\n            selectName: attribute_code,\n            selectLabel: attribute_label\n        };\n    };\n\n    _getSelectOptions = () => {\n        const {\n            option: {\n                attribute_options,\n                attribute_code\n            },\n            getIsConfigurableAttributeAvailable\n        } = this.props;\n\n        if (!attribute_options) {\n            // eslint-disable-next-line no-console\n            console.warn(`Please make sure \"${ attribute_code }\" is visible on Storefront.`);\n            return [];\n        }\n\n        return Object.values(attribute_options)\n            .reduce((acc, option) => {\n                const { value } = option;\n\n                const isAvailable = getIsConfigurableAttributeAvailable({\n                    attribute_code,\n                    attribute_value: value\n                });\n\n                if (!isAvailable) {\n                    return acc;\n                }\n\n                return [...acc, {\n                    ...option,\n                    id: value\n                }];\n            }, []);\n    };\n\n    _getSelectValue = () => {\n        const { option: { attribute_code } } = this.props;\n        const { parameters = {} } = this.props;\n        return parameters[attribute_code];\n    };\n\n    render() {\n        return (\n            <ProductConfigurableAttributeDropdown\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributeDropdownContainer;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nexport { default } from './ProductConfigurableAttributeDropdown.container';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport Field from 'Component/Field';\n\nimport './ProductConfigurableAttributeDropdown.style';\n\n/** @namespace Component/ProductConfigurableAttributeDropdown/Component */\nexport class ProductConfigurableAttributeDropdown extends PureComponent {\n    static propTypes = {\n        onChange: PropTypes.func.isRequired,\n        selectOptions: PropTypes.arrayOf(PropTypes.shape({\n            label: PropTypes.string,\n            id: PropTypes.string,\n            value: PropTypes.string\n        })).isRequired,\n        selectValue: PropTypes.string,\n        selectLabel: PropTypes.string,\n        selectName: PropTypes.string.isRequired\n    };\n\n    static defaultProps = {\n        selectValue: '',\n        selectLabel: 'attribute'\n    };\n\n    render() {\n        const {\n            selectOptions,\n            selectValue,\n            selectName,\n            selectLabel,\n            onChange\n        } = this.props;\n\n        return (\n            <Field\n              id={ selectName }\n              name={ selectName }\n              type=\"select\"\n              placeholder={ __('Choose %s', selectLabel.toLowerCase()) }\n              mix={ { block: 'ProductConfigurableAttributeDropdown' } }\n              selectOptions={ selectOptions }\n              value={ selectValue }\n              onChange={ onChange }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributeDropdown;\n"],"sourceRoot":""}